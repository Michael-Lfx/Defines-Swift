var ACL_ADD_FILE: acl_perm_t {
  get {
    return
  }
}
var ACL_ADD_SUBDIRECTORY: acl_perm_t {
  get {
    return
  }
}
var ACL_APPEND_DATA: acl_perm_t {
  get {
    return
  }
}
var ACL_CHANGE_OWNER: acl_perm_t {
  get {
    return
  }
}
var ACL_DELETE: acl_perm_t {
  get {
    return
  }
}
var ACL_DELETE_CHILD: acl_perm_t {
  get {
    return
  }
}
var ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_FILE_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_INHERITED: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_LIMIT_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_ENTRY_ONLY_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_EXECUTE: acl_perm_t {
  get {
    return
  }
}
var ACL_EXTENDED_ALLOW: acl_tag_t {
  get {
    return
  }
}
var ACL_EXTENDED_DENY: acl_tag_t {
  get {
    return
  }
}
var ACL_FIRST_ENTRY: acl_entry_id_t {
  get {
    return
  }
}
var ACL_FLAG_DEFER_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_FLAG_NO_INHERIT: acl_flag_t {
  get {
    return
  }
}
var ACL_LAST_ENTRY: acl_entry_id_t {
  get {
    return
  }
}
var ACL_LIST_DIRECTORY: acl_perm_t {
  get {
    return
  }
}
var ACL_NEXT_ENTRY: acl_entry_id_t {
  get {
    return
  }
}
var ACL_READ_ATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_READ_DATA: acl_perm_t {
  get {
    return
  }
}
var ACL_READ_EXTATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_READ_SECURITY: acl_perm_t {
  get {
    return
  }
}
var ACL_SEARCH: acl_perm_t {
  get {
    return
  }
}
var ACL_SYNCHRONIZE: acl_perm_t {
  get {
    return
  }
}
var ACL_TYPE_ACCESS: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_AFS: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_CODA: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_DEFAULT: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_EXTENDED: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_NTFS: acl_type_t {
  get {
    return
  }
}
var ACL_TYPE_NWFS: acl_type_t {
  get {
    return
  }
}
var ACL_UNDEFINED_TAG: acl_tag_t {
  get {
    return
  }
}
var ACL_WRITE_ATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_WRITE_DATA: acl_perm_t {
  get {
    return
  }
}
var ACL_WRITE_EXTATTRIBUTES: acl_perm_t {
  get {
    return
  }
}
var ACL_WRITE_SECURITY: acl_perm_t {
  get {
    return
  }
}
struct ACTION {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias AbsoluteTime = UnsignedWide
struct BTHeaderRec {
  var treeDepth: UInt16
  var rootNode: UInt32
  var leafRecords: UInt32
  var firstLeafNode: UInt32
  var lastLeafNode: UInt32
  var nodeSize: UInt16
  var maxKeyLength: UInt16
  var totalNodes: UInt32
  var freeNodes: UInt32
  var reserved1: UInt16
  var clumpSize: UInt32
  var btreeType: UInt8
  var keyCompareType: UInt8
  var attributes: UInt32
  var reserved3: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct BTNodeDescriptor {
  var fLink: UInt32
  var bLink: UInt32
  var kind: Int8
  var height: UInt8
  var numRecords: UInt16
  var reserved: UInt16
}
struct BTreeKeyLimits {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias Boolean = UInt8
typealias Byte = UInt8
typealias ByteCount = UInt
typealias ByteOffset = UInt
typealias BytePtr = UnsafeMutablePointer<UInt8>
typealias CharParameter = Int16
typealias CompTimeValue = wide
typealias ConstHFSUniStr255Param = UnsafePointer<HFSUniStr255>
typealias ConstLogicalAddress = UnsafePointer<Void>
typealias ConstStr15Param = UnsafePointer<UInt8>
typealias ConstStr255Param = UnsafePointer<UInt8>
typealias ConstStr27Param = UnsafePointer<UInt8>
typealias ConstStr31Param = UnsafePointer<UInt8>
typealias ConstStr32Param = UnsafePointer<UInt8>
typealias ConstStr63Param = UnsafePointer<UInt8>
typealias ConstStrFileNameParam = ConstStr63Param
typealias ConstStringPtr = UnsafePointer<UInt8>
struct DBM {
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct DIR {
  var __dd_fd: Int32
  var __dd_loc: Int
  var __dd_size: Int
  var __dd_buf: UnsafeMutablePointer<Int8>
  var __dd_len: Int32
  var __dd_seek: Int
  var __dd_rewind: Int
  var __dd_flags: Int32
  var __dd_lock: __darwin_pthread_mutex_t
  var __dd_td: COpaquePointer
}
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func DebugStr(debuggerMsg: ConstStr255Param)
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func Debugger()
typealias Dl_info = dl_info
typealias Duration = Int32
var ENTER: ACTION {
  get {
    return
  }
}
typealias ENTRY = entry
typealias FILE = __sFILE
var FILESEC_ACL: filesec_property_t {
  get {
    return
  }
}
var FILESEC_ACL_ALLOCSIZE: filesec_property_t {
  get {
    return
  }
}
var FILESEC_ACL_RAW: filesec_property_t {
  get {
    return
  }
}
var FILESEC_GROUP: filesec_property_t {
  get {
    return
  }
}
var FILESEC_GRPUUID: filesec_property_t {
  get {
    return
  }
}
var FILESEC_MODE: filesec_property_t {
  get {
    return
  }
}
var FILESEC_OWNER: filesec_property_t {
  get {
    return
  }
}
var FILESEC_UUID: filesec_property_t {
  get {
    return
  }
}
var FIND: ACTION {
  get {
    return
  }
}
struct FTW {
  var base: Int32
  var level: Int32
}
typealias Fixed = Int32
struct FixedPoint {
  var x: Fixed
  var y: Fixed
}
typealias FixedPtr = UnsafeMutablePointer<Fixed>
struct FixedRect {
  var left: Fixed
  var top: Fixed
  var right: Fixed
  var bottom: Fixed
}
struct Float32Point {
  var x: Float32
  var y: Float32
}
struct Float80 {
  var exp: Int16
  var man: (UInt16, UInt16, UInt16, UInt16)
}
struct Float96 {
  var exp: (Int16, Int16)
  var man: (UInt16, UInt16, UInt16, UInt16)
}
struct FndrDirInfo {
  var frFlags: UInt16
  var opaque: Int16
}
struct FndrExtendedDirInfo {
  var document_id: UInt32
  var date_added: UInt32
  var extended_flags: UInt16
  var reserved3: UInt16
  var write_gen_counter: UInt32
}
struct FndrExtendedFileInfo {
  var document_id: UInt32
  var date_added: UInt32
  var extended_flags: UInt16
  var reserved2: UInt16
  var write_gen_counter: UInt32
}
struct FndrFileInfo {
  var fdType: UInt32
  var fdCreator: UInt32
  var fdFlags: UInt16
  var opaque: Int16
}
struct FndrOpaqueInfo {
  var opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias FourCharCode = UInt32
typealias Fract = Int32
typealias FractPtr = UnsafeMutablePointer<Fract>
struct HFSCatalogFile {
  var recordType: Int16
  var flags: UInt8
  var fileType: Int8
  var userInfo: FndrFileInfo
  var fileID: UInt32
  var dataStartBlock: UInt16
  var dataLogicalSize: Int32
  var dataPhysicalSize: Int32
  var rsrcStartBlock: UInt16
  var rsrcLogicalSize: Int32
  var rsrcPhysicalSize: Int32
  var createDate: UInt32
  var modifyDate: UInt32
  var backupDate: UInt32
  var finderInfo: FndrOpaqueInfo
  var clumpSize: UInt16
  var dataExtents: HFSExtentRecord
  var rsrcExtents: HFSExtentRecord
  var reserved: UInt32
}
struct HFSCatalogFolder {
  var recordType: Int16
  var flags: UInt16
  var valence: UInt16
  var folderID: UInt32
  var createDate: UInt32
  var modifyDate: UInt32
  var backupDate: UInt32
  var userInfo: FndrDirInfo
  var finderInfo: FndrOpaqueInfo
  var reserved: (UInt32, UInt32, UInt32, UInt32)
}
struct HFSCatalogKey {
  var keyLength: UInt8
  var reserved: UInt8
  var parentID: UInt32
  var nodeName: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
}
struct HFSCatalogThread {
  var recordType: Int16
  var reserved: (Int32, Int32)
  var parentID: UInt32
  var nodeName: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
}
struct HFSExtentDescriptor {
  var startBlock: UInt16
  var blockCount: UInt16
}
struct HFSExtentKey {
  var keyLength: UInt8
  var forkType: UInt8
  var fileID: UInt32
  var startBlock: UInt16
}
typealias HFSExtentRecord = (HFSExtentDescriptor, HFSExtentDescriptor, HFSExtentDescriptor)
struct HFSMasterDirectoryBlock {
  var drSigWord: UInt16
  var drCrDate: UInt32
  var drLsMod: UInt32
  var drAtrb: UInt16
  var drNmFls: UInt16
  var drVBMSt: UInt16
  var drAllocPtr: UInt16
  var drNmAlBlks: UInt16
  var drAlBlkSiz: UInt32
  var drClpSiz: UInt32
  var drAlBlSt: UInt16
  var drNxtCNID: UInt32
  var drFreeBks: UInt16
  var drVN: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var drVolBkUp: UInt32
  var drVSeqNum: UInt16
  var drWrCnt: UInt32
  var drXTClpSiz: UInt32
  var drCTClpSiz: UInt32
  var drNmRtDirs: UInt16
  var drFilCnt: UInt32
  var drDirCnt: UInt32
  var drFndrInfo: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  var drEmbedSigWord: UInt16
  var drEmbedExtent: HFSExtentDescriptor
  var drXTFlSize: UInt32
  var drXTExtRec: HFSExtentRecord
  var drCTFlSize: UInt32
  var drCTExtRec: HFSExtentRecord
}
struct HFSPlusAttrData {
  var recordType: UInt32
  var reserved: (UInt32, UInt32)
  var attrSize: UInt32
  var attrData: (UInt8, UInt8)
}
struct HFSPlusAttrExtents {
  var recordType: UInt32
  var reserved: UInt32
  var extents: HFSPlusExtentRecord
}
struct HFSPlusAttrForkData {
  var recordType: UInt32
  var reserved: UInt32
  var theFork: HFSPlusForkData
}
struct HFSPlusAttrInlineData {
  var recordType: UInt32
  var reserved: UInt32
  var logicalSize: UInt32
  var userData: (UInt8, UInt8)
}
struct HFSPlusAttrKey {
  var keyLength: UInt16
  var pad: UInt16
  var fileID: UInt32
  var startBlock: UInt32
  var attrNameLen: UInt16
  var attrName: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)
}
struct HFSPlusBSDInfo {
  var ownerID: UInt32
  var groupID: UInt32
  var adminFlags: UInt8
  var ownerFlags: UInt8
  var fileMode: UInt16
}
struct HFSPlusCatalogFile {
  var recordType: Int16
  var flags: UInt16
  var reserved1: UInt32
  var fileID: UInt32
  var createDate: UInt32
  var contentModDate: UInt32
  var attributeModDate: UInt32
  var accessDate: UInt32
  var backupDate: UInt32
  var bsdInfo: HFSPlusBSDInfo
  var userInfo: FndrFileInfo
  var finderInfo: FndrOpaqueInfo
  var textEncoding: UInt32
  var reserved2: UInt32
  var dataFork: HFSPlusForkData
  var resourceFork: HFSPlusForkData
}
struct HFSPlusCatalogFolder {
  var recordType: Int16
  var flags: UInt16
  var valence: UInt32
  var folderID: UInt32
  var createDate: UInt32
  var contentModDate: UInt32
  var attributeModDate: UInt32
  var accessDate: UInt32
  var backupDate: UInt32
  var bsdInfo: HFSPlusBSDInfo
  var userInfo: FndrDirInfo
  var finderInfo: FndrOpaqueInfo
  var textEncoding: UInt32
  var folderCount: UInt32
}
struct HFSPlusCatalogKey {
  var keyLength: UInt16
  var parentID: UInt32
  var nodeName: HFSUniStr255
}
struct HFSPlusCatalogThread {
  var recordType: Int16
  var reserved: Int16
  var parentID: UInt32
  var nodeName: HFSUniStr255
}
struct HFSPlusExtentDescriptor {
  var startBlock: UInt32
  var blockCount: UInt32
}
struct HFSPlusExtentKey {
  var keyLength: UInt16
  var forkType: UInt8
  var pad: UInt8
  var fileID: UInt32
  var startBlock: UInt32
}
typealias HFSPlusExtentRecord = (HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor, HFSPlusExtentDescriptor)
struct HFSPlusForkData {
  var logicalSize: UInt64
  var clumpSize: UInt32
  var totalBlocks: UInt32
  var extents: HFSPlusExtentRecord
}
struct HFSPlusVolumeHeader {
  var signature: UInt16
  var version: UInt16
  var attributes: UInt32
  var lastMountedVersion: UInt32
  var journalInfoBlock: UInt32
  var createDate: UInt32
  var modifyDate: UInt32
  var backupDate: UInt32
  var checkedDate: UInt32
  var fileCount: UInt32
  var folderCount: UInt32
  var blockSize: UInt32
  var totalBlocks: UInt32
  var freeBlocks: UInt32
  var nextAllocation: UInt32
  var rsrcClumpSize: UInt32
  var dataClumpSize: UInt32
  var nextCatalogID: UInt32
  var writeCount: UInt32
  var encodingsBitmap: UInt64
  var finderInfo: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var allocationFile: HFSPlusForkData
  var extentsFile: HFSPlusForkData
  var catalogFile: HFSPlusForkData
  var attributesFile: HFSPlusForkData
  var startupFile: HFSPlusForkData
}
struct HFSUniStr255 {
  var length: UInt16
  var unicode: (UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16, UInt16)
}
typealias Handle = UnsafeMutablePointer<Ptr>
typealias ItemCount = UInt
struct JournalInfoBlock {
  var flags: UInt32
  var device_signature: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
  var offset: UInt64
  var size: UInt64
  var ext_jnl_uuid: uuid_string_t
  var machine_serial_num: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
var KERNEL_AUDIT_TOKEN: audit_token_t
var KERNEL_SECURITY_TOKEN: security_token_t
var LATENCY_QOS_TIER_0: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_1: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_2: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_3: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_4: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_5: task_latency_qos {
  get {
    return
  }
}
var LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos {
  get {
    return
  }
}
typealias LangCode = Int16
typealias LogicalAddress = UnsafeMutablePointer<Void>
var NDR_record: NDR_record_t
struct NDR_record_t {
  var mig_vers: UInt8
  var if_vers: UInt8
  var reserved1: UInt8
  var mig_encoding: UInt8
  var int_rep: UInt8
  var char_rep: UInt8
  var float_rep: UInt8
  var reserved2: UInt8
}
struct NXByteOrder {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
@availability(*, unavailable) func NXConvertHostDoubleToSwapped(x: Double) -> NXSwappedDouble
@availability(*, unavailable) func NXConvertHostFloatToSwapped(x: Float) -> NXSwappedFloat
@availability(*, unavailable) func NXConvertSwappedDoubleToHost(x: NXSwappedDouble) -> Double
@availability(*, unavailable) func NXConvertSwappedFloatToHost(x: NXSwappedFloat) -> Float
func NXHostByteOrder() -> NXByteOrder
@availability(*, unavailable) func NXSwapBigDoubleToHost(x: NXSwappedDouble) -> Double
@availability(*, unavailable) func NXSwapBigFloatToHost(x: NXSwappedFloat) -> Float
@availability(*, unavailable) func NXSwapBigIntToHost(x: UInt32) -> UInt32
@availability(*, unavailable) func NXSwapBigLongLongToHost(x: UInt64) -> UInt64
@availability(*, unavailable) func NXSwapBigLongToHost(x: UInt) -> UInt
@availability(*, unavailable) func NXSwapBigShortToHost(x: UInt16) -> UInt16
@availability(*, unavailable) func NXSwapDouble(x: NXSwappedDouble) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapFloat(x: NXSwappedFloat) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostDoubleToBig(x: Double) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapHostDoubleToLittle(x: Double) -> NXSwappedDouble
@availability(*, unavailable) func NXSwapHostFloatToBig(x: Float) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostFloatToLittle(x: Float) -> NXSwappedFloat
@availability(*, unavailable) func NXSwapHostIntToBig(x: UInt32) -> UInt32
@availability(*, unavailable) func NXSwapHostIntToLittle(x: UInt32) -> UInt32
@availability(*, unavailable) func NXSwapHostLongLongToBig(x: UInt64) -> UInt64
@availability(*, unavailable) func NXSwapHostLongLongToLittle(x: UInt64) -> UInt64
@availability(*, unavailable) func NXSwapHostLongToBig(x: UInt) -> UInt
@availability(*, unavailable) func NXSwapHostLongToLittle(x: UInt) -> UInt
@availability(*, unavailable) func NXSwapHostShortToBig(x: UInt16) -> UInt16
@availability(*, unavailable) func NXSwapHostShortToLittle(x: UInt16) -> UInt16
@availability(*, unavailable) func NXSwapInt(inv: UInt32) -> UInt32
@availability(*, unavailable) func NXSwapLittleDoubleToHost(x: NXSwappedDouble) -> Double
@availability(*, unavailable) func NXSwapLittleFloatToHost(x: NXSwappedFloat) -> Float
@availability(*, unavailable) func NXSwapLittleIntToHost(x: UInt32) -> UInt32
@availability(*, unavailable) func NXSwapLittleLongLongToHost(x: UInt64) -> UInt64
@availability(*, unavailable) func NXSwapLittleLongToHost(x: UInt) -> UInt
@availability(*, unavailable) func NXSwapLittleShortToHost(x: UInt16) -> UInt16
@availability(*, unavailable) func NXSwapLong(inv: UInt) -> UInt
@availability(*, unavailable) func NXSwapLongLong(inv: UInt64) -> UInt64
@availability(*, unavailable) func NXSwapShort(inv: UInt16) -> UInt16
typealias NXSwappedDouble = UInt64
typealias NXSwappedFloat = UInt
var NX_BigEndian: NXByteOrder {
  get {
    return
  }
}
var NX_LittleEndian: NXByteOrder {
  get {
    return
  }
}
var NX_UnknownByteOrder: NXByteOrder {
  get {
    return
  }
}
struct NumVersion {
  var nonRelRev: UInt8
  var stage: UInt8
  var minorAndBugRev: UInt8
  var majorRev: UInt8
}
typealias NumVersionVariantHandle = UnsafeMutablePointer<NumVersionVariantPtr>
typealias NumVersionVariantPtr = COpaquePointer
@availability(OSX, introduced=10.4) func OSAtomicAdd32(__theAmount: Int32, __theValue: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicAdd32Barrier(__theAmount: Int32, __theValue: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicAdd64(__theAmount: Int64, __theValue: UnsafeMutablePointer<Int64>) -> Int64
@availability(OSX, introduced=10.4) func OSAtomicAdd64Barrier(__theAmount: Int64, __theValue: UnsafeMutablePointer<Int64>) -> Int64
@availability(OSX, introduced=10.4) func OSAtomicAnd32(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicAnd32Barrier(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.5) func OSAtomicAnd32Orig(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.5) func OSAtomicAnd32OrigBarrier(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicCompareAndSwap32(__oldValue: Int32, __newValue: Int32, __theValue: UnsafeMutablePointer<Int32>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicCompareAndSwap32Barrier(__oldValue: Int32, __newValue: Int32, __theValue: UnsafeMutablePointer<Int32>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicCompareAndSwap64(__oldValue: Int64, __newValue: Int64, __theValue: UnsafeMutablePointer<Int64>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicCompareAndSwap64Barrier(__oldValue: Int64, __newValue: Int64, __theValue: UnsafeMutablePointer<Int64>) -> Bool
@availability(OSX, introduced=10.5) func OSAtomicCompareAndSwapInt(__oldValue: Int32, __newValue: Int32, __theValue: UnsafeMutablePointer<Int32>) -> Bool
@availability(OSX, introduced=10.5) func OSAtomicCompareAndSwapIntBarrier(__oldValue: Int32, __newValue: Int32, __theValue: UnsafeMutablePointer<Int32>) -> Bool
@availability(OSX, introduced=10.5) func OSAtomicCompareAndSwapLong(__oldValue: Int, __newValue: Int, __theValue: UnsafeMutablePointer<Int>) -> Bool
@availability(OSX, introduced=10.5) func OSAtomicCompareAndSwapLongBarrier(__oldValue: Int, __newValue: Int, __theValue: UnsafeMutablePointer<Int>) -> Bool
@availability(OSX, introduced=10.5) func OSAtomicCompareAndSwapPtr(__oldValue: UnsafeMutablePointer<Void>, __newValue: UnsafeMutablePointer<Void>, __theValue: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Bool
@availability(OSX, introduced=10.5) func OSAtomicCompareAndSwapPtrBarrier(__oldValue: UnsafeMutablePointer<Void>, __newValue: UnsafeMutablePointer<Void>, __theValue: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Bool
func OSAtomicDecrement32(__theValue: UnsafeMutablePointer<Int32>) -> Int32
func OSAtomicDecrement32Barrier(__theValue: UnsafeMutablePointer<Int32>) -> Int32
func OSAtomicDecrement64(__theValue: UnsafeMutablePointer<Int64>) -> Int64
func OSAtomicDecrement64Barrier(__theValue: UnsafeMutablePointer<Int64>) -> Int64
@availability(OSX, introduced=10.5) func OSAtomicDequeue(__list: COpaquePointer, __offset: UInt) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.5) func OSAtomicEnqueue(__list: COpaquePointer, __new: UnsafeMutablePointer<Void>, __offset: UInt)
@availability(OSX, introduced=10.7) func OSAtomicFifoDequeue(__list: COpaquePointer, __offset: UInt) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.7) func OSAtomicFifoEnqueue(__list: COpaquePointer, __new: UnsafeMutablePointer<Void>, __offset: UInt)
func OSAtomicIncrement32(__theValue: UnsafeMutablePointer<Int32>) -> Int32
func OSAtomicIncrement32Barrier(__theValue: UnsafeMutablePointer<Int32>) -> Int32
func OSAtomicIncrement64(__theValue: UnsafeMutablePointer<Int64>) -> Int64
func OSAtomicIncrement64Barrier(__theValue: UnsafeMutablePointer<Int64>) -> Int64
@availability(OSX, introduced=10.4) func OSAtomicOr32(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicOr32Barrier(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.5) func OSAtomicOr32Orig(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.5) func OSAtomicOr32OrigBarrier(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicTestAndClear(__n: UInt32, __theAddress: UnsafeMutablePointer<Void>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicTestAndClearBarrier(__n: UInt32, __theAddress: UnsafeMutablePointer<Void>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicTestAndSet(__n: UInt32, __theAddress: UnsafeMutablePointer<Void>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicTestAndSetBarrier(__n: UInt32, __theAddress: UnsafeMutablePointer<Void>) -> Bool
@availability(OSX, introduced=10.4) func OSAtomicXor32(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.4) func OSAtomicXor32Barrier(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.5) func OSAtomicXor32Orig(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
@availability(OSX, introduced=10.5) func OSAtomicXor32OrigBarrier(__theMask: UInt32, __theValue: UnsafeMutablePointer<UInt32>) -> Int32
var OSBigEndian: Int {
  get {
    return
  }
}
typealias OSErr = Int16
func OSHostByteOrder() -> Int32
var OSLittleEndian: Int {
  get {
    return
  }
}
@availability(OSX, introduced=10.4) func OSMemoryBarrier()
func OSReadSwapInt16(base: UnsafePointer<Void>, byteOffset: UInt) -> UInt16
func OSReadSwapInt32(base: UnsafePointer<Void>, byteOffset: UInt) -> UInt32
func OSReadSwapInt64(base: UnsafePointer<Void>, byteOffset: UInt) -> UInt64
typealias OSSpinLock = Int32
@availability(OSX, introduced=10.4) func OSSpinLockLock(__lock: UnsafeMutablePointer<OSSpinLock>)
@availability(OSX, introduced=10.4) func OSSpinLockTry(__lock: UnsafeMutablePointer<OSSpinLock>) -> Bool
@availability(OSX, introduced=10.4) func OSSpinLockUnlock(__lock: UnsafeMutablePointer<OSSpinLock>)
typealias OSStatus = Int32
typealias OSType = FourCharCode
typealias OSTypePtr = UnsafeMutablePointer<OSType>
var OSUnknownByteOrder: Int {
  get {
    return
  }
}
func OSWriteSwapInt16(base: UnsafeMutablePointer<Void>, byteOffset: UInt, data: UInt16)
func OSWriteSwapInt32(base: UnsafeMutablePointer<Void>, byteOffset: UInt, data: UInt32)
func OSWriteSwapInt64(base: UnsafeMutablePointer<Void>, byteOffset: UInt, data: UInt64)
typealias OptionBits = UInt32
typealias PBVersion = UInt32
typealias PRefCon = UnsafeMutablePointer<Void>
var P_ALL: idtype_t {
  get {
    return
  }
}
var P_PGID: idtype_t {
  get {
    return
  }
}
var P_PID: idtype_t {
  get {
    return
  }
}
typealias PhysicalAddress = UnsafeMutablePointer<Void>
struct Point {
  var v: Int16
  var h: Int16
}
typealias PointPtr = UnsafeMutablePointer<Point>
typealias ProcHandle = UnsafeMutablePointer<ProcPtr>
typealias ProcPtr = CFunctionPointer<(() -> Int)>
struct ProcessSerialNumber {
  var highLongOfPSN: UInt32
  var lowLongOfPSN: UInt32
}
typealias ProcessSerialNumberPtr = UnsafeMutablePointer<ProcessSerialNumber>
typealias Ptr = UnsafeMutablePointer<Int8>
@availability(OSX, introduced=10.10) @availability(OSX, introduced=10.10) var QOS_CLASS_BACKGROUND: qos_class_t {
  get {
    return
  }
}
@availability(OSX, introduced=10.10) var QOS_CLASS_DEFAULT: qos_class_t {
  get {
    return
  }
}
@availability(OSX, introduced=10.10) var QOS_CLASS_UNSPECIFIED: qos_class_t {
  get {
    return
  }
}
@availability(OSX, introduced=10.10) var QOS_CLASS_USER_INITIATED: qos_class_t {
  get {
    return
  }
}
@availability(OSX, introduced=10.10) var QOS_CLASS_USER_INTERACTIVE: qos_class_t {
  get {
    return
  }
}
@availability(OSX, introduced=10.10) var QOS_CLASS_UTILITY: qos_class_t {
  get {
    return
  }
}
struct Rect {
  var top: Int16
  var left: Int16
  var bottom: Int16
  var right: Int16
}
typealias RectPtr = UnsafeMutablePointer<Rect>
typealias RegionCode = Int16
typealias Register68kProcPtr = CFunctionPointer<(() -> Void)>
typealias ResType = FourCharCode
typealias ResTypePtr = UnsafeMutablePointer<ResType>
var SOCKINFO_GENERIC: Int {
  get {
    return
  }
}
var SOCKINFO_IN: Int {
  get {
    return
  }
}
var SOCKINFO_KERN_CTL: Int {
  get {
    return
  }
}
var SOCKINFO_KERN_EVENT: Int {
  get {
    return
  }
}
var SOCKINFO_NDRV: Int {
  get {
    return
  }
}
var SOCKINFO_TCP: Int {
  get {
    return
  }
}
var SOCKINFO_UN: Int {
  get {
    return
  }
}
typealias SRefCon = UnsafeMutablePointer<Void>
typealias ScriptCode = Int16
typealias ShortFixed = Int16
typealias ShortFixedPtr = UnsafeMutablePointer<ShortFixed>
typealias SignedByte = Int8
typealias Size = Int
typealias Str15 = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias Str255 = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias Str27 = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias Str31 = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias Str32 = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias Str32Field = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias Str63 = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias StrFileName = Str63
typealias StringHandle = UnsafeMutablePointer<StringPtr>
typealias StringPtr = UnsafeMutablePointer<UInt8>
typealias Style = UInt8
typealias StyleField = Style
typealias StyleParameter = Int16
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func SysBreak()
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func SysBreakFunc(debuggerMsg: ConstStr255Param)
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func SysBreakStr(debuggerMsg: ConstStr255Param)
var TASK_BACKGROUND_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_CONTROL_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_DEFAULT_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_FOREGROUND_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_GRAPHICS_SERVER: task_role {
  get {
    return
  }
}
var TASK_NONUI_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_RENICED: task_role {
  get {
    return
  }
}
var TASK_THROTTLE_APPLICATION: task_role {
  get {
    return
  }
}
var TASK_UNSPECIFIED: task_role {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_0: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_1: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_2: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_3: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_4: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_5: task_throughput_qos {
  get {
    return
  }
}
var THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos {
  get {
    return
  }
}
typealias TimeBase = COpaquePointer
struct TimeRecord {
  var value: CompTimeValue
  var scale: TimeScale
  var base: TimeBase
}
typealias TimeScale = Int32
typealias TimeValue = Int32
typealias TimeValue64 = Int64
var UIO_READ: uio_rw {
  get {
    return
  }
}
var UIO_WRITE: uio_rw {
  get {
    return
  }
}
typealias UNDServerRef = mach_port_t
typealias URefCon = UnsafeMutablePointer<Void>
typealias UTF16Char = UInt16
typealias UTF32Char = UInt32
typealias UTF8Char = UInt8
typealias UniChar = UInt16
typealias UniCharCount = UInt
typealias UniCharCountPtr = UnsafeMutablePointer<UniCharCount>
typealias UniCharPtr = UnsafeMutablePointer<UniChar>
typealias UnicodeScalarValue = UInt32
typealias UniversalProcHandle = UnsafeMutablePointer<UniversalProcPtr>
typealias UniversalProcPtr = ProcPtr
typealias UnsignedFixed = UInt32
typealias UnsignedFixedPtr = UnsafeMutablePointer<UnsignedFixed>
struct UnsignedWide {
  var lo: UInt32
  var hi: UInt32
}
typealias UnsignedWidePtr = UnsafeMutablePointer<UnsignedWide>
typealias VHSelect = Int8
struct VISIT {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
struct VersRec {
  var numericVersion: NumVersion
  var countryCode: Int16
  var shortVersion: Str255
  var reserved: Str255
}
typealias VersRecHndl = UnsafeMutablePointer<VersRecPtr>
typealias VersRecPtr = UnsafeMutablePointer<VersRec>
typealias WidePtr = UnsafeMutablePointer<wide>
@availability(OSX, introduced=10.6) func _Block_copy(aBlock: UnsafePointer<Void>) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.6) func _Block_object_assign(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: Int32)
@availability(OSX, introduced=10.6) func _Block_object_dispose(_: UnsafePointer<Void>, _: Int32)
@availability(OSX, introduced=10.6) func _Block_release(aBlock: UnsafePointer<Void>)
var _CurrentRuneLocale: UnsafeMutablePointer<_RuneLocale>
var _DefaultRuneLocale: _RuneLocale
@noreturn func _Exit(_: Int32)
let _FE_DFL_DISABLE_SSE_DENORMS_ENV: fenv_t
let _FE_DFL_ENV: fenv_t
@availability(OSX, introduced=10.6) var _NSConcreteGlobalBlock: (UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>)
@availability(OSX, introduced=10.6) var _NSConcreteStackBlock: (UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>)
func _OSReadInt16(base: UnsafePointer<Void>, byteOffset: UInt) -> UInt16
func _OSReadInt32(base: UnsafePointer<Void>, byteOffset: UInt) -> UInt32
func _OSReadInt64(base: UnsafePointer<Void>, byteOffset: UInt) -> UInt64
func _OSSwapInt16(_data: __uint16_t) -> __uint16_t
func _OSSwapInt32(_data: __uint32_t) -> __uint32_t
func _OSSwapInt64(_data: __uint64_t) -> __uint64_t
func _OSWriteInt16(base: UnsafeMutablePointer<Void>, byteOffset: UInt, data: UInt16)
func _OSWriteInt32(base: UnsafeMutablePointer<Void>, byteOffset: UInt, data: UInt32)
func _OSWriteInt64(base: UnsafeMutablePointer<Void>, byteOffset: UInt, data: UInt64)
struct _RuneCharClass {
  var __name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __mask: __uint32_t
}
struct _RuneEntry {
  var __min: __darwin_rune_t
  var __max: __darwin_rune_t
  var __map: __darwin_rune_t
  var __types: UnsafeMutablePointer<__uint32_t>
}
struct _RuneLocale {
  var __magic: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __encoding: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __sgetrune: CFunctionPointer<((UnsafePointer<Int8>, __darwin_size_t, UnsafeMutablePointer<UnsafePointer<Int8>>) -> __darwin_rune_t)>
  var __sputrune: CFunctionPointer<((__darwin_rune_t, UnsafeMutablePointer<Int8>, __darwin_size_t, UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32)>
  var __invalid_rune: __darwin_rune_t
  var __runetype: (__uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t)
  var __maplower: (__darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t)
  var __mapupper: (__darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t, __darwin_rune_t)
  var __runetype_ext: _RuneRange
  var __maplower_ext: _RuneRange
  var __mapupper_ext: _RuneRange
  var __variable: UnsafeMutablePointer<Void>
  var __variable_len: Int32
  var __ncharclasses: Int32
  var __charclasses: UnsafeMutablePointer<_RuneCharClass>
}
struct _RuneRange {
  var __nranges: Int32
  var __ranges: UnsafeMutablePointer<_RuneEntry>
}
func __NDR_convert__mig_reply_error_t(x: UnsafeMutablePointer<mig_reply_error_t>)
struct __Reply___host_page_size_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var out_page_size: vm_size_t
}
struct __Reply___mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
}
struct __Reply__act_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Reply__act_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__clock_alarm_reply_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__clock_alarm_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__clock_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var clock_attrCnt: mach_msg_type_number_t
  var clock_attr: (Int32)
}
struct __Reply__clock_get_time_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var cur_time: mach_timespec_t
}
struct __Reply__clock_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__clock_set_time_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__etap_trace_thread_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__exception_raise_state_identity_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var flavor: Int32
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Reply__exception_raise_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var flavor: Int32
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Reply__exception_raise_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__get_dp_control_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_create_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_default_memory_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_get_UNDServer_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_get_boot_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var boot_infoOffset: mach_msg_type_number_t
  var boot_infoCnt: mach_msg_type_number_t
  var boot_info: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct __Reply__host_get_clock_control_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_get_clock_service_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_get_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
}
struct __Reply__host_get_io_master_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_get_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info_outCnt: mach_msg_type_number_t
  var host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__host_kernel_version_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var kernel_versionOffset: mach_msg_type_number_t
  var kernel_versionCnt: mach_msg_type_number_t
  var kernel_version: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct __Reply__host_lockgroup_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var lockgroup_infoCnt: mach_msg_type_number_t
}
struct __Reply__host_priv_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info_outCnt: mach_msg_type_number_t
  var host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__host_processor_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var out_processor_count: natural_t
  var out_processor_infoCnt: mach_msg_type_number_t
}
struct __Reply__host_processor_set_priv_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_processor_sets_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var processor_setsCnt: mach_msg_type_number_t
}
struct __Reply__host_processors_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var out_processor_listCnt: mach_msg_type_number_t
}
struct __Reply__host_reboot_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__host_register_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var new_key: mach_voucher_attr_key_t
}
struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_request_notification_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__host_security_create_task_token_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__host_security_set_task_token_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__host_set_UNDServer_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__host_set_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__host_set_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__host_statistics64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info64_outCnt: mach_msg_type_number_t
  var host_info64_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__host_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var host_info_outCnt: mach_msg_type_number_t
  var host_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__host_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
}
struct __Reply__host_virtual_physical_table_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var infoCnt: mach_msg_type_number_t
}
struct __Reply__host_zone_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var infoCnt: mach_msg_type_number_t
}
struct __Reply__kext_request_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var response_dataCnt: mach_msg_type_number_t
  var log_dataCnt: mach_msg_type_number_t
  var op_result: kern_return_t
}
struct __Reply__kmod_control_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var dataCnt: mach_msg_type_number_t
}
struct __Reply__kmod_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var module: kmod_t
}
struct __Reply__kmod_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__kmod_get_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var modulesCnt: mach_msg_type_number_t
}
struct __Reply__lock_acquire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__lock_handoff_accept_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__lock_handoff_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__lock_make_stable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__lock_release_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__lock_set_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__lock_set_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__lock_try_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_make_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
}
struct __Reply__mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: vm_size_t
}
struct __Reply__mach_memory_object_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__mach_memory_object_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__mach_port_allocate_full_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
}
struct __Reply__mach_port_allocate_name_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_allocate_qos_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
}
struct __Reply__mach_port_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
}
struct __Reply__mach_port_construct_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var name: mach_port_name_t
}
struct __Reply__mach_port_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_destruct_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_dnrequest_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var dnr_total: UInt32
  var dnr_used: UInt32
}
struct __Reply__mach_port_extract_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_extract_right_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__mach_port_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var port_info_outCnt: mach_msg_type_number_t
  var port_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__mach_port_get_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var context: mach_port_context_t
}
struct __Reply__mach_port_get_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var refs: mach_port_urefs_t
}
struct __Reply__mach_port_get_set_status_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var membersCnt: mach_msg_type_number_t
}
struct __Reply__mach_port_get_srights_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var srights: mach_port_rights_t
}
struct __Reply__mach_port_guard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_insert_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_insert_right_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_kernel_object_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var object_type: UInt32
  var object_addr: UInt32
}
struct __Reply__mach_port_kobject_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var object_type: natural_t
  var object_addr: mach_vm_address_t
}
struct __Reply__mach_port_mod_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_move_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_names_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var typesCnt: mach_msg_type_number_t
}
struct __Reply__mach_port_peek_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var request_seqnop: mach_port_seqno_t
  var msg_sizep: mach_msg_size_t
  var msg_idp: mach_msg_id_t
  var trailer_infopCnt: mach_msg_type_number_t
  var trailer_infop: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct __Reply__mach_port_rename_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_request_notification_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__mach_port_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_set_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_set_mscount_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_set_seqno_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_port_space_basic_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var basic_info: ipc_info_space_basic_t
}
struct __Reply__mach_port_space_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var space_info: ipc_info_space_t
  var table_infoCnt: mach_msg_type_number_t
  var tree_infoCnt: mach_msg_type_number_t
}
struct __Reply__mach_port_type_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var ptype: mach_port_type_t
}
struct __Reply__mach_port_unguard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_ports_lookup_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var init_port_setCnt: mach_msg_type_number_t
}
struct __Reply__mach_ports_register_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: mach_vm_address_t
}
struct __Reply__mach_vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var value: vm_machine_attribute_val_t
}
struct __Reply__mach_vm_map_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: mach_vm_address_t
}
struct __Reply__mach_vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_page_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__mach_vm_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var disposition: integer_t
  var ref_count: integer_t
}
struct __Reply__mach_vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var state: Int32
}
struct __Reply__mach_vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var data_list: mach_vm_read_entry_t
}
struct __Reply__mach_vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var outsize: mach_vm_size_t
}
struct __Reply__mach_vm_read_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var dataCnt: mach_msg_type_number_t
}
struct __Reply__mach_vm_region_info_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var region: vm_info_region_64_t
  var objectsCnt: mach_msg_type_number_t
}
struct __Reply__mach_vm_region_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var region: vm_info_region_t
  var objectsCnt: mach_msg_type_number_t
}
struct __Reply__mach_vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__mach_vm_region_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__mach_vm_remap_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var target_address: mach_vm_address_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
}
struct __Reply__mach_vm_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_vm_write_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__mach_zone_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var infoCnt: mach_msg_type_number_t
}
struct __Reply__processor_assign_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_exit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_get_assignment_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__processor_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var processor_info_outCnt: mach_msg_type_number_t
  var processor_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__processor_set_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__processor_set_default_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__processor_set_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_set_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var info_outCnt: mach_msg_type_number_t
  var info_out: (integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__processor_set_max_priority_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_set_policy_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_set_policy_disable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_set_policy_enable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__processor_set_stack_usage_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var ltotal: UInt32
  var space: vm_size_t
  var resident: vm_size_t
  var maxusage: vm_size_t
  var maxstack: vm_offset_t
}
struct __Reply__processor_set_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var info_outCnt: mach_msg_type_number_t
  var info_out: (integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__processor_set_tasks_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var task_listCnt: mach_msg_type_number_t
}
struct __Reply__processor_set_threads_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var thread_listCnt: mach_msg_type_number_t
}
struct __Reply__processor_start_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__semaphore_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__semaphore_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__set_dp_control_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_assign_default_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_assign_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__task_get_assignment_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__task_get_emulation_vector_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var vector_start: Int32
  var emulation_vectorCnt: mach_msg_type_number_t
}
struct __Reply__task_get_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
}
struct __Reply__task_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__task_get_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__task_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Reply__task_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var task_info_outCnt: mach_msg_type_number_t
  var task_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__task_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  var get_default: boolean_t
}
struct __Reply__task_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_purgable_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var stats: task_purgable_info_t
}
struct __Reply__task_resume2_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_resume_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_sample_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_emulation_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_emulation_vector_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_phys_footprint_limit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_limit: Int32
}
struct __Reply__task_set_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_port_space_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_ras_pc_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_suspend2_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__task_suspend_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
}
struct __Reply__task_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__task_terminate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_threads_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var act_listCnt: mach_msg_type_number_t
}
struct __Reply__task_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__task_zone_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var namesCnt: mach_msg_type_number_t
  var infoCnt: mach_msg_type_number_t
}
struct __Reply__thread_abort_safely_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_abort_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_assign_default_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_assign_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_create_running_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__thread_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__thread_depress_abort_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_get_assignment_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__thread_get_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
}
struct __Reply__thread_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__thread_get_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__thread_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Reply__thread_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var thread_info_outCnt: mach_msg_type_number_t
  var thread_info_out: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Reply__thread_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
  var get_default: boolean_t
}
struct __Reply__thread_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_resume_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_sample_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_set_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_set_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_set_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_suspend_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var masksCnt: mach_msg_type_number_t
  var masks: (exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t, exception_mask_t)
  var old_behaviors: (exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t, exception_behavior_t)
  var old_flavors: (thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t, thread_state_flavor_t)
}
struct __Reply__thread_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Reply__thread_terminate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__thread_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_allocate_cpm_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
}
struct __Reply__vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
}
struct __Reply__vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var value: vm_machine_attribute_val_t
}
struct __Reply__vm_map_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
}
struct __Reply__vm_map_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var disposition: integer_t
  var ref_count: integer_t
}
struct __Reply__vm_map_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
}
struct __Reply__vm_mapped_pages_info_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var pagesCnt: mach_msg_type_number_t
}
struct __Reply__vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var state: Int32
}
struct __Reply__vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var data_list: vm_read_entry_t
}
struct __Reply__vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var outsize: vm_size_t
}
struct __Reply__vm_read_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var dataCnt: mach_msg_type_number_t
}
struct __Reply__vm_region_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__vm_region_recurse_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  var size: vm_size_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var address: vm_address_t
  var size: vm_size_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__vm_region_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var infoCnt: mach_msg_type_number_t
  var info: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
}
struct __Reply__vm_remap_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
  var target_address: vm_address_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
}
struct __Reply__vm_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Reply__vm_write_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
struct __Request___host_page_size_t {
  var Head: mach_msg_header_t
}
struct __Request___mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
  var offset: memory_object_offset_t
  var permission: vm_prot_t
}
struct __Request__act_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: Int32
  var old_stateCnt: mach_msg_type_number_t
}
struct __Request__act_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: Int32
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Request__clock_alarm_reply_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var alarm_code: kern_return_t
  var alarm_type: alarm_type_t
  var alarm_time: mach_timespec_t
}
struct __Request__clock_alarm_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var alarm_type: alarm_type_t
  var alarm_time: mach_timespec_t
}
struct __Request__clock_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: clock_flavor_t
  var clock_attrCnt: mach_msg_type_number_t
}
struct __Request__clock_get_time_t {
  var Head: mach_msg_header_t
}
struct __Request__clock_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: clock_flavor_t
  var clock_attrCnt: mach_msg_type_number_t
  var clock_attr: (Int32)
}
struct __Request__clock_set_time_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var new_time: mach_timespec_t
}
struct __Request__etap_trace_thread_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var trace_status: boolean_t
}
struct __Request__exception_raise_state_identity_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception: exception_type_t
  var codeCnt: mach_msg_type_number_t
  var code: (integer_t, integer_t)
  var flavor: Int32
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Request__exception_raise_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception: exception_type_t
  var codeCnt: mach_msg_type_number_t
  var code: (integer_t, integer_t)
  var flavor: Int32
  var old_stateCnt: mach_msg_type_number_t
  var old_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Request__exception_raise_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception: exception_type_t
  var codeCnt: mach_msg_type_number_t
  var code: (integer_t, integer_t)
}
struct __Request__get_dp_control_port_t {
  var Head: mach_msg_header_t
}
struct __Request__host_create_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var recipesCnt: mach_msg_type_number_t
  var recipes: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
}
struct __Request__host_default_memory_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var cluster_size: memory_object_cluster_size_t
}
struct __Request__host_get_UNDServer_t {
  var Head: mach_msg_header_t
}
struct __Request__host_get_boot_info_t {
  var Head: mach_msg_header_t
}
struct __Request__host_get_clock_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var clock_id: clock_id_t
}
struct __Request__host_get_clock_service_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var clock_id: clock_id_t
}
struct __Request__host_get_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
}
struct __Request__host_get_io_master_t {
  var Head: mach_msg_header_t
}
struct __Request__host_get_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var node: Int32
  var which: Int32
}
struct __Request__host_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info_outCnt: mach_msg_type_number_t
}
struct __Request__host_kernel_version_t {
  var Head: mach_msg_header_t
}
struct __Request__host_lockgroup_info_t {
  var Head: mach_msg_header_t
}
struct __Request__host_priv_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info_outCnt: mach_msg_type_number_t
}
struct __Request__host_processor_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_flavor_t
}
struct __Request__host_processor_set_priv_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__host_processor_sets_t {
  var Head: mach_msg_header_t
}
struct __Request__host_processors_t {
  var Head: mach_msg_header_t
}
struct __Request__host_reboot_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var options: Int32
}
struct __Request__host_register_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var default_value: mach_voucher_attr_value_handle_t
}
struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var default_value: mach_voucher_attr_value_handle_t
  var key: mach_voucher_attr_key_t
}
struct __Request__host_request_notification_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var notify_type: host_flavor_t
}
struct __Request__host_security_create_task_token_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var sec_token: security_token_t
  var audit_token: audit_token_t
  var ledgersCnt: mach_msg_type_number_t
  var inherit_memory: boolean_t
}
struct __Request__host_security_set_task_token_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var sec_token: security_token_t
  var audit_token: audit_token_t
}
struct __Request__host_set_UNDServer_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__host_set_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
}
struct __Request__host_set_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var which: Int32
}
struct __Request__host_statistics64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info64_outCnt: mach_msg_type_number_t
}
struct __Request__host_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: host_flavor_t
  var host_info_outCnt: mach_msg_type_number_t
}
struct __Request__host_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
}
struct __Request__host_virtual_physical_table_info_t {
  var Head: mach_msg_header_t
}
struct __Request__host_zone_info_t {
  var Head: mach_msg_header_t
}
struct __Request__kext_request_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var user_log_flags: UInt32
  var request_dataCnt: mach_msg_type_number_t
}
struct __Request__kmod_control_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var module: kmod_t
  var flavor: kmod_control_flavor_t
  var dataCnt: mach_msg_type_number_t
}
struct __Request__kmod_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var info: vm_address_t
}
struct __Request__kmod_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var module: kmod_t
}
struct __Request__kmod_get_info_t {
  var Head: mach_msg_header_t
}
struct __Request__lock_acquire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: Int32
}
struct __Request__lock_handoff_accept_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: Int32
}
struct __Request__lock_handoff_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: Int32
}
struct __Request__lock_make_stable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: Int32
}
struct __Request__lock_release_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: Int32
}
struct __Request__lock_set_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var n_ulocks: Int32
  var policy: Int32
}
struct __Request__lock_set_destroy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__lock_try_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var lock_id: Int32
}
struct __Request__mach_make_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: memory_object_size_t
  var offset: memory_object_offset_t
  var permission: vm_prot_t
}
struct __Request__mach_make_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var size: vm_size_t
  var offset: vm_offset_t
  var permission: vm_prot_t
}
struct __Request__mach_memory_object_memory_entry_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var `internal`: boolean_t
  var size: memory_object_size_t
  var permission: vm_prot_t
}
struct __Request__mach_memory_object_memory_entry_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var `internal`: boolean_t
  var size: vm_size_t
  var permission: vm_prot_t
}
struct __Request__mach_port_allocate_full_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
  var name: mach_port_name_t
}
struct __Request__mach_port_allocate_name_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
  var name: mach_port_name_t
}
struct __Request__mach_port_allocate_qos_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
}
struct __Request__mach_port_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var right: mach_port_right_t
}
struct __Request__mach_port_construct_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var context: mach_port_context_t
}
struct __Request__mach_port_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_destroy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_destruct_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var srdelta: mach_port_delta_t
  var guard: mach_port_context_t
}
struct __Request__mach_port_dnrequest_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_extract_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var pset: mach_port_name_t
}
struct __Request__mach_port_extract_right_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var msgt_name: mach_msg_type_name_t
}
struct __Request__mach_port_get_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var flavor: mach_port_flavor_t
  var port_info_outCnt: mach_msg_type_number_t
}
struct __Request__mach_port_get_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_get_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var right: mach_port_right_t
}
struct __Request__mach_port_get_set_status_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_get_srights_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_guard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var guard: mach_port_context_t
  var strict: boolean_t
}
struct __Request__mach_port_insert_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var pset: mach_port_name_t
}
struct __Request__mach_port_insert_right_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_kernel_object_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_kobject_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_mod_refs_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var right: mach_port_right_t
  var delta: mach_port_delta_t
}
struct __Request__mach_port_move_member_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var member: mach_port_name_t
  var after: mach_port_name_t
}
struct __Request__mach_port_names_t {
  var Head: mach_msg_header_t
}
struct __Request__mach_port_peek_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var trailer_type: mach_msg_trailer_type_t
  var request_seqnop: mach_port_seqno_t
  var trailer_infopCnt: mach_msg_type_number_t
}
struct __Request__mach_port_rename_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var old_name: mach_port_name_t
  var new_name: mach_port_name_t
}
struct __Request__mach_port_request_notification_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var msgid: mach_msg_id_t
  var sync: mach_port_mscount_t
}
struct __Request__mach_port_set_attributes_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var flavor: mach_port_flavor_t
  var port_infoCnt: mach_msg_type_number_t
  var port_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Request__mach_port_set_context_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var context: mach_port_context_t
}
struct __Request__mach_port_set_mscount_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var mscount: mach_port_mscount_t
}
struct __Request__mach_port_set_seqno_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var seqno: mach_port_seqno_t
}
struct __Request__mach_port_space_basic_info_t {
  var Head: mach_msg_header_t
}
struct __Request__mach_port_space_info_t {
  var Head: mach_msg_header_t
}
struct __Request__mach_port_type_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
}
struct __Request__mach_port_unguard_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var name: mach_port_name_t
  var guard: mach_port_context_t
}
struct __Request__mach_ports_lookup_t {
  var Head: mach_msg_header_t
}
struct __Request__mach_ports_register_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var init_port_setCnt: mach_msg_type_number_t
}
struct __Request__mach_vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var flags: Int32
}
struct __Request__mach_vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var new_behavior: vm_behavior_t
}
struct __Request__mach_vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var source_address: mach_vm_address_t
  var size: mach_vm_size_t
  var dest_address: mach_vm_address_t
}
struct __Request__mach_vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
}
struct __Request__mach_vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var new_inheritance: vm_inherit_t
}
struct __Request__mach_vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var attribute: vm_machine_attribute_t
  var value: vm_machine_attribute_val_t
}
struct __Request__mach_vm_map_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var mask: mach_vm_offset_t
  var flags: Int32
  var offset: memory_object_offset_t
  var copy: boolean_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
}
struct __Request__mach_vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var sync_flags: vm_sync_t
}
struct __Request__mach_vm_page_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var flavor: vm_page_info_flavor_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__mach_vm_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var offset: mach_vm_offset_t
}
struct __Request__mach_vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var set_maximum: boolean_t
  var new_protection: vm_prot_t
}
struct __Request__mach_vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var control: vm_purgable_t
  var state: Int32
}
struct __Request__mach_vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var data_list: mach_vm_read_entry_t
  var count: natural_t
}
struct __Request__mach_vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var data: mach_vm_address_t
}
struct __Request__mach_vm_read_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
}
struct __Request__mach_vm_region_info_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
}
struct __Request__mach_vm_region_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
}
struct __Request__mach_vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__mach_vm_region_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var flavor: vm_region_flavor_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__mach_vm_remap_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var target_address: mach_vm_address_t
  var size: mach_vm_size_t
  var mask: mach_vm_offset_t
  var flags: Int32
  var src_address: mach_vm_address_t
  var copy: boolean_t
  var inheritance: vm_inherit_t
}
struct __Request__mach_vm_wire_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var size: mach_vm_size_t
  var desired_access: vm_prot_t
}
struct __Request__mach_vm_write_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: mach_vm_address_t
  var dataCnt: mach_msg_type_number_t
}
struct __Request__mach_zone_info_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_assign_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var wait: boolean_t
}
struct __Request__processor_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var processor_cmdCnt: mach_msg_type_number_t
  var processor_cmd: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Request__processor_exit_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_get_assignment_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_flavor_t
  var processor_info_outCnt: mach_msg_type_number_t
}
struct __Request__processor_set_create_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_set_default_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_set_destroy_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_set_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: Int32
  var info_outCnt: mach_msg_type_number_t
}
struct __Request__processor_set_max_priority_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var max_priority: Int32
  var change_threads: boolean_t
}
struct __Request__processor_set_policy_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_set_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var change: boolean_t
}
struct __Request__processor_set_policy_disable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: Int32
  var change_threads: boolean_t
}
struct __Request__processor_set_policy_enable_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: Int32
}
struct __Request__processor_set_stack_usage_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_set_statistics_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: processor_set_flavor_t
  var info_outCnt: mach_msg_type_number_t
}
struct __Request__processor_set_tasks_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_set_threads_t {
  var Head: mach_msg_header_t
}
struct __Request__processor_start_t {
  var Head: mach_msg_header_t
}
struct __Request__semaphore_create_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: Int32
  var value: Int32
}
struct __Request__semaphore_destroy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__set_dp_control_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__task_assign_default_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var assign_threads: boolean_t
}
struct __Request__task_assign_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var assign_threads: boolean_t
}
struct __Request__task_create_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var ledgersCnt: mach_msg_type_number_t
  var inherit_memory: boolean_t
}
struct __Request__task_get_assignment_t {
  var Head: mach_msg_header_t
}
struct __Request__task_get_emulation_vector_t {
  var Head: mach_msg_header_t
}
struct __Request__task_get_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
}
struct __Request__task_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which: mach_voucher_selector_t
}
struct __Request__task_get_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which_port: Int32
}
struct __Request__task_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var old_stateCnt: mach_msg_type_number_t
}
struct __Request__task_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_flavor_t
  var task_info_outCnt: mach_msg_type_number_t
}
struct __Request__task_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var get_default: boolean_t
}
struct __Request__task_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Request__task_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var set_limit: boolean_t
  var change: boolean_t
}
struct __Request__task_purgable_info_t {
  var Head: mach_msg_header_t
}
struct __Request__task_resume2_t {
  var Head: mach_msg_header_t
}
struct __Request__task_resume_t {
  var Head: mach_msg_header_t
}
struct __Request__task_sample_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__task_set_emulation_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var routine_entry_pt: vm_address_t
  var routine_number: Int32
}
struct __Request__task_set_emulation_vector_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var vector_start: Int32
  var emulation_vectorCnt: mach_msg_type_number_t
}
struct __Request__task_set_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
}
struct __Request__task_set_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: task_flavor_t
  var task_info_inCnt: mach_msg_type_number_t
  var task_info_in: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Request__task_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__task_set_phys_footprint_limit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var new_limit: Int32
}
struct __Request__task_set_policy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var limitCnt: mach_msg_type_number_t
  var limit: (integer_t)
  var change: boolean_t
}
struct __Request__task_set_port_space_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var table_entries: Int32
}
struct __Request__task_set_ras_pc_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var basepc: vm_address_t
  var boundspc: vm_address_t
}
struct __Request__task_set_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var which_port: Int32
}
struct __Request__task_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Request__task_suspend2_t {
  var Head: mach_msg_header_t
}
struct __Request__task_suspend_t {
  var Head: mach_msg_header_t
}
struct __Request__task_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
}
struct __Request__task_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__task_terminate_t {
  var Head: mach_msg_header_t
}
struct __Request__task_threads_t {
  var Head: mach_msg_header_t
}
struct __Request__task_wire_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var must_wire: boolean_t
}
struct __Request__task_zone_info_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_abort_safely_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_abort_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_assign_default_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_assign_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__thread_create_running_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Request__thread_create_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_depress_abort_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_get_assignment_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_get_exception_ports_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
}
struct __Request__thread_get_mach_voucher_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which: mach_voucher_selector_t
}
struct __Request__thread_get_special_port_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var which_port: Int32
}
struct __Request__thread_get_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var old_stateCnt: mach_msg_type_number_t
}
struct __Request__thread_info_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_flavor_t
  var thread_info_outCnt: mach_msg_type_number_t
}
struct __Request__thread_policy_get_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var get_default: boolean_t
}
struct __Request__thread_policy_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_policy_flavor_t
  var policy_infoCnt: mach_msg_type_number_t
  var policy_info: (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
}
struct __Request__thread_policy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var set_limit: boolean_t
}
struct __Request__thread_resume_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_sample_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__thread_set_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
}
struct __Request__thread_set_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__thread_set_policy_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var policy: policy_t
  var baseCnt: mach_msg_type_number_t
  var base: (integer_t, integer_t, integer_t, integer_t, integer_t)
  var limitCnt: mach_msg_type_number_t
  var limit: (integer_t)
}
struct __Request__thread_set_special_port_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var which_port: Int32
}
struct __Request__thread_set_state_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var flavor: thread_state_flavor_t
  var new_stateCnt: mach_msg_type_number_t
  var new_state: (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
}
struct __Request__thread_suspend_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_swap_exception_ports_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var exception_mask: exception_mask_t
  var behavior: exception_behavior_t
  var new_flavor: thread_state_flavor_t
}
struct __Request__thread_swap_mach_voucher_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
}
struct __Request__thread_terminate_t {
  var Head: mach_msg_header_t
}
struct __Request__thread_wire_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var wired: boolean_t
}
struct __Request__vm_allocate_cpm_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var flags: Int32
}
struct __Request__vm_allocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var flags: Int32
}
struct __Request__vm_behavior_set_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var new_behavior: vm_behavior_t
}
struct __Request__vm_copy_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var source_address: vm_address_t
  var size: vm_size_t
  var dest_address: vm_address_t
}
struct __Request__vm_deallocate_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
}
struct __Request__vm_inherit_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var new_inheritance: vm_inherit_t
}
struct __Request__vm_machine_attribute_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var attribute: vm_machine_attribute_t
  var value: vm_machine_attribute_val_t
}
struct __Request__vm_map_64_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var mask: vm_address_t
  var flags: Int32
  var offset: memory_object_offset_t
  var copy: boolean_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
}
struct __Request__vm_map_page_query_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var offset: vm_offset_t
}
struct __Request__vm_map_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var mask: vm_address_t
  var flags: Int32
  var offset: vm_offset_t
  var copy: boolean_t
  var cur_protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
}
struct __Request__vm_mapped_pages_info_t {
  var Head: mach_msg_header_t
}
struct __Request__vm_msync_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var sync_flags: vm_sync_t
}
struct __Request__vm_protect_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var set_maximum: boolean_t
  var new_protection: vm_prot_t
}
struct __Request__vm_purgable_control_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var control: vm_purgable_t
  var state: Int32
}
struct __Request__vm_read_list_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var data_list: vm_read_entry_t
  var count: natural_t
}
struct __Request__vm_read_overwrite_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var data: vm_address_t
}
struct __Request__vm_read_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
}
struct __Request__vm_region_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var flavor: vm_region_flavor_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__vm_region_recurse_64_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__vm_region_recurse_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var nesting_depth: natural_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__vm_region_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var flavor: vm_region_flavor_t
  var infoCnt: mach_msg_type_number_t
}
struct __Request__vm_remap_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var target_address: vm_address_t
  var size: vm_size_t
  var mask: vm_address_t
  var flags: Int32
  var src_address: vm_address_t
  var copy: boolean_t
  var inheritance: vm_inherit_t
}
struct __Request__vm_wire_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var size: vm_size_t
  var desired_access: vm_prot_t
}
struct __Request__vm_write_t {
  var Head: mach_msg_header_t
  var msgh_body: mach_msg_body_t
  var NDR: NDR_record_t
  var address: vm_address_t
  var dataCnt: mach_msg_type_number_t
}
func ___runetype(_: __darwin_ct_rune_t) -> UInt
func ___tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func ___toupper(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func __builtin_bswap32(_: UInt32) -> UInt32
func __builtin_bswap64(_: UInt64) -> UInt64
func __builtin_constant_p() -> Int32
func __builtin_fabs(_: Double) -> Double
func __builtin_fabsf(_: Float) -> Float
func __builtin_inf() -> Double
func __builtin_inff() -> Float
@availability(OSX, introduced=10.9) func __cospi(_: Double) -> Double
@availability(OSX, introduced=10.9) func __cospif(_: Float) -> Float
typealias __darwin_blkcnt_t = __int64_t
typealias __darwin_blksize_t = __int32_t
typealias __darwin_clock_t = UInt
typealias __darwin_ct_rune_t = Int32
typealias __darwin_dev_t = __int32_t
func __darwin_fd_isset(_n: Int32, _p: UnsafePointer<fd_set>) -> Int32
typealias __darwin_fsblkcnt_t = UInt32
typealias __darwin_fsfilcnt_t = UInt32
typealias __darwin_gid_t = __uint32_t
struct __darwin_i386_avx_state {
  var __fpu_reserved: (Int32, Int32)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_rsrv4: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __fpu_reserved1: Int32
  var __avx_reserved1: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __fpu_ymmh0: __darwin_xmm_reg
  var __fpu_ymmh1: __darwin_xmm_reg
  var __fpu_ymmh2: __darwin_xmm_reg
  var __fpu_ymmh3: __darwin_xmm_reg
  var __fpu_ymmh4: __darwin_xmm_reg
  var __fpu_ymmh5: __darwin_xmm_reg
  var __fpu_ymmh6: __darwin_xmm_reg
  var __fpu_ymmh7: __darwin_xmm_reg
}
struct __darwin_i386_exception_state {
  var __trapno: __uint16_t
  var __cpu: __uint16_t
  var __err: __uint32_t
  var __faultvaddr: __uint32_t
}
struct __darwin_i386_float_state {
  var __fpu_reserved: (Int32, Int32)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_rsrv4: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __fpu_reserved1: Int32
}
struct __darwin_i386_thread_state {
  var __eax: UInt32
  var __ebx: UInt32
  var __ecx: UInt32
  var __edx: UInt32
  var __edi: UInt32
  var __esi: UInt32
  var __ebp: UInt32
  var __esp: UInt32
  var __ss: UInt32
  var __eflags: UInt32
  var __eip: UInt32
  var __cs: UInt32
  var __ds: UInt32
  var __es: UInt32
  var __fs: UInt32
  var __gs: UInt32
}
typealias __darwin_id_t = __uint32_t
typealias __darwin_ino64_t = __uint64_t
typealias __darwin_ino_t = __darwin_ino64_t
typealias __darwin_intptr_t = Int
typealias __darwin_mach_port_name_t = __darwin_natural_t
typealias __darwin_mach_port_t = __darwin_mach_port_name_t
struct __darwin_mcontext32 {
  var __es: __darwin_i386_exception_state
  var __ss: __darwin_i386_thread_state
  var __fs: __darwin_i386_float_state
}
struct __darwin_mcontext64 {
  var __es: __darwin_x86_exception_state64
  var __ss: __darwin_x86_thread_state64
  var __fs: __darwin_x86_float_state64
}
struct __darwin_mcontext_avx32 {
  var __es: __darwin_i386_exception_state
  var __ss: __darwin_i386_thread_state
  var __fs: __darwin_i386_avx_state
}
struct __darwin_mcontext_avx64 {
  var __es: __darwin_x86_exception_state64
  var __ss: __darwin_x86_thread_state64
  var __fs: __darwin_x86_avx_state64
}
struct __darwin_mmst_reg {
  var __mmst_reg: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __mmst_rsrv: (Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias __darwin_mode_t = __uint16_t
typealias __darwin_natural_t = UInt32
typealias __darwin_nl_item = Int32
typealias __darwin_off_t = __int64_t
typealias __darwin_pid_t = __int32_t
typealias __darwin_pthread_attr_t = _opaque_pthread_attr_t
typealias __darwin_pthread_cond_t = _opaque_pthread_cond_t
typealias __darwin_pthread_condattr_t = _opaque_pthread_condattr_t
struct __darwin_pthread_handler_rec {
  var __routine: CFunctionPointer<((UnsafeMutablePointer<Void>) -> Void)>
  var __arg: UnsafeMutablePointer<Void>
  var __next: UnsafeMutablePointer<__darwin_pthread_handler_rec>
}
typealias __darwin_pthread_key_t = UInt
typealias __darwin_pthread_mutex_t = _opaque_pthread_mutex_t
typealias __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t
typealias __darwin_pthread_once_t = _opaque_pthread_once_t
typealias __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t
typealias __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t
typealias __darwin_pthread_t = UnsafeMutablePointer<_opaque_pthread_t>
typealias __darwin_ptrdiff_t = Int
typealias __darwin_rune_t = __darwin_wchar_t
struct __darwin_sigaltstack {
  var ss_sp: UnsafeMutablePointer<Void>
  var ss_size: __darwin_size_t
  var ss_flags: Int32
}
typealias __darwin_sigset_t = __uint32_t
typealias __darwin_size_t = UInt
typealias __darwin_socklen_t = __uint32_t
typealias __darwin_ssize_t = Int
typealias __darwin_suseconds_t = __int32_t
typealias __darwin_time_t = Int
struct __darwin_ucontext {
  var uc_onstack: Int32
  var uc_sigmask: __darwin_sigset_t
  var uc_stack: __darwin_sigaltstack
  var uc_link: UnsafeMutablePointer<__darwin_ucontext>
  var uc_mcsize: __darwin_size_t
  var uc_mcontext: UnsafeMutablePointer<__darwin_mcontext64>
}
struct __darwin_ucontext64 {
  var uc_onstack: Int32
  var uc_sigmask: __darwin_sigset_t
  var uc_stack: __darwin_sigaltstack
  var uc_link: UnsafeMutablePointer<__darwin_ucontext64>
  var uc_mcsize: __darwin_size_t
  var uc_mcontext64: UnsafeMutablePointer<__darwin_mcontext64>
}
typealias __darwin_uid_t = __uint32_t
typealias __darwin_useconds_t = __uint32_t
typealias __darwin_uuid_string_t = (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
typealias __darwin_uuid_t = (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
typealias __darwin_va_list = __builtin_va_list
typealias __darwin_wchar_t = Int32
typealias __darwin_wctrans_t = Int32
typealias __darwin_wctype_t = __uint32_t
typealias __darwin_wint_t = Int32
struct __darwin_x86_avx_state64 {
  var __fpu_reserved: (Int32, Int32)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_xmm8: __darwin_xmm_reg
  var __fpu_xmm9: __darwin_xmm_reg
  var __fpu_xmm10: __darwin_xmm_reg
  var __fpu_xmm11: __darwin_xmm_reg
  var __fpu_xmm12: __darwin_xmm_reg
  var __fpu_xmm13: __darwin_xmm_reg
  var __fpu_xmm14: __darwin_xmm_reg
  var __fpu_xmm15: __darwin_xmm_reg
  var __fpu_rsrv4: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __fpu_reserved1: Int32
  var __avx_reserved1: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __fpu_ymmh0: __darwin_xmm_reg
  var __fpu_ymmh1: __darwin_xmm_reg
  var __fpu_ymmh2: __darwin_xmm_reg
  var __fpu_ymmh3: __darwin_xmm_reg
  var __fpu_ymmh4: __darwin_xmm_reg
  var __fpu_ymmh5: __darwin_xmm_reg
  var __fpu_ymmh6: __darwin_xmm_reg
  var __fpu_ymmh7: __darwin_xmm_reg
  var __fpu_ymmh8: __darwin_xmm_reg
  var __fpu_ymmh9: __darwin_xmm_reg
  var __fpu_ymmh10: __darwin_xmm_reg
  var __fpu_ymmh11: __darwin_xmm_reg
  var __fpu_ymmh12: __darwin_xmm_reg
  var __fpu_ymmh13: __darwin_xmm_reg
  var __fpu_ymmh14: __darwin_xmm_reg
  var __fpu_ymmh15: __darwin_xmm_reg
}
struct __darwin_x86_debug_state32 {
  var __dr0: UInt32
  var __dr1: UInt32
  var __dr2: UInt32
  var __dr3: UInt32
  var __dr4: UInt32
  var __dr5: UInt32
  var __dr6: UInt32
  var __dr7: UInt32
}
struct __darwin_x86_debug_state64 {
  var __dr0: __uint64_t
  var __dr1: __uint64_t
  var __dr2: __uint64_t
  var __dr3: __uint64_t
  var __dr4: __uint64_t
  var __dr5: __uint64_t
  var __dr6: __uint64_t
  var __dr7: __uint64_t
}
struct __darwin_x86_exception_state64 {
  var __trapno: __uint16_t
  var __cpu: __uint16_t
  var __err: __uint32_t
  var __faultvaddr: __uint64_t
}
struct __darwin_x86_float_state64 {
  var __fpu_reserved: (Int32, Int32)
  var __fpu_ftw: __uint8_t
  var __fpu_rsrv1: __uint8_t
  var __fpu_fop: __uint16_t
  var __fpu_ip: __uint32_t
  var __fpu_cs: __uint16_t
  var __fpu_rsrv2: __uint16_t
  var __fpu_dp: __uint32_t
  var __fpu_ds: __uint16_t
  var __fpu_rsrv3: __uint16_t
  var __fpu_mxcsr: __uint32_t
  var __fpu_mxcsrmask: __uint32_t
  var __fpu_stmm0: __darwin_mmst_reg
  var __fpu_stmm1: __darwin_mmst_reg
  var __fpu_stmm2: __darwin_mmst_reg
  var __fpu_stmm3: __darwin_mmst_reg
  var __fpu_stmm4: __darwin_mmst_reg
  var __fpu_stmm5: __darwin_mmst_reg
  var __fpu_stmm6: __darwin_mmst_reg
  var __fpu_stmm7: __darwin_mmst_reg
  var __fpu_xmm0: __darwin_xmm_reg
  var __fpu_xmm1: __darwin_xmm_reg
  var __fpu_xmm2: __darwin_xmm_reg
  var __fpu_xmm3: __darwin_xmm_reg
  var __fpu_xmm4: __darwin_xmm_reg
  var __fpu_xmm5: __darwin_xmm_reg
  var __fpu_xmm6: __darwin_xmm_reg
  var __fpu_xmm7: __darwin_xmm_reg
  var __fpu_xmm8: __darwin_xmm_reg
  var __fpu_xmm9: __darwin_xmm_reg
  var __fpu_xmm10: __darwin_xmm_reg
  var __fpu_xmm11: __darwin_xmm_reg
  var __fpu_xmm12: __darwin_xmm_reg
  var __fpu_xmm13: __darwin_xmm_reg
  var __fpu_xmm14: __darwin_xmm_reg
  var __fpu_xmm15: __darwin_xmm_reg
  var __fpu_rsrv4: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var __fpu_reserved1: Int32
}
struct __darwin_x86_thread_state64 {
  var __rax: __uint64_t
  var __rbx: __uint64_t
  var __rcx: __uint64_t
  var __rdx: __uint64_t
  var __rdi: __uint64_t
  var __rsi: __uint64_t
  var __rbp: __uint64_t
  var __rsp: __uint64_t
  var __r8: __uint64_t
  var __r9: __uint64_t
  var __r10: __uint64_t
  var __r11: __uint64_t
  var __r12: __uint64_t
  var __r13: __uint64_t
  var __r14: __uint64_t
  var __r15: __uint64_t
  var __rip: __uint64_t
  var __rflags: __uint64_t
  var __cs: __uint64_t
  var __fs: __uint64_t
  var __gs: __uint64_t
}
struct __darwin_xmm_reg {
  var __xmm_reg: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct __double2 {
  var __sinval: Double
  var __cosval: Double
}
func __error() -> UnsafeMutablePointer<Int32>
@availability(OSX, introduced=10.9) func __exp10(_: Double) -> Double
@availability(OSX, introduced=10.9) func __exp10f(_: Float) -> Float
struct __float2 {
  var __sinval: Float
  var __cosval: Float
}
func __fpclassifyd(_: Double) -> Int32
func __fpclassifyf(_: Float) -> Int32
typealias __gnuc_va_list = __builtin_va_list
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func __inf() -> Double
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func __inff() -> Float
func __inline_isfinited(__x: Double) -> Int32
func __inline_isfinitef(__x: Float) -> Int32
func __inline_isinfd(__x: Double) -> Int32
func __inline_isinff(__x: Float) -> Int32
func __inline_isnand(__x: Double) -> Int32
func __inline_isnanf(__x: Float) -> Int32
func __inline_isnormald(__x: Double) -> Int32
func __inline_isnormalf(__x: Float) -> Int32
func __inline_signbitd(__x: Double) -> Int32
func __inline_signbitf(__x: Float) -> Int32
typealias __int16_t = Int16
typealias __int32_t = Int32
typealias __int64_t = Int64
typealias __int8_t = Int8
func __isctype(_c: __darwin_ct_rune_t, _f: UInt) -> __darwin_ct_rune_t
func __istype(_c: __darwin_ct_rune_t, _f: UInt) -> Int32
func __maskrune(_: __darwin_ct_rune_t, _: UInt) -> Int32
func __math_errhandling() -> Int32
var __mb_cur_max: Int32
struct __msfilterreq {
  var msfr_ifindex: UInt32
  var msfr_fmode: UInt32
  var msfr_nsrcs: UInt32
  var __msfr_align: UInt32
  var msfr_group: sockaddr_storage
  var msfr_srcs: UnsafeMutablePointer<sockaddr_storage>
}
struct __msqid_ds_new {
  var msg_perm: ipc_perm
  var msg_first: __int32_t
  var msg_last: __int32_t
  var msg_cbytes: msglen_t
  var msg_qnum: msgqnum_t
  var msg_qbytes: msglen_t
  var msg_lspid: pid_t
  var msg_lrpid: pid_t
  var msg_stime: time_t
  var msg_pad1: __int32_t
  var msg_rtime: time_t
  var msg_pad2: __int32_t
  var msg_ctime: time_t
  var msg_pad3: __int32_t
  var msg_pad4: (__int32_t, __int32_t, __int32_t, __int32_t)
}
@availability(OSX, introduced=10.0) func __nan() -> Float
struct __nl_cat_d {
  var __data: UnsafeMutablePointer<Void>
  var __size: Int32
}
func __opendir2(_: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<DIR>
struct __sFILE {
  var _p: UnsafeMutablePointer<UInt8>
  var _r: Int32
  var _w: Int32
  var _flags: Int16
  var _file: Int16
  var _bf: __sbuf
  var _lbfsize: Int32
  var _cookie: UnsafeMutablePointer<Void>
  var _close: CFunctionPointer<((UnsafeMutablePointer<Void>) -> Int32)>
  var _read: CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafeMutablePointer<Int8>, Int32) -> Int32)>
  var _seek: CFunctionPointer<((UnsafeMutablePointer<Void>, fpos_t, Int32) -> fpos_t)>
  var _write: CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafePointer<Int8>, Int32) -> Int32)>
  var _ub: __sbuf
  var _extra: COpaquePointer
  var _ur: Int32
  var _ubuf: (UInt8, UInt8, UInt8)
  var _nbuf: (UInt8)
  var _lb: __sbuf
  var _blksize: Int32
  var _offset: fpos_t
}
struct __sbuf {
  var _base: UnsafeMutablePointer<UInt8>
  var _size: Int32
}
struct __semid_ds_new {
  var sem_perm: ipc_perm
  var sem_base: __int32_t
  var sem_nsems: UInt16
  var sem_otime: time_t
  var sem_pad1: __int32_t
  var sem_ctime: time_t
  var sem_pad2: __int32_t
  var sem_pad3: (__int32_t, __int32_t, __int32_t, __int32_t)
}
struct __shmid_ds_new {
  var shm_perm: ipc_perm
  var shm_segsz: UInt
  var shm_lpid: pid_t
  var shm_cpid: pid_t
  var shm_nattch: shmatt_t
  var shm_atime: time_t
  var shm_dtime: time_t
  var shm_ctime: time_t
  var shm_internal: UnsafeMutablePointer<Void>
}
struct __sigaction {
  var sa_tramp: CFunctionPointer<((UnsafeMutablePointer<Void>, Int32, Int32, UnsafeMutablePointer<siginfo_t>, UnsafeMutablePointer<Void>) -> Void)>
  var sa_mask: sigset_t
  var sa_flags: Int32
}
func __sigbits(__signo: Int32) -> Int32
struct __siginfo {
  var si_signo: Int32
  var si_errno: Int32
  var si_code: Int32
  var si_pid: pid_t
  var si_uid: uid_t
  var si_status: Int32
  var si_addr: UnsafeMutablePointer<Void>
  var si_band: Int
  var __pad: (UInt, UInt, UInt, UInt, UInt, UInt, UInt)
}
@availability(OSX, introduced=10.9) func __sincos(__x: Double, __sinp: UnsafeMutablePointer<Double>, __cosp: UnsafeMutablePointer<Double>)
func __sincos_stret(_: Double) -> __double2
@availability(OSX, introduced=10.9) func __sincosf(__x: Float, __sinp: UnsafeMutablePointer<Float>, __cosp: UnsafeMutablePointer<Float>)
func __sincosf_stret(_: Float) -> __float2
@availability(OSX, introduced=10.9) func __sincospi(__x: Double, __sinp: UnsafeMutablePointer<Double>, __cosp: UnsafeMutablePointer<Double>)
func __sincospi_stret(_: Double) -> __double2
@availability(OSX, introduced=10.9) func __sincospif(__x: Float, __sinp: UnsafeMutablePointer<Float>, __cosp: UnsafeMutablePointer<Float>)
func __sincospif_stret(_: Float) -> __float2
@availability(OSX, introduced=10.9) func __sinpi(_: Double) -> Double
@availability(OSX, introduced=10.9) func __sinpif(_: Float) -> Float
func __sputc(_c: Int32, _p: UnsafeMutablePointer<FILE>) -> Int32
func __srget(_: UnsafeMutablePointer<FILE>) -> Int32
var __stderrp: UnsafeMutablePointer<FILE>
var __stdinp: UnsafeMutablePointer<FILE>
var __stdoutp: UnsafeMutablePointer<FILE>
func __svfscanf(_: UnsafeMutablePointer<FILE>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func __swbuf(_: Int32, _: UnsafeMutablePointer<FILE>) -> Int32
@availability(OSX, introduced=10.9) func __tanpi(_: Double) -> Double
@availability(OSX, introduced=10.9) func __tanpif(_: Float) -> Float
func __tg_acos(__x: Double) -> Double
func __tg_acos(__x: Float) -> Float
func __tg_acosh(__x: Float) -> Float
func __tg_acosh(__x: Double) -> Double
func __tg_asin(__x: Float) -> Float
func __tg_asin(__x: Double) -> Double
func __tg_asinh(__x: Float) -> Float
func __tg_asinh(__x: Double) -> Double
func __tg_atan(__x: Float) -> Float
func __tg_atan(__x: Double) -> Double
func __tg_atan2(__x: Double, __y: Double) -> Double
func __tg_atan2(__x: Float, __y: Float) -> Float
func __tg_atanh(__x: Float) -> Float
func __tg_atanh(__x: Double) -> Double
func __tg_carg(__x: Double) -> Double
func __tg_carg(__x: Float) -> Float
func __tg_cbrt(__x: Float) -> Float
func __tg_cbrt(__x: Double) -> Double
func __tg_ceil(__x: Double) -> Double
func __tg_ceil(__x: Float) -> Float
func __tg_cimag(__x: Double) -> Double
func __tg_cimag(__x: Float) -> Float
func __tg_copysign(__x: Double, __y: Double) -> Double
func __tg_copysign(__x: Float, __y: Float) -> Float
func __tg_cos(__x: Float) -> Float
func __tg_cos(__x: Double) -> Double
func __tg_cosh(__x: Float) -> Float
func __tg_cosh(__x: Double) -> Double
func __tg_creal(__x: Float) -> Float
func __tg_creal(__x: Double) -> Double
func __tg_erf(__x: Double) -> Double
func __tg_erf(__x: Float) -> Float
func __tg_erfc(__x: Double) -> Double
func __tg_erfc(__x: Float) -> Float
func __tg_exp(__x: Float) -> Float
func __tg_exp(__x: Double) -> Double
func __tg_exp2(__x: Double) -> Double
func __tg_exp2(__x: Float) -> Float
func __tg_expm1(__x: Float) -> Float
func __tg_expm1(__x: Double) -> Double
func __tg_fabs(__x: Double) -> Double
func __tg_fabs(__x: Float) -> Float
func __tg_fdim(__x: Float, __y: Float) -> Float
func __tg_fdim(__x: Double, __y: Double) -> Double
func __tg_floor(__x: Double) -> Double
func __tg_floor(__x: Float) -> Float
func __tg_fma(__x: Float, __y: Float, __z: Float) -> Float
func __tg_fma(__x: Double, __y: Double, __z: Double) -> Double
func __tg_fmax(__x: Double, __y: Double) -> Double
func __tg_fmax(__x: Float, __y: Float) -> Float
func __tg_fmin(__x: Float, __y: Float) -> Float
func __tg_fmin(__x: Double, __y: Double) -> Double
func __tg_fmod(__x: Double, __y: Double) -> Double
func __tg_fmod(__x: Float, __y: Float) -> Float
func __tg_frexp(__x: Float, __y: UnsafeMutablePointer<Int32>) -> Float
func __tg_frexp(__x: Double, __y: UnsafeMutablePointer<Int32>) -> Double
func __tg_hypot(__x: Double, __y: Double) -> Double
func __tg_hypot(__x: Float, __y: Float) -> Float
func __tg_ilogb(__x: Double) -> Int32
func __tg_ilogb(__x: Float) -> Int32
func __tg_ldexp(__x: Float, __y: Int32) -> Float
func __tg_ldexp(__x: Double, __y: Int32) -> Double
func __tg_lgamma(__x: Float) -> Float
func __tg_lgamma(__x: Double) -> Double
func __tg_llrint(__x: Float) -> Int64
func __tg_llrint(__x: Double) -> Int64
func __tg_llround(__x: Double) -> Int64
func __tg_llround(__x: Float) -> Int64
func __tg_log(__x: Double) -> Double
func __tg_log(__x: Float) -> Float
func __tg_log10(__x: Double) -> Double
func __tg_log10(__x: Float) -> Float
func __tg_log1p(__x: Double) -> Double
func __tg_log1p(__x: Float) -> Float
func __tg_log2(__x: Float) -> Float
func __tg_log2(__x: Double) -> Double
func __tg_logb(__x: Double) -> Double
func __tg_logb(__x: Float) -> Float
func __tg_lrint(__x: Double) -> Int
func __tg_lrint(__x: Float) -> Int
func __tg_lround(__x: Double) -> Int
func __tg_lround(__x: Float) -> Int
func __tg_nearbyint(__x: Float) -> Float
func __tg_nearbyint(__x: Double) -> Double
func __tg_nextafter(__x: Double, __y: Double) -> Double
func __tg_nextafter(__x: Float, __y: Float) -> Float
func __tg_pow(__x: Double, __y: Double) -> Double
func __tg_pow(__x: Float, __y: Float) -> Float
func __tg_promote(_: Float) -> Float
func __tg_promote(_: UInt64) -> Double
func __tg_promote(_: Int64) -> Double
func __tg_promote(_: UInt) -> Double
func __tg_promote(_: Int) -> Double
func __tg_promote(_: UInt32) -> Double
func __tg_promote(_: Int32) -> Double
func __tg_promote(_: Double) -> Double
func __tg_remainder(__x: Double, __y: Double) -> Double
func __tg_remainder(__x: Float, __y: Float) -> Float
func __tg_remquo(__x: Float, __y: Float, __z: UnsafeMutablePointer<Int32>) -> Float
func __tg_remquo(__x: Double, __y: Double, __z: UnsafeMutablePointer<Int32>) -> Double
func __tg_rint(__x: Float) -> Float
func __tg_rint(__x: Double) -> Double
func __tg_round(__x: Double) -> Double
func __tg_round(__x: Float) -> Float
func __tg_scalbln(__x: Double, __y: Int) -> Double
func __tg_scalbln(__x: Float, __y: Int) -> Float
func __tg_scalbn(__x: Double, __y: Int32) -> Double
func __tg_scalbn(__x: Float, __y: Int32) -> Float
func __tg_sin(__x: Double) -> Double
func __tg_sin(__x: Float) -> Float
func __tg_sinh(__x: Float) -> Float
func __tg_sinh(__x: Double) -> Double
func __tg_sqrt(__x: Double) -> Double
func __tg_sqrt(__x: Float) -> Float
func __tg_tan(__x: Float) -> Float
func __tg_tan(__x: Double) -> Double
func __tg_tanh(__x: Double) -> Double
func __tg_tanh(__x: Float) -> Float
func __tg_tgamma(__x: Double) -> Double
func __tg_tgamma(__x: Float) -> Float
func __tg_trunc(__x: Float) -> Float
func __tg_trunc(__x: Double) -> Double
func __tolower(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
func __toupper(_: __darwin_ct_rune_t) -> __darwin_ct_rune_t
typealias __uint16_t = UInt16
typealias __uint32_t = UInt32
typealias __uint64_t = UInt64
typealias __uint8_t = UInt8
func __vsnprintf_chk(_: UnsafeMutablePointer<Int8>, _: UInt, _: Int32, _: UInt, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func __vsprintf_chk(_: UnsafeMutablePointer<Int8>, _: Int32, _: UInt, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func __wcwidth(_c: __darwin_ct_rune_t) -> Int32
@noreturn func _exit(_: Int32)
var _gmonparam: gmonparam
func _host_page_size(host: host_t, out_page_size: UnsafeMutablePointer<vm_size_t>) -> kern_return_t
func _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t, right: mach_port_right_t, name: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
func _kernelrpc_mach_port_construct_trap(target: mach_port_name_t, options: UnsafeMutablePointer<mach_port_options_t>, context: UInt64, name: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
func _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t, name: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_destroy_trap(target: mach_port_name_t, name: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: UInt64) -> kern_return_t
func _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_guard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: UInt64, strict: boolean_t) -> kern_return_t
func _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t, name: mach_port_name_t, poly: mach_port_name_t, polyPoly: mach_msg_type_name_t) -> kern_return_t
func _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) -> kern_return_t
func _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t, member: mach_port_name_t, after: mach_port_name_t) -> kern_return_t
func _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: UInt64) -> kern_return_t
func _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t, addr: UnsafeMutablePointer<mach_vm_offset_t>, size: mach_vm_size_t, flags: Int32) -> kern_return_t
func _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t) -> kern_return_t
func _kernelrpc_mach_vm_map_trap(target: mach_port_name_t, address: UnsafeMutablePointer<mach_vm_offset_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: Int32, cur_protection: vm_prot_t) -> kern_return_t
func _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
var _libiconv_version: Int32
@noreturn func _longjmp(_: UnsafeMutablePointer<Int32>, _: Int32)
func _mach_make_memory_entry(target_task: vm_map_t, size: UnsafeMutablePointer<memory_object_size_t>, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: UnsafeMutablePointer<mem_entry_name_port_t>, parent_handle: mem_entry_name_port_t) -> kern_return_t
struct _malloc_zone_t {
  var reserved1: UnsafeMutablePointer<Void>
  var reserved2: UnsafeMutablePointer<Void>
  var size: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UnsafePointer<Void>) -> UInt)>
  var malloc: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UInt) -> UnsafeMutablePointer<Void>)>
  var calloc: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UInt, UInt) -> UnsafeMutablePointer<Void>)>
  var valloc: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UInt) -> UnsafeMutablePointer<Void>)>
  var free: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UnsafeMutablePointer<Void>) -> Void)>
  var realloc: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UnsafeMutablePointer<Void>, UInt) -> UnsafeMutablePointer<Void>)>
  var destroy: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>) -> Void)>
  var zone_name: UnsafePointer<Int8>
  var batch_malloc: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UInt, UnsafeMutablePointer<UnsafeMutablePointer<Void>>, UInt32) -> UInt32)>
  var batch_free: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UnsafeMutablePointer<UnsafeMutablePointer<Void>>, UInt32) -> Void)>
  var introspect: UnsafeMutablePointer<malloc_introspection_t>
  var version: UInt32
  var memalign: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UInt, UInt) -> UnsafeMutablePointer<Void>)>
  var free_definite_size: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UnsafeMutablePointer<Void>, UInt) -> Void)>
  var pressure_relief: CFunctionPointer<((UnsafeMutablePointer<_malloc_zone_t>, UInt) -> UInt)>
}
struct _opaque_pthread_attr_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_cond_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_condattr_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_mutex_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_mutexattr_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_once_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_rwlock_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_rwlockattr_t {
  var __sig: Int
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _opaque_pthread_t {
  var __sig: Int
  var __cleanup_stack: UnsafeMutablePointer<__darwin_pthread_handler_rec>
  var __opaque: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct _pcred {
  var pc_lock: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var pc_ucred: UnsafeMutablePointer<ucred>
  var p_ruid: uid_t
  var p_svuid: uid_t
  var p_rgid: gid_t
  var p_svgid: gid_t
  var p_refcnt: Int32
}
func _setjmp(_: UnsafeMutablePointer<Int32>) -> Int32
struct _ucred {
  var cr_ref: Int32
  var cr_uid: uid_t
  var cr_ngroups: Int16
  var cr_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t)
}
struct _unpcb_list_entry {
  var le_next: UInt32
  var le_prev: UInt32
}
func a64l(_: UnsafePointer<Int8>) -> Int
@noreturn func abort()
func abs(_: Int32) -> Int32
func accept(_: Int32, _: UnsafeMutablePointer<sockaddr>, _: UnsafeMutablePointer<socklen_t>) -> Int32
func access(_: UnsafePointer<Int8>, _: Int32) -> Int32
struct accessx_descriptor {
  var ad_name_offset: UInt32
  var ad_flags: Int32
  var ad_pad: (Int32, Int32)
}
func accessx_np(_: UnsafePointer<accessx_descriptor>, _: UInt, _: UnsafeMutablePointer<Int32>, _: uid_t) -> Int32
struct acct {
  var ac_comm: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ac_utime: comp_t
  var ac_stime: comp_t
  var ac_etime: comp_t
  var ac_btime: UInt32
  var ac_uid: uid_t
  var ac_gid: gid_t
  var ac_mem: UInt16
  var ac_io: comp_t
  var ac_tty: dev_t
  var ac_flag: UInt8
}
func acct(_: UnsafePointer<Int8>) -> Int32
func acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> Int32
func acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> Int32
func acl_calc_mask(acl_p: UnsafeMutablePointer<acl_t>) -> Int32
func acl_clear_flags_np(flagset_d: acl_flagset_t) -> Int32
func acl_clear_perms(permset_d: acl_permset_t) -> Int32
func acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> Int32
func acl_copy_ext(buf_p: UnsafeMutablePointer<Void>, acl: acl_t, size: Int) -> Int
func acl_copy_ext_native(buf_p: UnsafeMutablePointer<Void>, acl: acl_t, size: Int) -> Int
func acl_copy_int(buf_p: UnsafePointer<Void>) -> acl_t
func acl_copy_int_native(buf_p: UnsafePointer<Void>) -> acl_t
func acl_create_entry(acl_p: UnsafeMutablePointer<acl_t>, entry_p: UnsafeMutablePointer<acl_entry_t>) -> Int32
func acl_create_entry_np(acl_p: UnsafeMutablePointer<acl_t>, entry_p: UnsafeMutablePointer<acl_entry_t>, entry_index: Int32) -> Int32
func acl_delete_def_file(path_p: UnsafePointer<Int8>) -> Int32
func acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> Int32
func acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> Int32
func acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> Int32
func acl_dup(acl: acl_t) -> acl_t
struct acl_entry_id_t {
  init(_ value: Int32) {

  }
  var value: Int32
}
typealias acl_entry_t = COpaquePointer
struct acl_flag_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias acl_flagset_t = COpaquePointer
func acl_free(obj_p: UnsafeMutablePointer<Void>) -> Int32
func acl_from_text(buf_p: UnsafePointer<Int8>) -> acl_t
func acl_get_entry(acl: acl_t, entry_id: Int32, entry_p: UnsafeMutablePointer<acl_entry_t>) -> Int32
func acl_get_fd(fd: Int32) -> acl_t
func acl_get_fd_np(fd: Int32, type: acl_type_t) -> acl_t
func acl_get_file(path_p: UnsafePointer<Int8>, type: acl_type_t) -> acl_t
func acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> Int32
func acl_get_flagset_np(obj_p: UnsafeMutablePointer<Void>, flagset_p: UnsafeMutablePointer<acl_flagset_t>) -> Int32
func acl_get_link_np(path_p: UnsafePointer<Int8>, type: acl_type_t) -> acl_t
func acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> Int32
func acl_get_permset(entry_d: acl_entry_t, permset_p: UnsafeMutablePointer<acl_permset_t>) -> Int32
@availability(OSX, introduced=10.7) func acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: UnsafeMutablePointer<acl_permset_mask_t>) -> Int32
func acl_get_qualifier(entry_d: acl_entry_t) -> UnsafeMutablePointer<Void>
func acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: UnsafeMutablePointer<acl_tag_t>) -> Int32
func acl_init(count: Int32) -> acl_t
@availability(OSX, introduced=10.7) func acl_maximal_permset_mask_np(mask_p: UnsafeMutablePointer<acl_permset_mask_t>) -> Int32
struct acl_perm_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias acl_permset_mask_t = UInt64
typealias acl_permset_t = COpaquePointer
func acl_set_fd(fd: Int32, acl: acl_t) -> Int32
func acl_set_fd_np(fd: Int32, acl: acl_t, acl_type: acl_type_t) -> Int32
func acl_set_file(path_p: UnsafePointer<Int8>, type: acl_type_t, acl: acl_t) -> Int32
func acl_set_flagset_np(obj_p: UnsafeMutablePointer<Void>, flagset_d: acl_flagset_t) -> Int32
func acl_set_link_np(path_p: UnsafePointer<Int8>, type: acl_type_t, acl: acl_t) -> Int32
func acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) -> Int32
@availability(OSX, introduced=10.7) func acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) -> Int32
func acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: UnsafePointer<Void>) -> Int32
func acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> Int32
func acl_size(acl: acl_t) -> Int
typealias acl_t = COpaquePointer
struct acl_tag_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
func acl_to_text(acl: acl_t, len_p: UnsafeMutablePointer<Int>) -> UnsafeMutablePointer<Int8>
struct acl_type_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
func acl_valid(acl: acl_t) -> Int32
func acl_valid_fd_np(fd: Int32, type: acl_type_t, acl: acl_t) -> Int32
func acl_valid_file_np(path: UnsafePointer<Int8>, type: acl_type_t, acl: acl_t) -> Int32
func acl_valid_link_np(path: UnsafePointer<Int8>, type: acl_type_t, acl: acl_t) -> Int32
func acos(_: Double) -> Double
func acosf(_: Float) -> Float
func acosh(_: Double) -> Double
func acoshf(_: Float) -> Float
func act_get_state(target_act: thread_act_t, flavor: Int32, old_state: thread_state_t, old_stateCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func act_set_state(target_act: thread_act_t, flavor: Int32, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
func add_profil(_: UnsafeMutablePointer<Int8>, _: UInt, _: UInt, _: UInt32) -> Int32
func addr2ascii(_: Int32, _: UnsafePointer<Void>, _: Int32, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
typealias addr64_t = UInt64
struct addrinfo {
  var ai_flags: Int32
  var ai_family: Int32
  var ai_socktype: Int32
  var ai_protocol: Int32
  var ai_addrlen: socklen_t
  var ai_canonname: UnsafeMutablePointer<Int8>
  var ai_addr: UnsafeMutablePointer<sockaddr>
  var ai_next: UnsafeMutablePointer<addrinfo>
}
func addrsel_policy_init()
func adjtime(_: UnsafePointer<timeval>, _: UnsafeMutablePointer<timeval>) -> Int32
func aio_cancel(fd: Int32, aiocbp: UnsafeMutablePointer<aiocb>) -> Int32
func aio_error(aiocbp: UnsafePointer<aiocb>) -> Int32
func aio_fsync(op: Int32, aiocbp: UnsafeMutablePointer<aiocb>) -> Int32
func aio_read(aiocbp: UnsafeMutablePointer<aiocb>) -> Int32
func aio_return(aiocbp: UnsafeMutablePointer<aiocb>) -> Int
func aio_suspend(aiocblist: UnsafePointer<UnsafePointer<aiocb>>, nent: Int32, timeoutp: UnsafePointer<timespec>) -> Int32
func aio_write(aiocbp: UnsafeMutablePointer<aiocb>) -> Int32
struct aiocb {
  var aio_fildes: Int32
  var aio_offset: off_t
  var aio_buf: UnsafeMutablePointer<Void>
  var aio_nbytes: UInt
  var aio_reqprio: Int32
  var aio_sigevent: sigevent
  var aio_lio_opcode: Int32
}
func alarm(_: UInt32) -> UInt32
typealias alarm_port_t = alarm_t
typealias alarm_t = mach_port_t
typealias alarm_type_t = Int32
func alloca(_: UInt) -> UnsafeMutablePointer<Void>
var alphaStage: Int {
  get {
    return
  }
}
func alphasort(_: UnsafeMutablePointer<UnsafePointer<dirent>>, _: UnsafeMutablePointer<UnsafePointer<dirent>>) -> Int32
struct appletalk_fdinfo {
  var pfi: proc_fileinfo
  var appletalkinfo: appletalk_info
}
struct appletalk_info {
  var atalk_stat: vinfo_stat
}
func arc4random() -> UInt32
func arc4random_addrandom(_: UnsafeMutablePointer<UInt8>, _: Int32)
@availability(OSX, introduced=10.7) func arc4random_buf(_: UnsafeMutablePointer<Void>, _: UInt)
func arc4random_stir()
@availability(OSX, introduced=10.7) func arc4random_uniform(_: UInt32) -> UInt32
func ascii2addr(_: Int32, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>) -> Int32
func asctime(_: UnsafePointer<tm>) -> UnsafeMutablePointer<Int8>
func asctime_r(_: UnsafePointer<tm>, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func asin(_: Double) -> Double
func asinf(_: Float) -> Float
func asinh(_: Double) -> Double
func asinhf(_: Float) -> Float
func atan(_: Double) -> Double
func atan2(_: Double, _: Double) -> Double
func atan2f(_: Float, _: Float) -> Float
func atanf(_: Float) -> Float
func atanh(_: Double) -> Double
func atanhf(_: Float) -> Float
func atexit(_: CFunctionPointer<(() -> Void)>) -> Int32
@availability(OSX, introduced=10.6) func atexit_b(_: (() -> Void)!) -> Int32
func atof(_: UnsafePointer<Int8>) -> Double
func atoi(_: UnsafePointer<Int8>) -> Int32
func atol(_: UnsafePointer<Int8>) -> Int
func atoll(_: UnsafePointer<Int8>) -> Int64
typealias attrgroup_t = UInt32
struct attribute_set {
  var commonattr: attrgroup_t
  var volattr: attrgroup_t
  var dirattr: attrgroup_t
  var fileattr: attrgroup_t
  var forkattr: attrgroup_t
}
typealias attribute_set_t = attribute_set
struct attrlist {
  var bitmapcount: u_short
  var reserved: UInt16
  var commonattr: attrgroup_t
  var volattr: attrgroup_t
  var dirattr: attrgroup_t
  var fileattr: attrgroup_t
  var forkattr: attrgroup_t
}
struct attrreference {
  var attr_dataoffset: Int32
  var attr_length: UInt32
}
typealias attrreference_t = attrreference
struct au_arb_t {
  var howtopr: u_char
  var bu: u_char
  var uc: u_char
  var data: UnsafeMutablePointer<u_char>
}
struct au_arg32_t {
  var no: u_char
  var val: UInt32
  var len: UInt16
  var text: UnsafeMutablePointer<Int8>
}
struct au_arg64_t {
  var no: u_char
  var val: UInt64
  var len: UInt16
  var text: UnsafeMutablePointer<Int8>
}
typealias au_asflgs_t = UInt64
typealias au_asid_t = pid_t
struct au_attr32_t {
  var mode: UInt32
  var uid: UInt32
  var gid: UInt32
  var fsid: UInt32
  var nid: UInt64
  var dev: UInt32
}
struct au_attr64_t {
  var mode: UInt32
  var uid: UInt32
  var gid: UInt32
  var fsid: UInt32
  var nid: UInt64
  var dev: UInt64
}
func au_bsm_to_domain(bsm_domain: u_short, local_domainp: UnsafeMutablePointer<Int32>) -> Int32
func au_bsm_to_errno(bsm_error: u_char, errorp: UnsafeMutablePointer<Int32>) -> Int32
func au_bsm_to_fcntl_cmd(bsm_fcntl_cmd: u_short, local_fcntl_cmdp: UnsafeMutablePointer<Int32>) -> Int32
func au_bsm_to_socket_type(bsm_socket_type: u_short, local_socket_typep: UnsafeMutablePointer<Int32>) -> Int32
struct au_class_ent {
  var ac_name: UnsafeMutablePointer<Int8>
  var ac_class: au_class_t
  var ac_desc: UnsafeMutablePointer<Int8>
}
typealias au_class_ent_t = au_class_ent
typealias au_class_t = UInt32
func au_close(d: Int32, keep: Int32, event: Int16) -> Int32
func au_close_buffer(d: Int32, event: Int16, buffer: UnsafeMutablePointer<u_char>, buflen: UnsafeMutablePointer<UInt>) -> Int32
func au_close_token(tok: COpaquePointer, buffer: UnsafeMutablePointer<u_char>, buflen: UnsafeMutablePointer<UInt>) -> Int32
func au_domain_to_bsm(local_domain: Int32) -> u_short
typealias au_emod_t = UInt16
func au_errno_to_bsm(local_errno: Int32) -> u_char
struct au_evclass_map {
  var ec_number: au_event_t
  var ec_class: au_class_t
}
typealias au_evclass_map_t = au_evclass_map
struct au_event_ent {
  var ae_number: au_event_t
  var ae_name: UnsafeMutablePointer<Int8>
  var ae_desc: UnsafeMutablePointer<Int8>
  var ae_class: au_class_t
}
typealias au_event_ent_t = au_event_ent
typealias au_event_t = UInt16
struct au_execarg_t {
  var count: UInt32
  var text: (UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>)
}
struct au_execenv_t {
  var count: UInt32
  var text: (UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>, UnsafeMutablePointer<Int8>)
}
struct au_exit_t {
  var status: UInt32
  var ret: UInt32
}
func au_fcntl_cmd_to_bsm(local_fcntl_command: Int32) -> u_short
func au_fetch_tok(tok: UnsafeMutablePointer<tokenstr_t>, buf: UnsafeMutablePointer<u_char>, len: Int32) -> Int32
struct au_file_t {
  var s: UInt32
  var ms: UInt32
  var len: UInt16
  var name: UnsafeMutablePointer<Int8>
}
func au_free_token(tok: COpaquePointer)
typealias au_fstat_t = audit_fstat
func au_get_state() -> Int32
struct au_groups_t {
  var no: UInt16
  var list: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct au_header32_ex_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var ad_type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  var s: UInt32
  var ms: UInt32
}
struct au_header32_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var s: UInt32
  var ms: UInt32
}
struct au_header64_ex_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var ad_type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
  var s: UInt64
  var ms: UInt64
}
struct au_header64_t {
  var size: UInt32
  var version: u_char
  var e_type: UInt16
  var e_mod: UInt16
  var s: UInt64
  var ms: UInt64
}
typealias au_id_t = uid_t
struct au_inaddr_ex_t {
  var type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
}
struct au_inaddr_t {
  var addr: UInt32
}
struct au_invalid_t {
  var length: UInt16
  var data: UnsafeMutablePointer<Int8>
}
struct au_ip_t {
  var version: u_char
  var tos: u_char
  var len: UInt16
  var id: UInt16
  var offset: UInt16
  var ttl: u_char
  var prot: u_char
  var chksm: UInt16
  var src: UInt32
  var dest: UInt32
}
struct au_ipc_t {
  var type: u_char
  var id: UInt32
}
struct au_ipcperm_t {
  var uid: UInt32
  var gid: UInt32
  var puid: UInt32
  var pgid: UInt32
  var mode: UInt32
  var seq: UInt32
  var key: UInt32
}
struct au_iport_t {
  var port: UInt16
}
struct au_kevent_t {
  var ident: UInt32
  var filter: UInt16
  var flags: UInt16
  var fflags: UInt32
  var data: UInt32
}
struct au_mask {
  var am_success: UInt32
  var am_failure: UInt32
}
typealias au_mask_t = au_mask
func au_notify_initialize() -> UInt32
func au_notify_terminate() -> Int32
struct au_opaque_t {
  var size: UInt16
  var data: UnsafeMutablePointer<Int8>
}
func au_open() -> Int32
struct au_path_t {
  var len: UInt16
  var path: UnsafeMutablePointer<Int8>
}
func au_poltostr(policy: Int32, maxsize: UInt, buf: UnsafeMutablePointer<Int8>) -> Int
func au_preselect(event: au_event_t, mask_p: UnsafeMutablePointer<au_mask_t>, sorf: Int32, flag: Int32) -> Int32
func au_print_flags_tok(outfp: UnsafeMutablePointer<FILE>, tok: UnsafeMutablePointer<tokenstr_t>, del: UnsafeMutablePointer<Int8>, oflags: Int32)
func au_print_tok(outfp: UnsafeMutablePointer<FILE>, tok: UnsafeMutablePointer<tokenstr_t>, del: UnsafeMutablePointer<Int8>, raw: Int8, sfrm: Int8)
func au_print_tok_xml(outfp: UnsafeMutablePointer<FILE>, tok: UnsafeMutablePointer<tokenstr_t>, del: UnsafeMutablePointer<Int8>, raw: Int8, sfrm: Int8)
func au_print_xml_footer(outfp: UnsafeMutablePointer<FILE>)
func au_print_xml_header(outfp: UnsafeMutablePointer<FILE>)
struct au_proc32_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid32_t
}
struct au_proc32ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr32_t
}
struct au_proc64_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid64_t
}
struct au_proc64ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr64_t
}
struct au_qctrl {
  var aq_hiwater: Int32
  var aq_lowater: Int32
  var aq_bufsz: Int32
  var aq_delay: Int32
  var aq_minfree: Int32
}
typealias au_qctrl_t = au_qctrl
func au_read_rec(fp: UnsafeMutablePointer<FILE>, buf: UnsafeMutablePointer<UnsafeMutablePointer<u_char>>) -> Int32
struct au_ret32_t {
  var status: u_char
  var ret: UInt32
}
struct au_ret64_t {
  var err: u_char
  var val: UInt64
}
struct au_seq_t {
  var seqno: UInt32
}
struct au_session {
  var as_aia_p: UnsafeMutablePointer<auditinfo_addr_t>
  var as_mask: au_mask_t
}
typealias au_session_t = au_session
func au_sflagstostr(flags: UInt64, maxsize: UInt, buf: UnsafeMutablePointer<Int8>) -> Int
struct au_socket_ex32_t {
  var domain: UInt16
  var type: UInt16
  var atype: UInt16
  var l_port: UInt16
  var l_addr: (UInt32, UInt32, UInt32, UInt32)
  var r_port: UInt32
  var r_addr: (UInt32, UInt32, UInt32, UInt32)
}
struct au_socket_t {
  var type: UInt16
  var l_port: UInt16
  var l_addr: UInt32
  var r_port: UInt16
  var r_addr: UInt32
}
func au_socket_type_to_bsm(local_socket_type: Int32) -> u_short
struct au_socketinet32_t {
  var family: UInt16
  var port: UInt16
  var addr: UInt32
}
struct au_socketinet_ex32_t {
  var family: UInt16
  var port: UInt16
  var addr: (UInt32, UInt32, UInt32, UInt32)
}
struct au_socketunix_t {
  var family: UInt16
  var path: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias au_stat_t = audit_stat
func au_strerror(bsm_error: u_char) -> UnsafePointer<Int8>
func au_strtopol(polstr: UnsafePointer<Int8>, policy: UnsafeMutablePointer<Int32>) -> Int32
func au_strtosflags(sflagsstr: UnsafePointer<Int8>, flags: UnsafeMutablePointer<UInt64>) -> Int32
struct au_subject32_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid32_t
}
struct au_subject32ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr32_t
}
struct au_subject64_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tid64_t
}
struct au_subject64ex_t {
  var auid: UInt32
  var euid: UInt32
  var egid: UInt32
  var ruid: UInt32
  var rgid: UInt32
  var pid: UInt32
  var sid: UInt32
  var tid: au_tidaddr64_t
}
struct au_text_t {
  var len: UInt16
  var text: UnsafeMutablePointer<Int8>
}
struct au_tid {
  var port: dev_t
  var machine: UInt32
}
struct au_tid32 {
  var port: UInt32
  var addr: UInt32
}
typealias au_tid32_t = au_tid32
struct au_tid64 {
  var port: UInt64
  var addr: UInt32
}
typealias au_tid64_t = au_tid64
struct au_tid_addr {
  var at_port: dev_t
  var at_type: UInt32
  var at_addr: (UInt32, UInt32, UInt32, UInt32)
}
typealias au_tid_addr_t = au_tid_addr
typealias au_tid_t = au_tid
struct au_tidaddr32 {
  var port: UInt32
  var type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
}
typealias au_tidaddr32_t = au_tidaddr32
struct au_tidaddr64 {
  var port: UInt64
  var type: UInt32
  var addr: (UInt32, UInt32, UInt32, UInt32)
}
typealias au_tidaddr64_t = au_tidaddr64
func au_to_arg(n: Int8, text: UnsafePointer<Int8>, v: UInt32) -> COpaquePointer
func au_to_arg32(n: Int8, text: UnsafePointer<Int8>, v: UInt32) -> COpaquePointer
func au_to_arg64(n: Int8, text: UnsafePointer<Int8>, v: UInt64) -> COpaquePointer
func au_to_data(unit_print: Int8, unit_type: Int8, unit_count: Int8, p: UnsafePointer<Int8>) -> COpaquePointer
func au_to_exec_args(argv: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> COpaquePointer
func au_to_exec_env(envp: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> COpaquePointer
func au_to_exit(retval: Int32, err: Int32) -> COpaquePointer
func au_to_file(file: UnsafePointer<Int8>, tm: timeval) -> COpaquePointer
func au_to_groups(groups: UnsafeMutablePointer<Int32>) -> COpaquePointer
func au_to_header(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32_ex(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header32_ex_tm(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t, tm: timeval, aia: UnsafeMutablePointer<auditinfo_addr>) -> COpaquePointer
func au_to_header32_tm(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t, tm: timeval) -> COpaquePointer
func au_to_header64(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_header64_tm(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t, tm: timeval) -> COpaquePointer
func au_to_header_ex(rec_size: Int32, e_type: au_event_t, e_mod: au_emod_t) -> COpaquePointer
func au_to_in_addr(internet_addr: UnsafeMutablePointer<in_addr>) -> COpaquePointer
func au_to_in_addr_ex(internet_addr: UnsafeMutablePointer<in6_addr>) -> COpaquePointer
func au_to_ip(ip: COpaquePointer) -> COpaquePointer
func au_to_ipc(type: Int8, id: Int32) -> COpaquePointer
func au_to_ipc_perm(perm: UnsafeMutablePointer<ipc_perm>) -> COpaquePointer
func au_to_iport(iport: UInt16) -> COpaquePointer
func au_to_kevent(kev: UnsafeMutablePointer<kevent>) -> COpaquePointer
func au_to_me() -> COpaquePointer
func au_to_newgroups(n: UInt16, groups: UnsafeMutablePointer<gid_t>) -> COpaquePointer
func au_to_opaque(data: UnsafePointer<Int8>, bytes: UInt16) -> COpaquePointer
func au_to_path(path: UnsafePointer<Int8>) -> COpaquePointer
func au_to_process(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process32(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process32_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process64(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_process64_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_process_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_return(status: Int8, ret: UInt32) -> COpaquePointer
func au_to_return32(status: Int8, ret: UInt32) -> COpaquePointer
func au_to_return64(status: Int8, ret: UInt64) -> COpaquePointer
func au_to_seq(audit_count: Int) -> COpaquePointer
func au_to_sock_inet(so: UnsafeMutablePointer<sockaddr_in>) -> COpaquePointer
func au_to_sock_inet128(so: UnsafeMutablePointer<sockaddr_in6>) -> COpaquePointer
func au_to_sock_inet32(so: UnsafeMutablePointer<sockaddr_in>) -> COpaquePointer
func au_to_sock_unix(so: UnsafeMutablePointer<sockaddr_un>) -> COpaquePointer
func au_to_socket_ex(so_domain: u_short, so_type: u_short, sa_local: UnsafeMutablePointer<sockaddr>, sa_remote: UnsafeMutablePointer<sockaddr>) -> COpaquePointer
func au_to_subject(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject32(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject32_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject64(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> COpaquePointer
func au_to_subject64_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_subject_ex(auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> COpaquePointer
func au_to_text(text: UnsafePointer<Int8>) -> COpaquePointer
func au_to_trailer(rec_size: Int32) -> COpaquePointer
func au_to_zonename(zonename: UnsafePointer<Int8>) -> COpaquePointer
struct au_trailer_t {
  var magic: UInt16
  var count: UInt32
}
struct au_user_ent {
  var au_name: UnsafeMutablePointer<Int8>
  var au_always: au_mask_t
  var au_never: au_mask_t
}
typealias au_user_ent_t = au_user_ent
func au_user_mask(username: UnsafeMutablePointer<Int8>, mask_p: UnsafeMutablePointer<au_mask_t>) -> Int32
func au_write(d: Int32, m: COpaquePointer) -> Int32
struct au_zonename_t {
  var len: UInt16
  var zonename: UnsafeMutablePointer<Int8>
}
func audit(_: UnsafePointer<Void>, _: Int32) -> Int32
struct audit_fstat {
  var af_filesz: UInt64
  var af_currsz: UInt64
}
func audit_get_car(path: UnsafeMutablePointer<Int8>, sz: UInt) -> Int32
func audit_get_class(evc_map: UnsafeMutablePointer<au_evclass_map_t>, sz: UInt) -> Int32
func audit_get_cond(cond: UnsafeMutablePointer<Int32>) -> Int32
func audit_get_cwd(path: UnsafeMutablePointer<Int8>, sz: UInt) -> Int32
func audit_get_fsize(fstat: UnsafeMutablePointer<au_fstat_t>, sz: UInt) -> Int32
func audit_get_kaudit(aia: UnsafeMutablePointer<auditinfo_addr_t>, sz: UInt) -> Int32
func audit_get_kmask(kmask: UnsafeMutablePointer<au_mask_t>, sz: UInt) -> Int32
func audit_get_pinfo(api: UnsafeMutablePointer<auditpinfo_t>, sz: UInt) -> Int32
func audit_get_pinfo_addr(apia: UnsafeMutablePointer<auditpinfo_addr_t>, sz: UInt) -> Int32
func audit_get_policy(policy: UnsafeMutablePointer<Int32>) -> Int32
func audit_get_qctrl(qctrl: UnsafeMutablePointer<au_qctrl_t>, sz: UInt) -> Int32
func audit_get_sflags(flags: UnsafeMutablePointer<UInt64>) -> Int32
func audit_get_sflags_mask(which: UnsafePointer<Int8>, mask: UnsafeMutablePointer<UInt64>) -> Int32
func audit_get_sinfo_addr(aia: UnsafeMutablePointer<auditinfo_addr_t>, sz: UInt) -> Int32
func audit_get_stat(stats: UnsafeMutablePointer<au_stat_t>, sz: UInt) -> Int32
func audit_send_trigger(trigger: UnsafeMutablePointer<Int32>) -> Int32
func audit_session_join(port: mach_port_name_t) -> au_asid_t
func audit_session_port(asid: au_asid_t, portname: UnsafeMutablePointer<mach_port_name_t>) -> Int32
func audit_session_self() -> mach_port_name_t
func audit_set_class(evc_map: UnsafeMutablePointer<au_evclass_map_t>, sz: UInt) -> Int32
func audit_set_cond(cond: UnsafeMutablePointer<Int32>) -> Int32
func audit_set_fsize(fstat: UnsafeMutablePointer<au_fstat_t>, sz: UInt) -> Int32
func audit_set_kaudit(aia: UnsafeMutablePointer<auditinfo_addr_t>, sz: UInt) -> Int32
func audit_set_kmask(kmask: UnsafeMutablePointer<au_mask_t>, sz: UInt) -> Int32
func audit_set_pmask(api: UnsafeMutablePointer<auditpinfo_t>, sz: UInt) -> Int32
func audit_set_policy(policy: UnsafeMutablePointer<Int32>) -> Int32
func audit_set_qctrl(qctrl: UnsafeMutablePointer<au_qctrl_t>, sz: UInt) -> Int32
func audit_set_sflags(flags: UInt64) -> Int32
func audit_set_sflags_mask(which: UnsafePointer<Int8>, mask: UInt64) -> Int32
func audit_set_stat(stats: UnsafeMutablePointer<au_stat_t>, sz: UInt) -> Int32
func audit_set_terminal_id(tid: UnsafeMutablePointer<au_tid_t>) -> Int32
func audit_set_terminal_id_ex(tid: UnsafeMutablePointer<au_tid_addr_t>) -> Int32
struct audit_stat {
  var as_version: UInt32
  var as_numevent: UInt32
  var as_generated: Int32
  var as_nonattrib: Int32
  var as_kernel: Int32
  var as_audit: Int32
  var as_auditctl: Int32
  var as_enqueue: Int32
  var as_written: Int32
  var as_wblocked: Int32
  var as_rblocked: Int32
  var as_dropped: Int32
  var as_totalsize: Int32
  var as_memused: UInt32
}
struct audit_token_t {
  var val: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
@availability(OSX, introduced=10.8) func audit_token_to_asid(atoken: audit_token_t) -> au_asid_t
func audit_token_to_au32(atoken: audit_token_t, auidp: UnsafeMutablePointer<uid_t>, euidp: UnsafeMutablePointer<uid_t>, egidp: UnsafeMutablePointer<gid_t>, ruidp: UnsafeMutablePointer<uid_t>, rgidp: UnsafeMutablePointer<gid_t>, pidp: UnsafeMutablePointer<pid_t>, asidp: UnsafeMutablePointer<au_asid_t>, tidp: UnsafeMutablePointer<au_tid_t>)
@availability(OSX, introduced=10.8) func audit_token_to_auid(atoken: audit_token_t) -> uid_t
@availability(OSX, introduced=10.8) func audit_token_to_egid(atoken: audit_token_t) -> gid_t
@availability(OSX, introduced=10.8) func audit_token_to_euid(atoken: audit_token_t) -> uid_t
@availability(OSX, introduced=10.8) func audit_token_to_pid(atoken: audit_token_t) -> pid_t
@availability(OSX, introduced=10.8) func audit_token_to_pidversion(atoken: audit_token_t) -> Int32
@availability(OSX, introduced=10.8) func audit_token_to_rgid(atoken: audit_token_t) -> gid_t
@availability(OSX, introduced=10.8) func audit_token_to_ruid(atoken: audit_token_t) -> uid_t
func audit_write(event_code: Int16, subject: COpaquePointer, misctok: COpaquePointer, retval: Int8, errcode: Int32) -> Int32
func audit_write_failure(event_code: Int16, errmsg: UnsafeMutablePointer<Int8>, errret: Int32, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> Int32
func audit_write_failure_ex(event_code: Int16, errmsg: UnsafeMutablePointer<Int8>, errret: Int32, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> Int32
func audit_write_failure_na(event_code: Int16, errmsg: UnsafeMutablePointer<Int8>, errret: Int32, euid: uid_t, egid: gid_t, pid: pid_t, tid: UnsafeMutablePointer<au_tid_t>) -> Int32
func audit_write_failure_na_ex(event_code: Int16, errmsg: UnsafeMutablePointer<Int8>, errret: Int32, euid: uid_t, egid: gid_t, pid: pid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> Int32
func audit_write_failure_self(event_code: Int16, errmsg: UnsafeMutablePointer<Int8>, errret: Int32) -> Int32
func audit_write_success(event_code: Int16, misctok: COpaquePointer, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_t>) -> Int32
func audit_write_success_ex(event_code: Int16, misctok: COpaquePointer, auid: au_id_t, euid: uid_t, egid: gid_t, ruid: uid_t, rgid: gid_t, pid: pid_t, sid: au_asid_t, tid: UnsafeMutablePointer<au_tid_addr_t>) -> Int32
func audit_write_success_self(event_code: Int16, misctok: COpaquePointer) -> Int32
func auditctl(_: UnsafePointer<Int8>) -> Int32
struct auditinfo {
  var ai_auid: au_id_t
  var ai_mask: au_mask_t
  var ai_termid: au_tid_t
  var ai_asid: au_asid_t
}
struct auditinfo_addr {
  var ai_auid: au_id_t
  var ai_mask: au_mask_t
  var ai_termid: au_tid_addr_t
  var ai_asid: au_asid_t
  var ai_flags: au_asflgs_t
}
typealias auditinfo_addr_t = auditinfo_addr
typealias auditinfo_t = auditinfo
func auditon(_: Int32, _: UnsafeMutablePointer<Void>, _: Int32) -> Int32
struct auditpinfo {
  var ap_pid: pid_t
  var ap_auid: au_id_t
  var ap_mask: au_mask_t
  var ap_termid: au_tid_t
  var ap_asid: au_asid_t
}
struct auditpinfo_addr {
  var ap_pid: pid_t
  var ap_auid: au_id_t
  var ap_mask: au_mask_t
  var ap_termid: au_tid_addr_t
  var ap_asid: au_asid_t
  var ap_flags: au_asflgs_t
}
typealias auditpinfo_addr_t = auditpinfo_addr
typealias auditpinfo_t = auditpinfo
var averunnable: loadavg
func basename(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func bcmp(_: UnsafePointer<Void>, _: UnsafePointer<Void>, _: UInt) -> Int32
func bcopy(_: UnsafePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt)
var betaStage: Int {
  get {
    return
  }
}
func bind(_: Int32, _: UnsafePointer<sockaddr>, _: socklen_t) -> Int32
func bindresvport(_: Int32, _: UnsafeMutablePointer<sockaddr_in>) -> Int32
func bindresvport_sa(_: Int32, _: UnsafeMutablePointer<sockaddr>) -> Int32
typealias blkcnt_t = __darwin_blkcnt_t
typealias blksize_t = __darwin_blksize_t
var bold: Int {
  get {
    return
  }
}
typealias boolean_t = UInt32
var bootstrap_port: mach_port_t
typealias bootstrap_t = mach_port_t
@availability(*, unavailable) func brk(_: UnsafePointer<Void>) -> UnsafeMutablePointer<Void>
func bsd_signal(_: Int32, _: CFunctionPointer<((Int32) -> Void)>) -> CFunctionPointer<((Int32) -> Void)>
func bsearch(_: UnsafePointer<Void>, _: UnsafePointer<Void>, _: UInt, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.6) func bsearch_b(_: UnsafePointer<Void>, _: UnsafePointer<Void>, _: UInt, _: UInt, _: ((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)!) -> UnsafeMutablePointer<Void>
func btowc(_: Int32) -> wint_t
func buf_alloc(_: vnode_t) -> buf_t
func buf_attr(_: buf_t) -> bufattr_t
func buf_bawrite(_: buf_t) -> errno_t
func buf_bdwrite(_: buf_t) -> errno_t
func buf_biodone(_: buf_t)
func buf_biowait(_: buf_t) -> errno_t
func buf_blkno(_: buf_t) -> daddr64_t
func buf_bread(_: vnode_t, _: daddr64_t, _: Int32, _: kauth_cred_t, _: UnsafeMutablePointer<buf_t>) -> errno_t
func buf_breadn(_: vnode_t, _: daddr64_t, _: Int32, _: UnsafeMutablePointer<daddr64_t>, _: UnsafeMutablePointer<Int32>, _: Int32, _: kauth_cred_t, _: UnsafeMutablePointer<buf_t>) -> errno_t
func buf_brelse(_: buf_t)
func buf_bwrite(_: buf_t) -> errno_t
func buf_callback(_: buf_t) -> UnsafeMutablePointer<Void>
func buf_clear(_: buf_t)
func buf_clear_redundancy_flags(_: buf_t, _: UInt32)
func buf_clearflags(_: buf_t, _: Int32)
func buf_clone(_: buf_t, _: Int32, _: Int32, _: CFunctionPointer<((buf_t, UnsafeMutablePointer<Void>) -> Void)>, _: UnsafeMutablePointer<Void>) -> buf_t
func buf_count(_: buf_t) -> UInt32
func buf_create_shadow(bp: buf_t, force_copy: boolean_t, external_storage: UInt, iodone: CFunctionPointer<((buf_t, UnsafeMutablePointer<Void>) -> Void)>, arg: UnsafeMutablePointer<Void>) -> buf_t
func buf_dataptr(_: buf_t) -> UInt
func buf_device(_: buf_t) -> dev_t
func buf_dirtyend(_: buf_t) -> UInt32
func buf_dirtyoff(_: buf_t) -> UInt32
func buf_drvdata(_: buf_t) -> UnsafeMutablePointer<Void>
func buf_error(_: buf_t) -> errno_t
func buf_flags(_: buf_t) -> Int32
func buf_flushdirtyblks(_: vnode_t, _: Int32, _: Int32, _: UnsafePointer<Int8>)
func buf_free(_: buf_t)
func buf_fromcache(_: buf_t) -> Int32
func buf_fsprivate(_: buf_t) -> UnsafeMutablePointer<Void>
func buf_fua(_: buf_t) -> Int32
func buf_getblk(_: vnode_t, _: daddr64_t, _: Int32, _: Int32, _: Int32, _: Int32) -> buf_t
func buf_geteblk(_: Int32) -> buf_t
func buf_invalblkno(_: vnode_t, _: daddr64_t, _: Int32) -> errno_t
func buf_invalidateblks(_: vnode_t, _: Int32, _: Int32, _: Int32) -> Int32
func buf_iterate(_: vnode_t, _: CFunctionPointer<((buf_t, UnsafeMutablePointer<Void>) -> Int32)>, _: Int32, _: UnsafeMutablePointer<Void>)
func buf_lblkno(_: buf_t) -> daddr64_t
func buf_map(_: buf_t, _: UnsafeMutablePointer<caddr_t>) -> errno_t
func buf_markaged(_: buf_t)
func buf_markclean(_: buf_t)
func buf_markdelayed(_: buf_t)
func buf_markeintr(_: buf_t)
func buf_markfua(_: buf_t)
func buf_markinvalid(_: buf_t)
func buf_markstatic(_: buf_t)
func buf_meta_bread(_: vnode_t, _: daddr64_t, _: Int32, _: kauth_cred_t, _: UnsafeMutablePointer<buf_t>) -> errno_t
func buf_meta_breadn(_: vnode_t, _: daddr64_t, _: Int32, _: UnsafeMutablePointer<daddr64_t>, _: UnsafeMutablePointer<Int32>, _: Int32, _: kauth_cred_t, _: UnsafeMutablePointer<buf_t>) -> errno_t
func buf_proc(_: buf_t) -> proc_t
func buf_rcred(_: buf_t) -> kauth_cred_t
func buf_redundancy_flags(_: buf_t) -> UInt32
func buf_reset(_: buf_t, _: Int32)
func buf_resid(_: buf_t) -> UInt32
func buf_set_redundancy_flags(_: buf_t, _: UInt32)
func buf_setblkno(_: buf_t, _: daddr64_t)
func buf_setcallback(_: buf_t, _: CFunctionPointer<((buf_t, UnsafeMutablePointer<Void>) -> Void)>, _: UnsafeMutablePointer<Void>) -> errno_t
func buf_setcount(_: buf_t, _: UInt32)
func buf_setdataptr(_: buf_t, _: UInt)
func buf_setdevice(_: buf_t, _: vnode_t) -> errno_t
func buf_setdirtyend(_: buf_t, _: UInt32)
func buf_setdirtyoff(_: buf_t, _: UInt32)
func buf_setdrvdata(_: buf_t, _: UnsafeMutablePointer<Void>)
func buf_seterror(_: buf_t, _: errno_t)
func buf_setflags(_: buf_t, _: Int32)
func buf_setfsprivate(_: buf_t, _: UnsafeMutablePointer<Void>)
func buf_setlblkno(_: buf_t, _: daddr64_t)
func buf_setresid(_: buf_t, _: UInt32)
func buf_setsize(_: buf_t, _: UInt32)
func buf_setupl(_: buf_t, _: upl_t, _: UInt32) -> errno_t
func buf_setvnode(_: buf_t, _: vnode_t)
func buf_shadow(bp: buf_t) -> Int32
func buf_size(_: buf_t) -> UInt32
func buf_static(_: buf_t) -> Int32
func buf_strategy(_: vnode_t, _: UnsafeMutablePointer<Void>) -> errno_t
typealias buf_t = COpaquePointer
func buf_unmap(_: buf_t) -> errno_t
func buf_upl(_: buf_t) -> UnsafeMutablePointer<Void>
func buf_uploffset(_: buf_t) -> UInt32
func buf_valid(_: buf_t) -> Int32
func buf_vnode(_: buf_t) -> vnode_t
func buf_wcred(_: buf_t) -> kauth_cred_t
typealias bufattr_t = COpaquePointer
func bzero(_: UnsafeMutablePointer<Void>, _: UInt)
typealias caddr_t = UnsafeMutablePointer<Int8>
func calloc(_: UInt, _: UInt) -> UnsafeMutablePointer<Void>
func cannot_audit(_: Int32) -> Int32
func catclose(_: nl_catd) -> Int32
func catgets(_: nl_catd, _: Int32, _: Int32, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func catopen(_: UnsafePointer<Int8>, _: Int32) -> nl_catd
func cbrt(_: Double) -> Double
func cbrtf(_: Float) -> Float
typealias cc_t = UInt8
func ceil(_: Double) -> Double
func ceilf(_: Float) -> Float
func cfgetispeed(_: UnsafePointer<termios>) -> speed_t
func cfgetospeed(_: UnsafePointer<termios>) -> speed_t
func cfmakeraw(_: UnsafeMutablePointer<termios>)
func cfsetispeed(_: UnsafeMutablePointer<termios>, _: speed_t) -> Int32
func cfsetospeed(_: UnsafeMutablePointer<termios>, _: speed_t) -> Int32
func cfsetspeed(_: UnsafeMutablePointer<termios>, _: speed_t) -> Int32
func cgetcap(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<Int8>
func cgetclose() -> Int32
func cgetent(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<Int8>) -> Int32
func cgetfirst(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32
func cgetmatch(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
func cgetnext(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32
func cgetnum(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int>) -> Int32
func cgetset(_: UnsafePointer<Int8>) -> Int32
func cgetstr(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32
func cgetustr(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32
func chdir(_: UnsafePointer<Int8>) -> Int32
func chflags(_: UnsafePointer<Int8>, _: __uint32_t) -> Int32
func chmod(_: UnsafePointer<Int8>, _: mode_t) -> Int32
func chmodx_np(_: UnsafePointer<Int8>, _: filesec_t) -> Int32
func chown(_: UnsafePointer<Int8>, _: uid_t, _: gid_t) -> Int32
func chroot(_: UnsafePointer<Int8>) -> Int32
func clearerr(_: UnsafeMutablePointer<FILE>)
func clock() -> clock_t
func clock_alarm(clock_serv: clock_serv_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t, alarm_port: clock_reply_t) -> kern_return_t
func clock_alarm_reply(alarm_port: clock_reply_t, alarm_portPoly: mach_msg_type_name_t, alarm_code: kern_return_t, alarm_type: alarm_type_t, alarm_time: mach_timespec_t) -> kern_return_t
typealias clock_attr_t = UnsafeMutablePointer<Int32>
typealias clock_ctrl_port_t = clock_ctrl_t
typealias clock_ctrl_t = mach_port_t
typealias clock_flavor_t = Int32
func clock_get_attributes(clock_serv: clock_serv_t, flavor: clock_flavor_t, clock_attr: clock_attr_t, clock_attrCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func clock_get_res(_: mach_port_t, _: UnsafeMutablePointer<clock_res_t>) -> kern_return_t
func clock_get_time(clock_serv: clock_serv_t, cur_time: UnsafeMutablePointer<mach_timespec_t>) -> kern_return_t
typealias clock_id_t = Int32
typealias clock_reply_t = mach_port_t
typealias clock_res_t = Int32
typealias clock_serv_port_t = clock_serv_t
typealias clock_serv_t = mach_port_t
func clock_set_attributes(clock_ctrl: clock_ctrl_t, flavor: clock_flavor_t, clock_attr: clock_attr_t, clock_attrCnt: mach_msg_type_number_t) -> kern_return_t
func clock_set_res(_: mach_port_t, _: clock_res_t) -> kern_return_t
func clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t
func clock_sleep(_: mach_port_t, _: Int32, _: mach_timespec_t, _: UnsafeMutablePointer<mach_timespec_t>) -> kern_return_t
func clock_sleep_trap(clock_name: mach_port_name_t, sleep_type: sleep_type_t, sleep_sec: Int32, sleep_nsec: Int32, wakeup_time: UnsafeMutablePointer<mach_timespec_t>) -> kern_return_t
typealias clock_t = __darwin_clock_t
struct clockinfo {
  var hz: Int32
  var tick: Int32
  var tickadj: Int32
  var stathz: Int32
  var profhz: Int32
}
func close(_: Int32) -> Int32
func closedir(_: UnsafeMutablePointer<DIR>) -> Int32
func closelog()
struct cmsghdr {
  var cmsg_len: socklen_t
  var cmsg_level: Int32
  var cmsg_type: Int32
}
typealias coalition_t = mach_port_t
typealias comp_t = UInt16
var condense: Int {
  get {
    return
  }
}
func confstr(_: Int32, _: UnsafeMutablePointer<Int8>, _: UInt) -> UInt
func connect(_: Int32, _: UnsafePointer<sockaddr>, _: socklen_t) -> Int32
func copysign(_: Double, _: Double) -> Double
func copysignf(_: Float, _: Float) -> Float
func cos(_: Double) -> Double
func cosf(_: Float) -> Float
func cosh(_: Double) -> Double
func coshf(_: Float) -> Float
typealias cpu_subtype_t = integer_t
typealias cpu_threadtype_t = integer_t
typealias cpu_type_t = integer_t
func creat(_: UnsafePointer<Int8>, _: mode_t) -> Int32
func crypt(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
typealias ct_rune_t = __darwin_ct_rune_t
func ctermid(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func ctermid_r(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func ctime(_: UnsafePointer<time_t>) -> UnsafeMutablePointer<Int8>
func ctime_r(_: UnsafePointer<time_t>, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
struct ctl_event_data {
  var ctl_id: UInt32
  var ctl_unit: UInt32
}
struct ctl_info {
  var ctl_id: UInt32
  var ctl_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct ctlname {
  var ctl_name: UnsafeMutablePointer<Int8>
  var ctl_type: Int32
}
typealias daddr64_t = Int64
typealias daddr_t = Int32
@availability(OSX, unavailable, introduced=10.0, deprecated=10.5, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func daemon(_: Int32, _: Int32) -> Int32
struct datum {
  var dptr: UnsafeMutablePointer<Void>
  var dsize: UInt
}
var daylight: Int32
func dbm_clearerr(_: UnsafeMutablePointer<DBM>) -> Int32
func dbm_close(_: UnsafeMutablePointer<DBM>)
func dbm_delete(_: UnsafeMutablePointer<DBM>, _: datum) -> Int32
func dbm_dirfno(_: UnsafeMutablePointer<DBM>) -> Int32
func dbm_error(_: UnsafeMutablePointer<DBM>) -> Int32
func dbm_fetch(_: UnsafeMutablePointer<DBM>, _: datum) -> datum
func dbm_firstkey(_: UnsafeMutablePointer<DBM>) -> datum
func dbm_forder(_: UnsafeMutablePointer<DBM>, _: datum) -> Int
func dbm_nextkey(_: UnsafeMutablePointer<DBM>) -> datum
func dbm_open(_: UnsafePointer<Int8>, _: Int32, _: mode_t) -> UnsafeMutablePointer<DBM>
func dbm_store(_: UnsafeMutablePointer<DBM>, _: datum, _: datum, _: Int32) -> Int32
typealias dev_t = __darwin_dev_t
var developStage: Int {
  get {
    return
  }
}
func devname(_: dev_t, _: mode_t) -> UnsafeMutablePointer<Int8>
func devname_r(_: dev_t, _: mode_t, buf: UnsafeMutablePointer<Int8>, len: Int32) -> UnsafeMutablePointer<Int8>
func difftime(_: time_t, _: time_t) -> Double
func digittoint(_c: Int32) -> Int32
struct dirent {
  var d_ino: __uint64_t
  var d_seekoff: __uint64_t
  var d_reclen: __uint16_t
  var d_namlen: __uint16_t
  var d_type: __uint8_t
  var d_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
@availability(OSX, introduced=10.8) func dirfd(dirp: UnsafeMutablePointer<DIR>) -> Int32
func dirname(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
struct diskextent {
  var startblock: UInt32
  var blockcount: UInt32
}
func div(_: Int32, _: Int32) -> div_t
struct div_t {
  var quot: Int32
  var rem: Int32
}
struct dk_extent_t {
  var offset: UInt64
  var length: UInt64
}
struct dk_firmware_path_t {
  var path: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct dk_format_capacities_t {
  var capacities: UnsafeMutablePointer<dk_format_capacity_t>
  var capacitiesCount: UInt32
  var reserved0096: (UInt8, UInt8, UInt8, UInt8)
}
struct dk_format_capacity_t {
  var blockCount: UInt64
  var blockSize: UInt32
  var reserved0096: (UInt8, UInt8, UInt8, UInt8)
}
struct dk_unmap_t {
  var extents: UnsafeMutablePointer<dk_extent_t>
  var extentsCount: UInt32
  var options: UInt32
}
struct dl_info {
  var dli_fname: UnsafePointer<Int8>
  var dli_fbase: UnsafeMutablePointer<Void>
  var dli_sname: UnsafePointer<Int8>
  var dli_saddr: UnsafeMutablePointer<Void>
}
func dladdr(_: UnsafePointer<Void>, _: UnsafeMutablePointer<Dl_info>) -> Int32
func dlclose(__handle: UnsafeMutablePointer<Void>) -> Int32
func dlerror() -> UnsafeMutablePointer<Int8>
func dlopen(__path: UnsafePointer<Int8>, __mode: Int32) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.5) func dlopen_preflight(__path: UnsafePointer<Int8>) -> Bool
func dlsym(__handle: UnsafeMutablePointer<Void>, __symbol: UnsafePointer<Int8>) -> UnsafeMutablePointer<Void>
typealias double_t = Double
struct dqblk {
  var dqb_bhardlimit: UInt64
  var dqb_bsoftlimit: UInt64
  var dqb_curbytes: UInt64
  var dqb_ihardlimit: UInt32
  var dqb_isoftlimit: UInt32
  var dqb_curinodes: UInt32
  var dqb_btime: UInt32
  var dqb_itime: UInt32
  var dqb_id: UInt32
  var dqb_spare: (UInt32, UInt32, UInt32, UInt32)
}
struct dqfilehdr {
  var dqh_magic: UInt32
  var dqh_version: UInt32
  var dqh_maxentries: UInt32
  var dqh_entrycnt: UInt32
  var dqh_flags: UInt32
  var dqh_chktime: UInt32
  var dqh_btime: UInt32
  var dqh_itime: UInt32
  var dqh_string: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var dqh_spare: (UInt32, UInt32, UInt32, UInt32)
}
func dqhashshift(size: UInt32) -> Int32
func drand48() -> Double
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func drem(_: Double, _: Double) -> Double
func dup(_: Int32) -> Int32
func dup2(_: Int32, _: Int32) -> Int32
@availability(*, unavailable, message="This kqueue(2) EVFILT_PROC flag is no longer sent") var eNoteExitReparentedDeprecated: Int {
  get {
    return
  }
}
@availability(*, unavailable, message="This kqueue(2) EVFILT_PROC flag is deprecated") var eNoteReapDeprecated: Int {
  get {
    return
  }
}
func ecvt(_: Double, _: Int32, _: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<Int8>
typealias emulation_vector_t = UnsafeMutablePointer<mach_vm_offset_t>
func encrypt(_: UnsafeMutablePointer<Int8>, _: Int32)
func endac()
func endauclass()
func endauevent()
func endauuser()
func endgrent()
func endhostent()
func endnetent()
func endnetgrent()
var endorder: VISIT {
  get {
    return
  }
}
func endprotoent()
func endpwent()
func endrpcent()
func endservent()
func endusershell()
func endutxent()
@availability(OSX, introduced=10.5) func endutxent_wtmp()
struct entry {
  var key: UnsafeMutablePointer<Int8>
  var data: UnsafeMutablePointer<Void>
}
typealias er_t = UnsafeMutablePointer<eventreq>
func erand48(_: UnsafeMutablePointer<UInt16>) -> Double
func erf(_: Double) -> Double
func erfc(_: Double) -> Double
func erfcf(_: Float) -> Float
func erff(_: Float) -> Float
typealias errno_t = Int32
func etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t
struct eventreq {
  var er_type: Int32
  var er_handle: Int32
  var er_data: UnsafeMutablePointer<Void>
  var er_rcnt: Int32
  var er_wcnt: Int32
  var er_ecnt: Int32
  var er_eventbits: Int32
}
struct exception {
  var type: Int32
  var name: UnsafeMutablePointer<Int8>
  var arg1: Double
  var arg2: Double
  var retval: Double
}
typealias exception_behavior_array_t = UnsafeMutablePointer<exception_behavior_t>
typealias exception_behavior_t = Int32
typealias exception_data_t = UnsafeMutablePointer<exception_data_type_t>
typealias exception_data_type_t = integer_t
typealias exception_flavor_array_t = UnsafeMutablePointer<thread_state_flavor_t>
typealias exception_handler_array_t = UnsafeMutablePointer<exception_handler_t>
typealias exception_handler_t = mach_port_t
typealias exception_mask_array_t = UnsafeMutablePointer<exception_mask_t>
typealias exception_mask_t = UInt32
typealias exception_port_arrary_t = exception_handler_array_t
typealias exception_port_array_t = UnsafeMutablePointer<mach_port_t>
typealias exception_port_t = exception_handler_t
func exception_raise(exception_port: mach_port_t, thread: mach_port_t, task: mach_port_t, exception: exception_type_t, code: exception_data_t, codeCnt: mach_msg_type_number_t) -> kern_return_t
func exception_raise_state(exception_port: mach_port_t, exception: exception_type_t, code: exception_data_t, codeCnt: mach_msg_type_number_t, flavor: UnsafeMutablePointer<Int32>, old_state: thread_state_t, old_stateCnt: mach_msg_type_number_t, new_state: thread_state_t, new_stateCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func exception_raise_state_identity(exception_port: mach_port_t, thread: mach_port_t, task: mach_port_t, exception: exception_type_t, code: exception_data_t, codeCnt: mach_msg_type_number_t, flavor: UnsafeMutablePointer<Int32>, old_state: thread_state_t, old_stateCnt: mach_msg_type_number_t, new_state: thread_state_t, new_stateCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias exception_type_t = Int32
func exchangedata(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UInt32) -> Int32
func execv(_: UnsafePointer<Int8>, _: UnsafePointer<UnsafeMutablePointer<Int8>>) -> Int32
func execvP(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<UnsafeMutablePointer<Int8>>) -> Int32
func execve(_: UnsafePointer<Int8>, _: UnsafePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<UnsafeMutablePointer<Int8>>) -> Int32
func execvp(_: UnsafePointer<Int8>, _: UnsafePointer<UnsafeMutablePointer<Int8>>) -> Int32
@noreturn func exit(_: Int32)
func exp(_: Double) -> Double
func exp2(_: Double) -> Double
func exp2f(_: Float) -> Float
func expf(_: Float) -> Float
func expm1(_: Double) -> Double
func expm1f(_: Float) -> Float
var extend: Int {
  get {
    return
  }
}
typealias extended80 = Float80
typealias extended96 = Float96
typealias extentrecord = (diskextent, diskextent, diskextent, diskextent, diskextent, diskextent, diskextent, diskextent)
struct extern_proc {
  var p_vmspace: UnsafeMutablePointer<vmspace>
  var p_sigacts: COpaquePointer
  var p_flag: Int32
  var p_stat: Int8
  var p_pid: pid_t
  var p_oppid: pid_t
  var p_dupfd: Int32
  var user_stack: caddr_t
  var exit_thread: UnsafeMutablePointer<Void>
  var p_debugger: Int32
  var sigwait: boolean_t
  var p_estcpu: u_int
  var p_cpticks: Int32
  var p_pctcpu: fixpt_t
  var p_wchan: UnsafeMutablePointer<Void>
  var p_wmesg: UnsafeMutablePointer<Int8>
  var p_swtime: u_int
  var p_slptime: u_int
  var p_realtimer: itimerval
  var p_rtime: timeval
  var p_uticks: u_quad_t
  var p_sticks: u_quad_t
  var p_iticks: u_quad_t
  var p_traceflag: Int32
  var p_tracep: COpaquePointer
  var p_siglist: Int32
  var p_textvp: COpaquePointer
  var p_holdcnt: Int32
  var p_sigmask: sigset_t
  var p_sigignore: sigset_t
  var p_sigcatch: sigset_t
  var p_priority: u_char
  var p_usrpri: u_char
  var p_nice: Int8
  var p_comm: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var p_pgrp: COpaquePointer
  var p_addr: UnsafeMutablePointer<user>
  var p_xstat: u_short
  var p_acflag: u_short
  var p_ru: UnsafeMutablePointer<rusage>
}
func fabs(_: Double) -> Double
func fabsf(_: Float) -> Float
@availability(OSX, introduced=10.10) func faccessat(_: Int32, _: UnsafePointer<Int8>, _: Int32, _: Int32) -> Int32
typealias fasttrap_instr_t = UInt8
struct fasttrap_machtp {
  var ftmt_instr: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ftmt_size: UInt8
  var ftmt_ripmode: UInt8
  var ftmt_modrm: UInt8
  var ftmt_type: UInt8
  var ftmt_code: UInt8
  var ftmt_base: UInt8
  var ftmt_index: UInt8
  var ftmt_scale: UInt8
  var ftmt_segment: UInt8
  var ftmt_dest: user_addr_t
}
typealias fasttrap_machtp_t = fasttrap_machtp
struct fbootstraptransfer {
  var fbt_offset: off_t
  var fbt_length: UInt
  var fbt_buffer: UnsafeMutablePointer<Void>
}
typealias fbootstraptransfer_t = fbootstraptransfer
func fchdir(_: Int32) -> Int32
func fchflags(_: Int32, _: __uint32_t) -> Int32
func fchmod(_: Int32, _: mode_t) -> Int32
@availability(OSX, introduced=10.10) func fchmodat(_: Int32, _: UnsafePointer<Int8>, _: mode_t, _: Int32) -> Int32
func fchmodx_np(_: Int32, _: filesec_t) -> Int32
func fchown(_: Int32, _: uid_t, _: gid_t) -> Int32
@availability(OSX, introduced=10.10) func fchownat(_: Int32, _: UnsafePointer<Int8>, _: uid_t, _: gid_t, _: Int32) -> Int32
func fclose(_: UnsafeMutablePointer<FILE>) -> Int32
struct fcodeblobs {
  var f_cd_hash: UnsafeMutablePointer<Void>
  var f_hash_size: UInt
  var f_cd_buffer: UnsafeMutablePointer<Void>
  var f_cd_size: UInt
  var f_out_size: UnsafeMutablePointer<UInt32>
  var f_arch: Int32
  var __padding: Int32
}
typealias fcodeblobs_t = fcodeblobs
func fcvt(_: Double, _: Int32, _: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<Int8>
typealias fd_mask = __int32_t
struct fd_set {
  var fds_bits: (__int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t, __int32_t)
}
func fdim(_: Double, _: Double) -> Double
func fdimf(_: Float, _: Float) -> Float
func fdopen(_: Int32, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<FILE>
@availability(OSX, introduced=10.10) func fdopendir(_: Int32) -> UnsafeMutablePointer<DIR>
func feclearexcept(_: Int32) -> Int32
func fegetenv(_: UnsafeMutablePointer<fenv_t>) -> Int32
func fegetexceptflag(_: UnsafeMutablePointer<fexcept_t>, _: Int32) -> Int32
func fegetround() -> Int32
func feholdexcept(_: UnsafeMutablePointer<fenv_t>) -> Int32
struct fenv_t {
  var __control: UInt16
  var __status: UInt16
  var __mxcsr: UInt32
  var __reserved: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
func feof(_: UnsafeMutablePointer<FILE>) -> Int32
func feraiseexcept(_: Int32) -> Int32
func ferror(_: UnsafeMutablePointer<FILE>) -> Int32
func fesetenv(_: UnsafePointer<fenv_t>) -> Int32
func fesetexceptflag(_: UnsafePointer<fexcept_t>, _: Int32) -> Int32
func fesetround(_: Int32) -> Int32
func fetestexcept(_: Int32) -> Int32
func feupdateenv(_: UnsafePointer<fenv_t>) -> Int32
typealias fexcept_t = UInt16
func fflagstostr(_: UInt) -> UnsafeMutablePointer<Int8>
func fflush(_: UnsafeMutablePointer<FILE>) -> Int32
func ffs(_: Int32) -> Int32
@availability(OSX, introduced=10.6) func ffsctl(_: Int32, _: UInt, _: UnsafeMutablePointer<Void>, _: UInt32) -> Int32
@availability(OSX, introduced=10.5) func ffsl(_: Int) -> Int32
@availability(OSX, introduced=10.9) func ffsll(_: Int64) -> Int32
@availability(OSX, introduced=10.6) func fgetattrlist(_: Int32, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UInt32) -> Int32
func fgetc(_: UnsafeMutablePointer<FILE>) -> Int32
func fgetln(_: UnsafeMutablePointer<FILE>, _: UnsafeMutablePointer<UInt>) -> UnsafeMutablePointer<Int8>
func fgetpos(_: UnsafeMutablePointer<FILE>, _: UnsafeMutablePointer<fpos_t>) -> Int32
func fgets(_: UnsafeMutablePointer<Int8>, _: Int32, _: UnsafeMutablePointer<FILE>) -> UnsafeMutablePointer<Int8>
func fgetwc(_: UnsafeMutablePointer<FILE>) -> wint_t
@availability(OSX, introduced=10.7) func fgetwln(_: UnsafeMutablePointer<FILE>, _: UnsafeMutablePointer<UInt>) -> UnsafeMutablePointer<wchar_t>
func fgetws(_: UnsafeMutablePointer<wchar_t>, _: Int32, _: UnsafeMutablePointer<FILE>) -> UnsafeMutablePointer<wchar_t>
struct fhandle {
  var fh_len: Int32
  var fh_data: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
}
typealias fhandle_t = fhandle
func fhopen(_: UnsafePointer<fhandle>, _: Int32) -> Int32
typealias file_t = COpaquePointer
func fileno(_: UnsafeMutablePointer<FILE>) -> Int32
func filesec_dup(_: filesec_t) -> filesec_t
func filesec_free(_: filesec_t)
func filesec_get_property(_: filesec_t, _: filesec_property_t, _: UnsafeMutablePointer<Void>) -> Int32
func filesec_init() -> filesec_t
struct filesec_property_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
func filesec_query_property(_: filesec_t, _: filesec_property_t, _: UnsafeMutablePointer<Int32>) -> Int32
func filesec_set_property(_: filesec_t, _: filesec_property_t, _: UnsafePointer<Void>) -> Int32
typealias filesec_t = COpaquePointer
@availability(OSX, introduced=10.6) func filesec_unset_property(_: filesec_t, _: filesec_property_t) -> Int32
var finalStage: Int {
  get {
    return
  }
}
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func finite(_: Double) -> Int32
typealias fixpt_t = UInt32
typealias float_t = Float
struct flock {
  var l_start: off_t
  var l_len: off_t
  var l_pid: pid_t
  var l_type: Int16
  var l_whence: Int16
}
func flock(_: Int32, _: Int32) -> Int32
func flockfile(_: UnsafeMutablePointer<FILE>)
struct flocktimeout {
  var fl: flock
  var timeout: timespec
}
func floor(_: Double) -> Double
func floorf(_: Float) -> Float
@availability(OSX, introduced=10.5) func fls(_: Int32) -> Int32
@availability(OSX, introduced=10.5) func flsl(_: Int) -> Int32
@availability(OSX, introduced=10.9) func flsll(_: Int64) -> Int32
func fma(_: Double, _: Double, _: Double) -> Double
func fmaf(_: Float, _: Float, _: Float) -> Float
func fmax(_: Double, _: Double) -> Double
func fmaxf(_: Float, _: Float) -> Float
func fmin(_: Double, _: Double) -> Double
func fminf(_: Float, _: Float) -> Float
func fmod(_: Double, _: Double) -> Double
func fmodf(_: Float, _: Float) -> Float
func fmtcheck(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafePointer<Int8>
func fmtmsg(_: Int, _: UnsafePointer<Int8>, _: Int32, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
func fnmatch(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: Int32) -> Int32
func fopen(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<FILE>
func fork() -> pid_t
func fpathconf(_: Int32, _: Int32) -> Int
typealias fpos_t = __darwin_off_t
func fpurge(_: UnsafeMutablePointer<FILE>) -> Int32
func fputc(_: Int32, _: UnsafeMutablePointer<FILE>) -> Int32
func fputs(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<FILE>) -> Int32
func fputwc(_: wchar_t, _: UnsafeMutablePointer<FILE>) -> wint_t
func fputws(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<FILE>) -> Int32
func fread(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: UnsafeMutablePointer<FILE>) -> UInt
func free(_: UnsafeMutablePointer<Void>)
func freeaddrinfo(_: UnsafeMutablePointer<addrinfo>)
func freehostent(_: UnsafeMutablePointer<hostent>)
func freopen(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<FILE>) -> UnsafeMutablePointer<FILE>
func frexp(_: Double, _: UnsafeMutablePointer<Int32>) -> Double
func frexpf(_: Float, _: UnsafeMutablePointer<Int32>) -> Float
typealias fsblkcnt_t = __darwin_fsblkcnt_t
func fsctl(_: UnsafePointer<Int8>, _: UInt, _: UnsafeMutablePointer<Void>, _: UInt32) -> Int32
func fseek(_: UnsafeMutablePointer<FILE>, _: Int, _: Int32) -> Int32
func fseeko(_: UnsafeMutablePointer<FILE>, _: off_t, _: Int32) -> Int32
@availability(OSX, introduced=10.6) func fsetattrlist(_: Int32, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UInt32) -> Int32
func fsetpos(_: UnsafeMutablePointer<FILE>, _: UnsafePointer<fpos_t>) -> Int32
typealias fsfilcnt_t = __darwin_fsfilcnt_t
typealias fsfile_type_t = UInt32
struct fsid {
  var val: (Int32, Int32)
}
typealias fsid_t = fsid
struct fsignatures {
  var fs_file_start: off_t
  var fs_blob_start: UnsafeMutablePointer<Void>
  var fs_blob_size: UInt
}
typealias fsignatures_t = fsignatures
struct fsobj_id {
  var fid_objno: UInt32
  var fid_generation: UInt32
}
typealias fsobj_id_t = fsobj_id
typealias fsobj_tag_t = UInt32
typealias fsobj_type_t = UInt32
struct fssearchblock {
  var returnattrs: UnsafeMutablePointer<attrlist>
  var returnbuffer: UnsafeMutablePointer<Void>
  var returnbuffersize: UInt
  var maxmatches: u_long
  var timelimit: timeval
  var searchparams1: UnsafeMutablePointer<Void>
  var sizeofsearchparams1: UInt
  var searchparams2: UnsafeMutablePointer<Void>
  var sizeofsearchparams2: UInt
  var searchattrs: attrlist
}
func fstat(_: Int32, _: UnsafeMutablePointer<stat>) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func fstat64(_: Int32, _: UnsafeMutablePointer<stat64>) -> Int32
@availability(OSX, introduced=10.10) func fstatat(_: Int32, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat>, _: Int32) -> Int32
func fstatfs(_: Int32, _: UnsafeMutablePointer<statfs>) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func fstatfs64(_: Int32, _: UnsafeMutablePointer<statfs64>) -> Int32
func fstatvfs(_: Int32, _: UnsafeMutablePointer<statvfs>) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func fstatx64_np(_: Int32, _: UnsafeMutablePointer<stat64>, _: filesec_t) -> Int32
func fstatx_np(_: Int32, _: UnsafeMutablePointer<stat>, _: filesec_t) -> Int32
struct fstore {
  var fst_flags: UInt32
  var fst_posmode: Int32
  var fst_offset: off_t
  var fst_length: off_t
  var fst_bytesalloc: off_t
}
typealias fstore_t = fstore
typealias fsvolid_t = UInt32
func fsync(_: Int32) -> Int32
@availability(OSX, introduced=10.8) func fsync_volume_np(_: Int32, _: Int32) -> Int32
func ftell(_: UnsafeMutablePointer<FILE>) -> Int
func ftello(_: UnsafeMutablePointer<FILE>) -> off_t
func ftime(_: UnsafeMutablePointer<timeb>) -> Int32
func ftok(_: UnsafePointer<Int8>, _: Int32) -> key_t
func ftruncate(_: Int32, _: off_t) -> Int32
func ftrylockfile(_: UnsafeMutablePointer<FILE>) -> Int32
func ftw(_: UnsafePointer<Int8>, _: CFunctionPointer<((UnsafePointer<Int8>, UnsafePointer<stat>, Int32) -> Int32)>, _: Int32) -> Int32
func funlockfile(_: UnsafeMutablePointer<FILE>)
func funopen(_: UnsafePointer<Void>, _: CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafeMutablePointer<Int8>, Int32) -> Int32)>, _: CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafePointer<Int8>, Int32) -> Int32)>, _: CFunctionPointer<((UnsafeMutablePointer<Void>, fpos_t, Int32) -> fpos_t)>, _: CFunctionPointer<((UnsafeMutablePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<FILE>
func futimes(_: Int32, _: UnsafePointer<timeval>) -> Int32
func fwide(_: UnsafeMutablePointer<FILE>, _: Int32) -> Int32
func fwrite(_: UnsafePointer<Void>, _: UInt, _: UInt, _: UnsafeMutablePointer<FILE>) -> UInt
func gai_strerror(_: Int32) -> UnsafePointer<Int8>
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func gamma(_: Double) -> Double
func gcvt(_: Double, _: Int32, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func get_dp_control_port(host: host_priv_t, contorl_port: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func getacdir(name: UnsafeMutablePointer<Int8>, len: Int32) -> Int32
func getacexpire(andflg: UnsafeMutablePointer<Int32>, age: UnsafeMutablePointer<time_t>, size: UnsafeMutablePointer<UInt>) -> Int32
func getacfilesz(size_val: UnsafeMutablePointer<UInt>) -> Int32
func getacflg(auditstr: UnsafeMutablePointer<Int8>, len: Int32) -> Int32
func getachost(auditstr: UnsafeMutablePointer<Int8>, len: UInt) -> Int32
func getacmin(min_val: UnsafeMutablePointer<Int32>) -> Int32
func getacna(auditstr: UnsafeMutablePointer<Int8>, len: Int32) -> Int32
func getacpol(auditstr: UnsafeMutablePointer<Int8>, len: UInt) -> Int32
func getacsflagsmask(which: UnsafePointer<Int8>, auditstr: UnsafeMutablePointer<Int8>, len: UInt) -> Int32
func getaddrinfo(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<addrinfo>, _: UnsafeMutablePointer<UnsafeMutablePointer<addrinfo>>) -> Int32
func getattrlist(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UInt32) -> Int32
@availability(OSX, introduced=10.10) func getattrlistat(_: Int32, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UInt) -> Int32
@availability(OSX, introduced=10.10) func getattrlistbulk(_: Int32, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UInt64) -> Int32
func getauclassent() -> UnsafeMutablePointer<au_class_ent>
func getauclassent_r(class_int: UnsafeMutablePointer<au_class_ent_t>) -> UnsafeMutablePointer<au_class_ent>
func getauclassnam(name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_class_ent>
func getauclassnam_r(class_int: UnsafeMutablePointer<au_class_ent_t>, name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_class_ent>
func getauclassnum(class_number: au_class_t) -> UnsafeMutablePointer<au_class_ent>
func getauclassnum_r(class_int: UnsafeMutablePointer<au_class_ent_t>, class_number: au_class_t) -> UnsafeMutablePointer<au_class_ent>
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func getaudit(_: UnsafeMutablePointer<auditinfo>) -> Int32
func getaudit_addr(_: UnsafeMutablePointer<auditinfo_addr>, _: Int32) -> Int32
func getauditflagsbin(auditstr: UnsafeMutablePointer<Int8>, masks: UnsafeMutablePointer<au_mask_t>) -> Int32
func getauditflagschar(auditstr: UnsafeMutablePointer<Int8>, masks: UnsafeMutablePointer<au_mask_t>, verbose: Int32) -> Int32
func getauevent() -> UnsafeMutablePointer<au_event_ent>
func getauevent_r(e: UnsafeMutablePointer<au_event_ent>) -> UnsafeMutablePointer<au_event_ent>
func getauevnam(name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_event_ent>
func getauevnam_r(e: UnsafeMutablePointer<au_event_ent>, name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_event_ent>
func getauevnonam(event_name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_event_t>
func getauevnonam_r(ev: UnsafeMutablePointer<au_event_t>, event_name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_event_t>
func getauevnum(event_number: au_event_t) -> UnsafeMutablePointer<au_event_ent>
func getauevnum_r(e: UnsafeMutablePointer<au_event_ent>, event_number: au_event_t) -> UnsafeMutablePointer<au_event_ent>
func getauid(_: UnsafeMutablePointer<au_id_t>) -> Int32
func getauuserent() -> UnsafeMutablePointer<au_user_ent>
func getauuserent_r(u: UnsafeMutablePointer<au_user_ent>) -> UnsafeMutablePointer<au_user_ent>
func getauusernam(name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_user_ent>
func getauusernam_r(u: UnsafeMutablePointer<au_user_ent>, name: UnsafePointer<Int8>) -> UnsafeMutablePointer<au_user_ent>
func getbsize(_: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<Int>) -> UnsafeMutablePointer<Int8>
func getc(_: UnsafeMutablePointer<FILE>) -> Int32
func getc_unlocked(_: UnsafeMutablePointer<FILE>) -> Int32
func getchar() -> Int32
func getchar_unlocked() -> Int32
func getcwd(_: UnsafeMutablePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
func getdate(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<tm>
var getdate_err: Int32
@availability(OSX, introduced=10.7) func getdelim(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UInt>, _: Int32, _: UnsafeMutablePointer<FILE>) -> Int
func getdirentries(_: Int32, _: UnsafeMutablePointer<Int8>, _: Int32, _: UnsafeMutablePointer<Int>) -> Int32
func getdirentriesattr(_: Int32, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UnsafeMutablePointer<UInt32>, _: UnsafeMutablePointer<UInt32>, _: UnsafeMutablePointer<UInt32>, _: UInt32) -> Int32
func getdomainname(_: UnsafeMutablePointer<Int8>, _: Int32) -> Int32
func getdtablesize() -> Int32
func getegid() -> gid_t
func getenv(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func geteuid() -> uid_t
func getfauditflags(usremask: UnsafeMutablePointer<au_mask_t>, usrdmask: UnsafeMutablePointer<au_mask_t>, lastmask: UnsafeMutablePointer<au_mask_t>) -> Int32
func getfh(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<fhandle_t>) -> Int32
func getfsstat(_: UnsafeMutablePointer<statfs>, _: Int32, _: Int32) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func getfsstat64(_: UnsafeMutablePointer<statfs64>, _: Int32, _: Int32) -> Int32
func getgid() -> gid_t
func getgrent() -> UnsafeMutablePointer<group>
func getgrgid(_: gid_t) -> UnsafeMutablePointer<group>
func getgrgid_r(_: gid_t, _: UnsafeMutablePointer<group>, _: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafeMutablePointer<UnsafeMutablePointer<group>>) -> Int32
func getgrnam(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<group>
func getgrnam_r(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<group>, _: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafeMutablePointer<UnsafeMutablePointer<group>>) -> Int32
func getgrouplist(_: UnsafePointer<Int8>, _: Int32, _: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<Int32>) -> Int32
func getgroups(_: Int32, _: UnsafeMutablePointer<gid_t>) -> Int32
func getgruuid(_: UnsafeMutablePointer<UInt8>) -> UnsafeMutablePointer<group>
func getgruuid_r(_: UnsafeMutablePointer<UInt8>, _: UnsafeMutablePointer<group>, _: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafeMutablePointer<UnsafeMutablePointer<group>>) -> Int32
func gethostbyaddr(_: UnsafePointer<Void>, _: socklen_t, _: Int32) -> UnsafeMutablePointer<hostent>
func gethostbyname(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<hostent>
func gethostbyname2(_: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<hostent>
func gethostent() -> UnsafeMutablePointer<hostent>
func gethostid() -> Int
func gethostname(_: UnsafeMutablePointer<Int8>, _: UInt) -> Int32
@availability(OSX, introduced=10.5) func gethostuuid(_: UnsafeMutablePointer<UInt8>, _: UnsafePointer<timespec>) -> Int32
@availability(OSX, introduced=10.5) func getiopolicy_np(_: Int32, _: Int32) -> Int32
func getipnodebyaddr(_: UnsafePointer<Void>, _: UInt, _: Int32, _: UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<hostent>
func getipnodebyname(_: UnsafePointer<Int8>, _: Int32, _: Int32, _: UnsafeMutablePointer<Int32>) -> UnsafeMutablePointer<hostent>
@availability(OSX, introduced=10.7) func getipv4sourcefilter(_: Int32, _: in_addr, _: in_addr, _: UnsafeMutablePointer<UInt32>, _: UnsafeMutablePointer<UInt32>, _: UnsafeMutablePointer<in_addr>) -> Int32
func getitimer(_: Int32, _: UnsafeMutablePointer<itimerval>) -> Int32
@availability(OSX, introduced=10.5) func getlastlogx(_: uid_t, _: UnsafeMutablePointer<lastlogx>) -> UnsafeMutablePointer<lastlogx>
@availability(OSX, introduced=10.5) func getlastlogxbyname(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<lastlogx>) -> UnsafeMutablePointer<lastlogx>
func getlcid(pid: pid_t) -> pid_t
@availability(OSX, introduced=10.7) func getline(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UInt>, _: UnsafeMutablePointer<FILE>) -> Int
func getloadavg(_: UnsafeMutablePointer<Double>, _: Int32) -> Int32
func getlogin() -> UnsafeMutablePointer<Int8>
func getlogin_r(_: UnsafeMutablePointer<Int8>, _: UInt) -> Int32
func getmntinfo(_: UnsafeMutablePointer<UnsafeMutablePointer<statfs>>, _: Int32) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func getmntinfo64(_: UnsafeMutablePointer<UnsafeMutablePointer<statfs64>>, _: Int32) -> Int32
func getmode(_: UnsafePointer<Void>, _: mode_t) -> mode_t
func getnameinfo(_: UnsafePointer<sockaddr>, _: socklen_t, _: UnsafeMutablePointer<Int8>, _: socklen_t, _: UnsafeMutablePointer<Int8>, _: socklen_t, _: Int32) -> Int32
func getnetbyaddr(_: UInt32, _: Int32) -> UnsafeMutablePointer<netent>
func getnetbyname(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<netent>
func getnetent() -> UnsafeMutablePointer<netent>
func getnetgrent(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32
func getopt(_: Int32, _: UnsafePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<Int8>) -> Int32
func getopt_long(_: Int32, _: UnsafePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<Int8>, _: UnsafePointer<option>, _: UnsafeMutablePointer<Int32>) -> Int32
func getopt_long_only(_: Int32, _: UnsafePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<Int8>, _: UnsafePointer<option>, _: UnsafeMutablePointer<Int32>) -> Int32
func getpagesize() -> Int32
func getpass(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func getpeereid(_: Int32, _: UnsafeMutablePointer<uid_t>, _: UnsafeMutablePointer<gid_t>) -> Int32
func getpeername(_: Int32, _: UnsafeMutablePointer<sockaddr>, _: UnsafeMutablePointer<socklen_t>) -> Int32
func getpgid(_: pid_t) -> pid_t
func getpgrp() -> pid_t
func getpid() -> pid_t
func getppid() -> pid_t
func getpriority(_: Int32, _: id_t) -> Int32
func getprogname() -> UnsafePointer<Int8>
func getprotobyname(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<protoent>
func getprotobynumber(_: Int32) -> UnsafeMutablePointer<protoent>
func getprotoent() -> UnsafeMutablePointer<protoent>
func getpwent() -> UnsafeMutablePointer<passwd>
func getpwnam(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<passwd>
func getpwnam_r(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<passwd>, _: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafeMutablePointer<UnsafeMutablePointer<passwd>>) -> Int32
func getpwuid(_: uid_t) -> UnsafeMutablePointer<passwd>
func getpwuid_r(_: uid_t, _: UnsafeMutablePointer<passwd>, _: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafeMutablePointer<UnsafeMutablePointer<passwd>>) -> Int32
func getpwuuid(_: UnsafeMutablePointer<UInt8>) -> UnsafeMutablePointer<passwd>
func getpwuuid_r(_: UnsafeMutablePointer<UInt8>, _: UnsafeMutablePointer<passwd>, _: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafeMutablePointer<UnsafeMutablePointer<passwd>>) -> Int32
func getrlimit(_: Int32, _: UnsafeMutablePointer<rlimit>) -> Int32
func getrpcbyname(name: UnsafePointer<Int8>) -> UnsafeMutablePointer<rpcent>
func getrpcbynumber(number: Int32) -> UnsafeMutablePointer<rpcent>
func getrpcent() -> UnsafeMutablePointer<rpcent>
func getrusage(_: Int32, _: UnsafeMutablePointer<rusage>) -> Int32
func gets(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func getservbyname(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<servent>
func getservbyport(_: Int32, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<servent>
func getservent() -> UnsafeMutablePointer<servent>
func getsgroups_np(_: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<UInt8>) -> Int32
func getsid(_: pid_t) -> pid_t
func getsockname(_: Int32, _: UnsafeMutablePointer<sockaddr>, _: UnsafeMutablePointer<socklen_t>) -> Int32
func getsockopt(_: Int32, _: Int32, _: Int32, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<socklen_t>) -> Int32
@availability(OSX, introduced=10.7) func getsourcefilter(_: Int32, _: UInt32, _: UnsafeMutablePointer<sockaddr>, _: socklen_t, _: UnsafeMutablePointer<UInt32>, _: UnsafeMutablePointer<UInt32>, _: UnsafeMutablePointer<sockaddr_storage>) -> Int32
func getsubopt(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Int32
func gettimeofday(_: UnsafeMutablePointer<timeval>, _: UnsafeMutablePointer<Void>) -> Int32
func getuid() -> uid_t
func getusershell() -> UnsafeMutablePointer<Int8>
@availability(OSX, unavailable, introduced=10.5, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func getutmp(_: UnsafePointer<utmpx>, _: COpaquePointer)
@availability(OSX, unavailable, introduced=10.5, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func getutmpx(_: COpaquePointer, _: UnsafeMutablePointer<utmpx>)
func getutxent() -> UnsafeMutablePointer<utmpx>
@availability(OSX, introduced=10.5) func getutxent_wtmp() -> UnsafeMutablePointer<utmpx>
func getutxid(_: UnsafePointer<utmpx>) -> UnsafeMutablePointer<utmpx>
func getutxline(_: UnsafePointer<utmpx>) -> UnsafeMutablePointer<utmpx>
func getvfsbyname(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<vfsconf>) -> Int32
func getw(_: UnsafeMutablePointer<FILE>) -> Int32
func getwc(_: UnsafeMutablePointer<FILE>) -> wint_t
func getwchar() -> wint_t
func getwd(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func getwgroups_np(_: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<UInt8>) -> Int32
typealias gid_t = __darwin_gid_t
func glob(_: UnsafePointer<Int8>, _: Int32, _: CFunctionPointer<((UnsafePointer<Int8>, Int32) -> Int32)>, _: UnsafeMutablePointer<glob_t>) -> Int32
@availability(OSX, introduced=10.6) func glob_b(_: UnsafePointer<Int8>, _: Int32, _: ((UnsafePointer<Int8>, Int32) -> Int32)!, _: UnsafeMutablePointer<glob_t>) -> Int32
struct glob_t {
  var gl_pathc: UInt
  var gl_matchc: Int32
  var gl_offs: UInt
  var gl_flags: Int32
  var gl_pathv: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var gl_closedir: CFunctionPointer<((UnsafeMutablePointer<Void>) -> Void)>
  var gl_readdir: CFunctionPointer<((UnsafeMutablePointer<Void>) -> UnsafeMutablePointer<dirent>)>
  var gl_opendir: CFunctionPointer<((UnsafePointer<Int8>) -> UnsafeMutablePointer<Void>)>
  var gl_lstat: CFunctionPointer<((UnsafePointer<Int8>, UnsafeMutablePointer<stat>) -> Int32)>
  var gl_stat: CFunctionPointer<((UnsafePointer<Int8>, UnsafeMutablePointer<stat>) -> Int32)>
}
func globfree(_: UnsafeMutablePointer<glob_t>)
struct gmon_data {
  var type: UInt32
  var size: UInt32
}
typealias gmon_data_t = gmon_data
struct gmonhdr {
  var lpc: UInt32
  var hpc: UInt32
  var ncnt: UInt32
  var version: Int32
  var profrate: Int32
  var spare: (Int32, Int32, Int32)
}
struct gmonhdr_64 {
  var lpc: UInt64
  var hpc: UInt64
  var ncnt: UInt32
  var version: Int32
  var profrate: Int32
  var spare: (Int32, Int32, Int32)
}
typealias gmonhdr_t = gmonhdr_64
struct gmonparam {
  var state: Int32
  var kcount: UnsafeMutablePointer<u_short>
  var kcountsize: u_long
  var froms: UnsafeMutablePointer<u_short>
  var fromssize: u_long
  var tos: UnsafeMutablePointer<tostruct_t>
  var tossize: u_long
  var tolimit: Int
  var lowpc: u_long
  var highpc: u_long
  var textsize: u_long
  var hashfraction: u_long
}
func gmtime(_: UnsafePointer<time_t>) -> UnsafeMutablePointer<tm>
func gmtime_r(_: UnsafePointer<time_t>, _: UnsafeMutablePointer<tm>) -> UnsafeMutablePointer<tm>
struct gpu_energy_data {
  var task_gpu_utilisation: UInt64
  var task_gpu_stat_reserved0: UInt64
  var task_gpu_stat_reserved1: UInt64
  var task_gpu_stat_reserved2: UInt64
}
typealias gpu_energy_data_t = UnsafeMutablePointer<gpu_energy_data>
func grantpt(_: Int32) -> Int32
struct group {
  var gr_name: UnsafeMutablePointer<Int8>
  var gr_passwd: UnsafeMutablePointer<Int8>
  var gr_gid: gid_t
  var gr_mem: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
}
func group_from_gid(_: gid_t, _: Int32) -> UnsafeMutablePointer<Int8>
struct group_req {
  var gr_interface: UInt32
  var gr_group: sockaddr_storage
}
struct group_source_req {
  var gsr_interface: UInt32
  var gsr_group: sockaddr_storage
  var gsr_source: sockaddr_storage
}
struct guid_t {
  var g_guid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
}
var h_errno: Int32
struct hash_info_bucket {
  var hib_count: natural_t
}
typealias hash_info_bucket_array_t = UnsafeMutablePointer<hash_info_bucket_t>
typealias hash_info_bucket_t = hash_info_bucket
func hcreate(_: UInt) -> Int32
func hdestroy()
func heapsort(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> Int32
@availability(OSX, introduced=10.6) func heapsort_b(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: ((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)!) -> Int32
func herror(_: UnsafePointer<Int8>)
func hfs_addconverter(kmod_id: Int32, encoding: UInt32, get_unicode: hfs_to_unicode_func_t, get_hfsname: unicode_to_hfs_func_t) -> Int32
struct hfs_mount_args {
  var fspec: UnsafeMutablePointer<Int8>
  var hfs_uid: uid_t
  var hfs_gid: gid_t
  var hfs_mask: mode_t
  var hfs_encoding: UInt32
  var hfs_timezone: timezone
  var flags: Int32
  var journal_tbuffer_size: Int32
  var journal_flags: Int32
  var journal_disable: Int32
}
func hfs_remconverter(kmod_id: Int32, encoding: UInt32) -> Int32
typealias hfs_to_unicode_func_t = CFunctionPointer<((UnsafePointer<UInt8>, UnsafeMutablePointer<UniChar>, UInt32, UnsafeMutablePointer<UInt32>) -> Int32)>
struct host_basic_info {
  var max_cpus: integer_t
  var avail_cpus: integer_t
  var memory_size: natural_t
  var cpu_type: cpu_type_t
  var cpu_subtype: cpu_subtype_t
  var cpu_threadtype: cpu_threadtype_t
  var physical_cpu: integer_t
  var physical_cpu_max: integer_t
  var logical_cpu: integer_t
  var logical_cpu_max: integer_t
  var max_mem: UInt64
}
typealias host_basic_info_data_t = host_basic_info
typealias host_basic_info_t = UnsafeMutablePointer<host_basic_info>
struct host_cpu_load_info {
  var cpu_ticks: (natural_t, natural_t, natural_t, natural_t)
}
typealias host_cpu_load_info_data_t = host_cpu_load_info
typealias host_cpu_load_info_t = UnsafeMutablePointer<host_cpu_load_info>
func host_create_mach_voucher(host: host_t, recipes: mach_voucher_attr_raw_recipe_array_t, recipesCnt: mach_msg_type_number_t, voucher: UnsafeMutablePointer<ipc_voucher_t>) -> kern_return_t
func host_default_memory_manager(host_priv: host_priv_t, default_manager: UnsafeMutablePointer<memory_object_default_t>, cluster_size: memory_object_cluster_size_t) -> kern_return_t
typealias host_flavor_t = integer_t
func host_get_UNDServer(host: host_priv_t, server: UnsafeMutablePointer<UNDServerRef>) -> kern_return_t
func host_get_boot_info(host_priv: host_priv_t, boot_info: UnsafeMutablePointer<Int8>) -> kern_return_t
func host_get_clock_control(host_priv: host_priv_t, clock_id: clock_id_t, clock_ctrl: UnsafeMutablePointer<clock_ctrl_t>) -> kern_return_t
func host_get_clock_service(host: host_t, clock_id: clock_id_t, clock_serv: UnsafeMutablePointer<clock_serv_t>) -> kern_return_t
func host_get_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: UnsafeMutablePointer<mach_msg_type_number_t>, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) -> kern_return_t
func host_get_io_master(host: host_t, io_master: UnsafeMutablePointer<io_master_t>) -> kern_return_t
func host_get_special_port(host_priv: host_priv_t, node: Int32, which: Int32, port: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func host_info(host: host_t, flavor: host_flavor_t, host_info_out: host_info_t, host_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_info64_t = UnsafeMutablePointer<integer_t>
typealias host_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias host_info_t = UnsafeMutablePointer<integer_t>
func host_kernel_version(host: host_t, kernel_version: UnsafeMutablePointer<Int8>) -> kern_return_t
struct host_load_info {
  var avenrun: (integer_t, integer_t, integer_t)
  var mach_factor: (integer_t, integer_t, integer_t)
}
typealias host_load_info_data_t = host_load_info
typealias host_load_info_t = UnsafeMutablePointer<host_load_info>
func host_lockgroup_info(host: host_t, lockgroup_info: UnsafeMutablePointer<lockgroup_info_array_t>, lockgroup_infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_name_port_t = host_t
typealias host_name_t = host_t
func host_page_size(_: host_t, _: UnsafeMutablePointer<vm_size_t>) -> kern_return_t
struct host_priority_info {
  var kernel_priority: integer_t
  var system_priority: integer_t
  var server_priority: integer_t
  var user_priority: integer_t
  var depress_priority: integer_t
  var idle_priority: integer_t
  var minimum_priority: integer_t
  var maximum_priority: integer_t
}
typealias host_priority_info_data_t = host_priority_info
typealias host_priority_info_t = UnsafeMutablePointer<host_priority_info>
func host_priv_statistics(host_priv: host_priv_t, flavor: host_flavor_t, host_info_out: host_info_t, host_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_priv_t = mach_port_t
func host_processor_info(host: host_t, flavor: processor_flavor_t, out_processor_count: UnsafeMutablePointer<natural_t>, out_processor_info: UnsafeMutablePointer<processor_info_array_t>, out_processor_infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processor_set_priv(host_priv: host_priv_t, set_name: processor_set_name_t, set: UnsafeMutablePointer<processor_set_t>) -> kern_return_t
func host_processor_sets(host_priv: host_priv_t, processor_sets: UnsafeMutablePointer<processor_set_name_array_t>, processor_setsCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_processors(host_priv: host_priv_t, out_processor_list: UnsafeMutablePointer<processor_array_t>, out_processor_listCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias host_purgable_info_data_t = vm_purgeable_info
typealias host_purgable_info_t = UnsafeMutablePointer<vm_purgeable_info>
func host_reboot(host_priv: host_priv_t, options: Int32) -> kern_return_t
func host_register_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, new_key: UnsafeMutablePointer<mach_voucher_attr_key_t>, new_attr_control: UnsafeMutablePointer<ipc_voucher_attr_control_t>) -> kern_return_t
func host_register_well_known_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, key: mach_voucher_attr_key_t, new_attr_control: UnsafeMutablePointer<ipc_voucher_attr_control_t>) -> kern_return_t
func host_request_notification(host: host_t, notify_type: host_flavor_t, notify_port: mach_port_t) -> kern_return_t
struct host_sched_info {
  var min_timeout: integer_t
  var min_quantum: integer_t
}
typealias host_sched_info_data_t = host_sched_info
typealias host_sched_info_t = UnsafeMutablePointer<host_sched_info>
func host_security_create_task_token(host_security: host_security_t, parent_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t, ledgers: ledger_array_t, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: UnsafeMutablePointer<task_t>) -> kern_return_t
func host_security_set_task_token(host_security: host_security_t, target_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t) -> kern_return_t
typealias host_security_t = mach_port_t
func host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t
func host_set_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func host_set_special_port(host_priv: host_priv_t, which: Int32, port: mach_port_t) -> kern_return_t
func host_statistics(host_priv: host_t, flavor: host_flavor_t, host_info_out: host_info_t, host_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_statistics64(host_priv: host_t, flavor: host_flavor_t, host_info64_out: host_info64_t, host_info64_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_swap_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: exception_mask_array_t, masksCnt: UnsafeMutablePointer<mach_msg_type_number_t>, old_handlerss: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) -> kern_return_t
typealias host_t = mach_port_t
func host_virtual_physical_table_info(host: host_t, info: UnsafeMutablePointer<hash_info_bucket_array_t>, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func host_zone_info(host: host_priv_t, names: UnsafeMutablePointer<zone_name_array_t>, namesCnt: UnsafeMutablePointer<mach_msg_type_number_t>, info: UnsafeMutablePointer<zone_info_array_t>, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct hostent {
  var h_name: UnsafeMutablePointer<Int8>
  var h_aliases: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var h_addrtype: Int32
  var h_length: Int32
  var h_addr_list: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
}
func hsearch(_: ENTRY, _: ACTION) -> UnsafeMutablePointer<ENTRY>
func hstrerror(_: Int32) -> UnsafePointer<Int8>
func hypot(_: Double, _: Double) -> Double
func hypotf(_: Float, _: Float) -> Float
typealias i386_exception_state_t = __darwin_i386_exception_state
typealias i386_float_state_t = __darwin_i386_float_state
typealias i386_thread_state_t = __darwin_i386_thread_state
func iconv(_: iconv_t, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UInt>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UInt>) -> UInt
func iconv_canonicalize(name: UnsafePointer<Int8>) -> UnsafePointer<Int8>
func iconv_close(_: iconv_t) -> Int32
struct iconv_fallbacks {
  var mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback
  var uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback
  var mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback
  var wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback
  var data: UnsafeMutablePointer<Void>
}
struct iconv_hooks {
  var uc_hook: iconv_unicode_char_hook
  var wc_hook: iconv_wide_char_hook
  var data: UnsafeMutablePointer<Void>
}
func iconv_open(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> iconv_t
typealias iconv_t = UnsafeMutablePointer<Void>
typealias iconv_unicode_char_hook = CFunctionPointer<((UInt32, UnsafeMutablePointer<Void>) -> Void)>
typealias iconv_unicode_mb_to_uc_fallback = CFunctionPointer<((UnsafePointer<Int8>, UInt, CFunctionPointer<((UnsafePointer<UInt32>, UInt, UnsafeMutablePointer<Void>) -> Void)>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>) -> Void)>
typealias iconv_unicode_uc_to_mb_fallback = CFunctionPointer<((UInt32, CFunctionPointer<((UnsafePointer<Int8>, UInt, UnsafeMutablePointer<Void>) -> Void)>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>) -> Void)>
typealias iconv_wchar_mb_to_wc_fallback = CFunctionPointer<((UnsafePointer<Int8>, UInt, CFunctionPointer<((UnsafePointer<wchar_t>, UInt, UnsafeMutablePointer<Void>) -> Void)>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>) -> Void)>
typealias iconv_wchar_wc_to_mb_fallback = CFunctionPointer<((wchar_t, CFunctionPointer<((UnsafePointer<Int8>, UInt, UnsafeMutablePointer<Void>) -> Void)>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>) -> Void)>
typealias iconv_wide_char_hook = CFunctionPointer<((wchar_t, UnsafeMutablePointer<Void>) -> Void)>
func iconvctl(_: iconv_t, _: Int32, _: UnsafeMutablePointer<Void>) -> Int32
func iconvlist(_: CFunctionPointer<((UInt32, UnsafePointer<UnsafePointer<Int8>>, UnsafeMutablePointer<Void>) -> Int32)>, _: UnsafeMutablePointer<Void>)
typealias id_t = __darwin_id_t
struct idtype_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias if_clone_t = COpaquePointer
struct if_clonereq {
  var ifcr_total: Int32
  var ifcr_count: Int32
  var ifcr_buffer: UnsafeMutablePointer<Int8>
}
struct if_data {
  var ifi_type: u_char
  var ifi_typelen: u_char
  var ifi_physical: u_char
  var ifi_addrlen: u_char
  var ifi_hdrlen: u_char
  var ifi_recvquota: u_char
  var ifi_xmitquota: u_char
  var ifi_unused1: u_char
  var ifi_mtu: UInt32
  var ifi_metric: UInt32
  var ifi_baudrate: UInt32
  var ifi_ipackets: UInt32
  var ifi_ierrors: UInt32
  var ifi_opackets: UInt32
  var ifi_oerrors: UInt32
  var ifi_collisions: UInt32
  var ifi_ibytes: UInt32
  var ifi_obytes: UInt32
  var ifi_imcasts: UInt32
  var ifi_omcasts: UInt32
  var ifi_iqdrops: UInt32
  var ifi_noproto: UInt32
  var ifi_recvtiming: UInt32
  var ifi_xmittiming: UInt32
  var ifi_lastchange: timeval32
  var ifi_unused2: UInt32
  var ifi_hwassist: UInt32
  var ifi_reserved1: UInt32
  var ifi_reserved2: UInt32
}
struct if_data64 {
  var ifi_type: u_char
  var ifi_typelen: u_char
  var ifi_physical: u_char
  var ifi_addrlen: u_char
  var ifi_hdrlen: u_char
  var ifi_recvquota: u_char
  var ifi_xmitquota: u_char
  var ifi_unused1: u_char
  var ifi_mtu: UInt32
  var ifi_metric: UInt32
  var ifi_baudrate: UInt64
  var ifi_ipackets: UInt64
  var ifi_ierrors: UInt64
  var ifi_opackets: UInt64
  var ifi_oerrors: UInt64
  var ifi_collisions: UInt64
  var ifi_ibytes: UInt64
  var ifi_obytes: UInt64
  var ifi_imcasts: UInt64
  var ifi_omcasts: UInt64
  var ifi_iqdrops: UInt64
  var ifi_noproto: UInt64
  var ifi_recvtiming: UInt32
  var ifi_xmittiming: UInt32
  var ifi_lastchange: timeval32
}
func if_freenameindex(_: UnsafeMutablePointer<if_nameindex>)
func if_indextoname(_: UInt32, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
struct if_msghdr {
  var ifm_msglen: UInt16
  var ifm_version: UInt8
  var ifm_type: UInt8
  var ifm_addrs: Int32
  var ifm_flags: Int32
  var ifm_index: UInt16
  var ifm_data: if_data
}
struct if_msghdr2 {
  var ifm_msglen: u_short
  var ifm_version: u_char
  var ifm_type: u_char
  var ifm_addrs: Int32
  var ifm_flags: Int32
  var ifm_index: u_short
  var ifm_snd_len: Int32
  var ifm_snd_maxlen: Int32
  var ifm_snd_drops: Int32
  var ifm_timer: Int32
  var ifm_data: if_data64
}
func if_nameindex() -> UnsafeMutablePointer<if_nameindex>
struct if_nameindex {
  var if_index: UInt32
  var if_name: UnsafeMutablePointer<Int8>
}
func if_nametoindex(_: UnsafePointer<Int8>) -> UInt32
struct ifa_msghdr {
  var ifam_msglen: UInt16
  var ifam_version: UInt8
  var ifam_type: UInt8
  var ifam_addrs: Int32
  var ifam_flags: Int32
  var ifam_index: UInt16
  var ifam_metric: Int32
}
typealias ifaddr_t = COpaquePointer
struct ifaliasreq {
  var ifra_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ifra_addr: sockaddr
  var ifra_broadaddr: sockaddr
  var ifra_mask: sockaddr
}
struct ifconf {
  var ifc_len: Int32
}
struct ifdevmtu {
  var ifdm_current: Int32
  var ifdm_min: Int32
  var ifdm_max: Int32
}
struct ifdrv {
  var ifd_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ifd_cmd: UInt
  var ifd_len: UInt
  var ifd_data: UnsafeMutablePointer<Void>
}
struct ifkpi {
  var ifk_module_id: UInt32
  var ifk_type: UInt32
}
struct ifma_msghdr {
  var ifmam_msglen: UInt16
  var ifmam_version: UInt8
  var ifmam_type: UInt8
  var ifmam_addrs: Int32
  var ifmam_flags: Int32
  var ifmam_index: UInt16
}
struct ifma_msghdr2 {
  var ifmam_msglen: u_short
  var ifmam_version: u_char
  var ifmam_type: u_char
  var ifmam_addrs: Int32
  var ifmam_flags: Int32
  var ifmam_index: u_short
  var ifmam_refcount: Int32
}
struct ifmedia_description {
  var ifmt_word: Int32
  var ifmt_string: UnsafePointer<Int8>
}
struct ifmediareq {
  var ifm_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ifm_current: Int32
  var ifm_mask: Int32
  var ifm_status: Int32
  var ifm_active: Int32
  var ifm_count: Int32
  var ifm_ulist: UnsafeMutablePointer<Int32>
}
typealias ifmultiaddr_t = COpaquePointer
typealias ifnet_t = COpaquePointer
struct ifqueue {
  var ifq_head: UnsafeMutablePointer<Void>
  var ifq_tail: UnsafeMutablePointer<Void>
  var ifq_len: Int32
  var ifq_maxlen: Int32
  var ifq_drops: Int32
}
struct ifreq {
  var ifr_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct ifstat {
  var ifs_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ascii: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
func ilogb(_: Double) -> Int32
func ilogbf(_: Float) -> Int32
@availability(OSX, introduced=10.4) func imaxabs(j: intmax_t) -> intmax_t
@availability(OSX, introduced=10.4) func imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t
struct imaxdiv_t {
  var quot: intmax_t
  var rem: intmax_t
}
struct in4in6_addr {
  var i46a_pad32: (UInt32, UInt32, UInt32)
  var i46a_addr4: in_addr
}
struct in6_addr {
}
struct in6_pktinfo {
  var ipi6_addr: in6_addr
  var ipi6_ifindex: UInt32
}
let in6addr_any: in6_addr
let in6addr_linklocal_allnodes: in6_addr
let in6addr_linklocal_allrouters: in6_addr
let in6addr_linklocal_allv2routers: in6_addr
let in6addr_loopback: in6_addr
let in6addr_nodelocal_allnodes: in6_addr
struct in_addr {
  var s_addr: in_addr_t
}
typealias in_addr_t = __uint32_t
struct in_pktinfo {
  var ipi_ifindex: UInt32
  var ipi_spec_dst: in_addr
  var ipi_addr: in_addr
}
typealias in_port_t = __uint16_t
struct in_sockinfo {
  var insi_fport: Int32
  var insi_lport: Int32
  var insi_gencnt: UInt64
  var insi_flags: UInt32
  var insi_flow: UInt32
  var insi_vflag: UInt8
  var insi_ip_ttl: UInt8
  var rfu_1: UInt32
}
func index(_: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<Int8>
func inet6_opt_append(_: UnsafeMutablePointer<Void>, _: socklen_t, _: Int32, _: __uint8_t, _: socklen_t, _: __uint8_t, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32
func inet6_opt_find(_: UnsafeMutablePointer<Void>, _: socklen_t, _: Int32, _: __uint8_t, _: UnsafeMutablePointer<socklen_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32
func inet6_opt_finish(_: UnsafeMutablePointer<Void>, _: socklen_t, _: Int32) -> Int32
func inet6_opt_get_val(_: UnsafeMutablePointer<Void>, _: Int32, _: UnsafeMutablePointer<Void>, _: socklen_t) -> Int32
func inet6_opt_init(_: UnsafeMutablePointer<Void>, _: socklen_t) -> Int32
func inet6_opt_next(_: UnsafeMutablePointer<Void>, _: socklen_t, _: Int32, _: UnsafeMutablePointer<__uint8_t>, _: UnsafeMutablePointer<socklen_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32
func inet6_opt_set_val(_: UnsafeMutablePointer<Void>, _: Int32, _: UnsafeMutablePointer<Void>, _: socklen_t) -> Int32
func inet6_option_alloc(_: UnsafeMutablePointer<cmsghdr>, _: Int32, _: Int32, _: Int32) -> UnsafeMutablePointer<__uint8_t>
func inet6_option_append(_: UnsafeMutablePointer<cmsghdr>, _: UnsafePointer<__uint8_t>, _: Int32, _: Int32) -> Int32
func inet6_option_find(_: UnsafePointer<cmsghdr>, _: UnsafeMutablePointer<UnsafeMutablePointer<__uint8_t>>, _: Int32) -> Int32
func inet6_option_init(_: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<UnsafeMutablePointer<cmsghdr>>, _: Int32) -> Int32
func inet6_option_next(_: UnsafePointer<cmsghdr>, _: UnsafeMutablePointer<UnsafeMutablePointer<__uint8_t>>) -> Int32
func inet6_option_space(_: Int32) -> Int32
func inet6_rth_add(_: UnsafeMutablePointer<Void>, _: UnsafePointer<in6_addr>) -> Int32
func inet6_rth_getaddr(_: UnsafePointer<Void>, _: Int32) -> UnsafeMutablePointer<in6_addr>
func inet6_rth_init(_: UnsafeMutablePointer<Void>, _: socklen_t, _: Int32, _: Int32) -> UnsafeMutablePointer<Void>
func inet6_rth_reverse(_: UnsafePointer<Void>, _: UnsafeMutablePointer<Void>) -> Int32
func inet6_rth_segments(_: UnsafePointer<Void>) -> Int32
func inet6_rth_space(_: Int32, _: Int32) -> socklen_t
func inet6_rthdr_add(_: UnsafeMutablePointer<cmsghdr>, _: UnsafePointer<in6_addr>, _: UInt32) -> Int32
func inet6_rthdr_getaddr(_: UnsafeMutablePointer<cmsghdr>, _: Int32) -> UnsafeMutablePointer<in6_addr>
func inet6_rthdr_getflags(_: UnsafePointer<cmsghdr>, _: Int32) -> Int32
func inet6_rthdr_init(_: UnsafeMutablePointer<Void>, _: Int32) -> UnsafeMutablePointer<cmsghdr>
func inet6_rthdr_lasthop(_: UnsafeMutablePointer<cmsghdr>, _: UInt32) -> Int32
func inet6_rthdr_segments(_: UnsafePointer<cmsghdr>) -> Int32
func inet6_rthdr_space(_: Int32, _: Int32) -> UInt
func inet_addr(_: UnsafePointer<Int8>) -> in_addr_t
func inet_aton(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<in_addr>) -> Int32
func inet_lnaof(_: in_addr) -> in_addr_t
func inet_makeaddr(_: in_addr_t, _: in_addr_t) -> in_addr
func inet_net_ntop(_: Int32, _: UnsafePointer<Void>, _: Int32, _: UnsafeMutablePointer<Int8>, _: __darwin_size_t) -> UnsafeMutablePointer<Int8>
func inet_net_pton(_: Int32, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>, _: __darwin_size_t) -> Int32
func inet_neta(_: in_addr_t, _: UnsafeMutablePointer<Int8>, _: __darwin_size_t) -> UnsafeMutablePointer<Int8>
func inet_netof(_: in_addr) -> in_addr_t
func inet_network(_: UnsafePointer<Int8>) -> in_addr_t
func inet_nsap_addr(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UInt8>, _: Int32) -> UInt32
func inet_nsap_ntoa(_: Int32, _: UnsafePointer<UInt8>, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func inet_ntoa(_: in_addr) -> UnsafeMutablePointer<Int8>
func inet_ntop(_: Int32, _: UnsafePointer<Void>, _: UnsafeMutablePointer<Int8>, _: socklen_t) -> UnsafePointer<Int8>
func inet_pton(_: Int32, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>) -> Int32
func initgroups(_: UnsafePointer<Int8>, _: Int32) -> Int32
func initstate(_: UInt32, _: UnsafeMutablePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
func innetgr(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
typealias ino64_t = __darwin_ino64_t
typealias ino_t = __darwin_ino_t
func insque(_: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>)
typealias int_fast16_t = Int16
typealias int_fast32_t = Int32
typealias int_fast64_t = Int64
typealias int_fast8_t = Int8
typealias int_least16_t = Int16
typealias int_least32_t = Int32
typealias int_least64_t = Int64
typealias int_least8_t = Int8
typealias integer_t = Int32
typealias interface_filter_t = COpaquePointer
typealias intmax_t = Int
typealias intptr_t = Int
typealias io_buf_ptr_t = UnsafeMutablePointer<Int8>
typealias io_master_t = mach_port_t
struct io_stat_entry {
  var count: UInt64
  var size: UInt64
}
struct io_stat_info {
  var disk_reads: io_stat_entry
  var io_priority: (io_stat_entry, io_stat_entry, io_stat_entry, io_stat_entry)
  var paging: io_stat_entry
  var metadata: io_stat_entry
  var total_io: io_stat_entry
}
typealias io_stat_info_t = UnsafeMutablePointer<io_stat_info>
struct iovec {
  var iov_base: UnsafeMutablePointer<Void>
  var iov_len: UInt
}
struct ip6_mtuinfo {
  var ip6m_addr: sockaddr_in6
  var ip6m_mtu: UInt32
}
struct ip_mreq {
  var imr_multiaddr: in_addr
  var imr_interface: in_addr
}
struct ip_mreq_source {
  var imr_multiaddr: in_addr
  var imr_sourceaddr: in_addr
  var imr_interface: in_addr
}
struct ip_mreqn {
  var imr_multiaddr: in_addr
  var imr_address: in_addr
  var imr_ifindex: Int32
}
struct ip_opts {
  var ip_dst: in_addr
  var ip_opts: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct ipc_info_name {
  var iin_name: mach_port_name_t
  var iin_collision: integer_t
  var iin_type: mach_port_type_t
  var iin_urefs: mach_port_urefs_t
  var iin_object: natural_t
  var iin_next: natural_t
  var iin_hash: natural_t
}
typealias ipc_info_name_array_t = UnsafeMutablePointer<ipc_info_name_t>
typealias ipc_info_name_t = ipc_info_name
struct ipc_info_space {
  var iis_genno_mask: natural_t
  var iis_table_size: natural_t
  var iis_table_next: natural_t
  var iis_tree_size: natural_t
  var iis_tree_small: natural_t
  var iis_tree_hash: natural_t
}
struct ipc_info_space_basic {
  var iisb_genno_mask: natural_t
  var iisb_table_size: natural_t
  var iisb_table_next: natural_t
  var iisb_table_inuse: natural_t
  var iisb_reserved: (natural_t, natural_t)
}
typealias ipc_info_space_basic_t = ipc_info_space_basic
typealias ipc_info_space_t = ipc_info_space
struct ipc_info_tree_name {
  var iitn_name: ipc_info_name_t
  var iitn_lchild: mach_port_name_t
  var iitn_rchild: mach_port_name_t
}
typealias ipc_info_tree_name_array_t = UnsafeMutablePointer<ipc_info_tree_name_t>
typealias ipc_info_tree_name_t = ipc_info_tree_name
struct ipc_perm {
  var uid: uid_t
  var gid: gid_t
  var cuid: uid_t
  var cgid: gid_t
  var mode: mode_t
  var _seq: UInt16
  var _key: key_t
}
typealias ipc_space_port_t = ipc_space_t
typealias ipc_space_t = mach_port_t
typealias ipc_voucher_attr_control_t = mach_port_t
typealias ipc_voucher_attr_manager_t = mach_port_t
typealias ipc_voucher_t = mach_voucher_t
struct ipv6_mreq {
  var ipv6mr_multiaddr: in6_addr
  var ipv6mr_interface: UInt32
}
func iruserok(_: UInt, _: Int32, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
func iruserok_sa(_: UnsafePointer<Void>, _: Int32, _: Int32, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
func isalnum(_c: Int32) -> Int32
func isalpha(_c: Int32) -> Int32
func isascii(_c: Int32) -> Int32
func isatty(_: Int32) -> Int32
func isblank(_c: Int32) -> Int32
func iscntrl(_c: Int32) -> Int32
func isdigit(_c: Int32) -> Int32
func isgraph(_c: Int32) -> Int32
func ishexnumber(_c: Int32) -> Int32
func isideogram(_c: Int32) -> Int32
func islower(_c: Int32) -> Int32
func isnumber(_c: Int32) -> Int32
func isphonogram(_c: Int32) -> Int32
func isprint(_c: Int32) -> Int32
func ispunct(_c: Int32) -> Int32
func isrune(_c: Int32) -> Int32
func issetugid() -> Int32
func isspace(_c: Int32) -> Int32
func isspecial(_c: Int32) -> Int32
func isupper(_c: Int32) -> Int32
func iswalnum(_wc: wint_t) -> Int32
func iswalpha(_wc: wint_t) -> Int32
func iswascii(_wc: wint_t) -> Int32
func iswblank(_wc: wint_t) -> Int32
func iswcntrl(_wc: wint_t) -> Int32
func iswctype(_wc: wint_t, _charclass: wctype_t) -> Int32
func iswdigit(_wc: wint_t) -> Int32
func iswgraph(_wc: wint_t) -> Int32
func iswhexnumber(_wc: wint_t) -> Int32
func iswideogram(_wc: wint_t) -> Int32
func iswlower(_wc: wint_t) -> Int32
func iswnumber(_wc: wint_t) -> Int32
func iswphonogram(_wc: wint_t) -> Int32
func iswprint(_wc: wint_t) -> Int32
func iswpunct(_wc: wint_t) -> Int32
func iswrune(_wc: wint_t) -> Int32
func iswspace(_wc: wint_t) -> Int32
func iswspecial(_wc: wint_t) -> Int32
func iswupper(_wc: wint_t) -> Int32
func iswxdigit(_wc: wint_t) -> Int32
func isxdigit(_c: Int32) -> Int32
var italic: Int {
  get {
    return
  }
}
struct itimerval {
  var it_interval: timeval
  var it_value: timeval
}
@availability(OSX, introduced=10.0) func j0(_: Double) -> Double
@availability(OSX, introduced=10.0) func j1(_: Double) -> Double
typealias jmp_buf = (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
@availability(OSX, introduced=10.0) func jn(_: Int32, _: Double) -> Double
func jrand48(_: UnsafeMutablePointer<UInt16>) -> Int
var kAUBadParamErr: Int {
  get {
    return
  }
}
var kAUCloseErr: Int {
  get {
    return
  }
}
var kAULastErr: Int {
  get {
    return
  }
}
var kAUMakeReturnTokErr: Int {
  get {
    return
  }
}
var kAUMakeSubjectTokErr: Int {
  get {
    return
  }
}
var kAUMakeTextTokErr: Int {
  get {
    return
  }
}
var kAUNoErr: Int {
  get {
    return
  }
}
var kAUOpenErr: Int {
  get {
    return
  }
}
var kAUStatErr: Int {
  get {
    return
  }
}
var kAUSysctlErr: Int {
  get {
    return
  }
}
var kAUWriteCallerTokErr: Int {
  get {
    return
  }
}
var kAUWriteReturnTokErr: Int {
  get {
    return
  }
}
var kAUWriteSubjectTokErr: Int {
  get {
    return
  }
}
var kBTBadCloseMask: Int {
  get {
    return
  }
}
var kBTBigKeysMask: Int {
  get {
    return
  }
}
var kBTHeaderNode: Int {
  get {
    return
  }
}
var kBTIndexNode: Int {
  get {
    return
  }
}
var kBTLeafNode: Int {
  get {
    return
  }
}
var kBTMapNode: Int {
  get {
    return
  }
}
var kBTVariableIndexKeysMask: Int {
  get {
    return
  }
}
var kFSKMountVersion: Int {
  get {
    return
  }
}
var kGUARD_EXC_DESTROY: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_INCORRECT_GUARD: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes {
  get {
    return
  }
}
var kHFSAllocationFileID: Int {
  get {
    return
  }
}
var kHFSAttributeDataFileID: Int {
  get {
    return
  }
}
var kHFSAttributesFileID: Int {
  get {
    return
  }
}
var kHFSBadBlockFileID: Int {
  get {
    return
  }
}
var kHFSBinaryCompare: Int {
  get {
    return
  }
}
var kHFSBogusExtentFileID: Int {
  get {
    return
  }
}
var kHFSBootVolumeInconsistentBit: UInt32 {
  get {
    return
  }
}
var kHFSBootVolumeInconsistentMask: UInt32 {
  get {
    return
  }
}
var kHFSCaseFolding: Int {
  get {
    return
  }
}
var kHFSCatalogFileID: Int {
  get {
    return
  }
}
var kHFSCatalogKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSCatalogKeyMinimumLength: Int {
  get {
    return
  }
}
var kHFSCatalogNodeIDsReusedBit: UInt32 {
  get {
    return
  }
}
var kHFSCatalogNodeIDsReusedMask: UInt32 {
  get {
    return
  }
}
var kHFSContentProtectionBit: UInt32 {
  get {
    return
  }
}
var kHFSContentProtectionMask: UInt32 {
  get {
    return
  }
}
var kHFSExtentDensity: Int {
  get {
    return
  }
}
var kHFSExtentKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSExtentsFileID: Int {
  get {
    return
  }
}
var kHFSFileLockedBit: Int {
  get {
    return
  }
}
var kHFSFileLockedMask: Int {
  get {
    return
  }
}
var kHFSFileRecord: Int {
  get {
    return
  }
}
var kHFSFileThreadRecord: Int {
  get {
    return
  }
}
var kHFSFirstUserCatalogNodeID: Int {
  get {
    return
  }
}
var kHFSFolderRecord: Int {
  get {
    return
  }
}
var kHFSFolderThreadRecord: Int {
  get {
    return
  }
}
var kHFSHasAttributesBit: Int {
  get {
    return
  }
}
var kHFSHasAttributesMask: Int {
  get {
    return
  }
}
var kHFSHasChildLinkBit: Int {
  get {
    return
  }
}
var kHFSHasChildLinkMask: Int {
  get {
    return
  }
}
var kHFSHasDateAddedBit: Int {
  get {
    return
  }
}
var kHFSHasDateAddedMask: Int {
  get {
    return
  }
}
var kHFSHasFolderCountBit: Int {
  get {
    return
  }
}
var kHFSHasFolderCountMask: Int {
  get {
    return
  }
}
var kHFSHasLinkChainBit: Int {
  get {
    return
  }
}
var kHFSHasLinkChainMask: Int {
  get {
    return
  }
}
var kHFSHasSecurityBit: Int {
  get {
    return
  }
}
var kHFSHasSecurityMask: Int {
  get {
    return
  }
}
var kHFSJMountVersion: Int {
  get {
    return
  }
}
var kHFSMDBAttributesMask: UInt32 {
  get {
    return
  }
}
var kHFSMaxAttrNameLen: Int {
  get {
    return
  }
}
var kHFSMaxFileNameChars: Int {
  get {
    return
  }
}
var kHFSMaxVolumeNameChars: Int {
  get {
    return
  }
}
var kHFSPlusAttrExtents: Int {
  get {
    return
  }
}
var kHFSPlusAttrForkData: Int {
  get {
    return
  }
}
var kHFSPlusAttrInlineData: Int {
  get {
    return
  }
}
var kHFSPlusAttrMinNodeSize: Int {
  get {
    return
  }
}
var kHFSPlusCatalogKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSPlusCatalogKeyMinimumLength: Int {
  get {
    return
  }
}
var kHFSPlusCatalogMinNodeSize: Int {
  get {
    return
  }
}
var kHFSPlusCreator: Int {
  get {
    return
  }
}
var kHFSPlusExtentDensity: Int {
  get {
    return
  }
}
var kHFSPlusExtentKeyMaximumLength: Int {
  get {
    return
  }
}
var kHFSPlusExtentMinNodeSize: Int {
  get {
    return
  }
}
var kHFSPlusFileRecord: Int {
  get {
    return
  }
}
var kHFSPlusFileThreadRecord: Int {
  get {
    return
  }
}
var kHFSPlusFolderRecord: Int {
  get {
    return
  }
}
var kHFSPlusFolderThreadRecord: Int {
  get {
    return
  }
}
var kHFSPlusMaxFileNameChars: Int {
  get {
    return
  }
}
var kHFSPlusMountVersion: Int {
  get {
    return
  }
}
var kHFSPlusSigWord: Int {
  get {
    return
  }
}
var kHFSPlusVersion: Int {
  get {
    return
  }
}
var kHFSRepairCatalogFileID: Int {
  get {
    return
  }
}
var kHFSRootFolderID: Int {
  get {
    return
  }
}
var kHFSRootParentID: Int {
  get {
    return
  }
}
var kHFSSigWord: Int {
  get {
    return
  }
}
var kHFSStartupFileID: Int {
  get {
    return
  }
}
var kHFSThreadExistsBit: Int {
  get {
    return
  }
}
var kHFSThreadExistsMask: Int {
  get {
    return
  }
}
var kHFSUnusedNodeFixBit: UInt32 {
  get {
    return
  }
}
var kHFSUnusedNodeFixMask: UInt32 {
  get {
    return
  }
}
var kHFSUnusedNodesFixDate: UInt32 {
  get {
    return
  }
}
var kHFSVolumeHardwareLockBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeHardwareLockMask: UInt32 {
  get {
    return
  }
}
var kHFSVolumeInconsistentBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeInconsistentMask: UInt32 {
  get {
    return
  }
}
var kHFSVolumeJournaledBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeJournaledMask: UInt32 {
  get {
    return
  }
}
var kHFSVolumeNoCacheRequiredBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeNoCacheRequiredMask: UInt32 {
  get {
    return
  }
}
var kHFSVolumeSoftwareLockBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeSoftwareLockMask: UInt32 {
  get {
    return
  }
}
var kHFSVolumeSparedBlocksBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeSparedBlocksMask: UInt32 {
  get {
    return
  }
}
var kHFSVolumeUnmountedBit: UInt32 {
  get {
    return
  }
}
var kHFSVolumeUnmountedMask: UInt32 {
  get {
    return
  }
}
var kHFSXSigWord: Int {
  get {
    return
  }
}
var kHFSXVersion: Int {
  get {
    return
  }
}
var kHardLinkFileType: Int {
  get {
    return
  }
}
var kJIJournalInFSMask: Int {
  get {
    return
  }
}
var kJIJournalNeedInitMask: Int {
  get {
    return
  }
}
var kJIJournalOnOtherDeviceMask: Int {
  get {
    return
  }
}
var kMaxKeyLength: BTreeKeyLimits {
  get {
    return
  }
}
var kNilOptions: Int {
  get {
    return
  }
}
var kSymLinkCreator: Int {
  get {
    return
  }
}
var kSymLinkFileType: Int {
  get {
    return
  }
}
var kUnknownType: Int {
  get {
    return
  }
}
@availability(*, unavailable) var kVariableLengthArray: Int {
  get {
    return
  }
}
struct kauth_ace {
  var ace_applicable: guid_t
  var ace_flags: UInt32
  var ace_rights: kauth_ace_rights_t
}
typealias kauth_ace_rights_t = UInt32
typealias kauth_ace_t = UnsafeMutablePointer<kauth_ace>
struct kauth_acl {
  var acl_entrycount: UInt32
  var acl_flags: UInt32
  var acl_ace: (kauth_ace)
}
typealias kauth_acl_t = UnsafeMutablePointer<kauth_acl>
struct kauth_cache_sizes {
  var kcs_group_size: UInt32
  var kcs_id_size: UInt32
}
typealias kauth_cred_t = UnsafeMutablePointer<ucred>
struct kauth_filesec {
  var fsec_magic: UInt32
  var fsec_owner: guid_t
  var fsec_group: guid_t
  var fsec_acl: kauth_acl
}
typealias kauth_filesec_t = UnsafeMutablePointer<kauth_filesec>
struct kauth_identity_extlookup {
  var el_seqno: UInt32
  var el_result: UInt32
  var el_flags: UInt32
  var el_info_pid: __darwin_pid_t
  var el_extend: UInt64
  var el_info_reserved_1: UInt32
  var el_uid: uid_t
  var el_uguid: guid_t
  var el_uguid_valid: UInt32
  var el_usid: ntsid_t
  var el_usid_valid: UInt32
  var el_gid: gid_t
  var el_gguid: guid_t
  var el_gguid_valid: UInt32
  var el_gsid: ntsid_t
  var el_gsid_valid: UInt32
  var el_member_valid: UInt32
  var el_sup_grp_cnt: UInt32
  var el_sup_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t)
}
struct kern_ctl_info {
  var kcsi_id: UInt32
  var kcsi_reg_unit: UInt32
  var kcsi_flags: UInt32
  var kcsi_recvbufsize: UInt32
  var kcsi_sendbufsize: UInt32
  var kcsi_unit: UInt32
  var kcsi_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct kern_event_info {
  var kesi_vendor_code_filter: UInt32
  var kesi_class_filter: UInt32
  var kesi_subclass_filter: UInt32
}
typealias kern_return_t = Int32
typealias kernel_boot_info_t = (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
struct kernel_resource_sizes {
  var task: natural_t
  var thread: natural_t
  var port: natural_t
  var memory_region: natural_t
  var memory_object: natural_t
}
typealias kernel_resource_sizes_data_t = kernel_resource_sizes
typealias kernel_resource_sizes_t = UnsafeMutablePointer<kernel_resource_sizes>
typealias kernel_version_t = (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
struct kev_dl_proto_data {
  var link_data: net_event_data
  var proto_family: UInt32
  var proto_remaining_count: UInt32
}
struct kevent {
  var ident: UInt
  var filter: Int16
  var flags: UInt16
  var fflags: UInt32
  var data: Int
  var udata: UnsafeMutablePointer<Void>
}
func kevent(kq: Int32, changelist: UnsafePointer<kevent>, nchanges: Int32, eventlist: UnsafeMutablePointer<kevent>, nevents: Int32, timeout: UnsafePointer<timespec>) -> Int32
func kevent64(kq: Int32, changelist: UnsafePointer<kevent64_s>, nchanges: Int32, eventlist: UnsafeMutablePointer<kevent64_s>, nevents: Int32, flags: UInt32, timeout: UnsafePointer<timespec>) -> Int32
struct kevent64_s {
  var ident: UInt64
  var filter: Int16
  var flags: UInt16
  var fflags: UInt32
  var data: Int64
  var udata: UInt64
  var ext: (UInt64, UInt64)
}
func kext_request(host_priv: host_priv_t, user_log_flags: UInt32, request_data: vm_offset_t, request_dataCnt: mach_msg_type_number_t, response_data: UnsafeMutablePointer<vm_offset_t>, response_dataCnt: UnsafeMutablePointer<mach_msg_type_number_t>, log_data: UnsafeMutablePointer<vm_offset_t>, log_dataCnt: UnsafeMutablePointer<mach_msg_type_number_t>, op_result: UnsafeMutablePointer<kern_return_t>) -> kern_return_t
typealias key_t = __int32_t
func kill(_: pid_t, _: Int32) -> Int32
func killpg(_: pid_t, _: Int32) -> Int32
struct kinfo_lctx {
  var id: pid_t
  var mc: Int32
}
struct kinfo_proc {
  var kp_proc: extern_proc
  var kp_eproc: eproc
}
struct klist {
  var slh_first: COpaquePointer
}
typealias kmod_args_t = UnsafeMutablePointer<Void>
func kmod_control(host_priv: host_priv_t, module: kmod_t, flavor: kmod_control_flavor_t, data: UnsafeMutablePointer<kmod_args_t>, dataCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias kmod_control_flavor_t = Int32
func kmod_create(host_priv: host_priv_t, info: vm_address_t, module: UnsafeMutablePointer<kmod_t>) -> kern_return_t
func kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t
func kmod_get_info(host: host_t, modules: UnsafeMutablePointer<kmod_args_t>, modulesCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct kmod_info {
  var next: UnsafeMutablePointer<kmod_info>
  var info_version: Int32
  var id: UInt32
  var name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var version: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var reference_count: Int32
  var reference_list: UnsafeMutablePointer<kmod_reference_t>
  var address: vm_address_t
  var size: vm_size_t
  var hdr_size: vm_size_t
  var start: CFunctionPointer<kmod_start_func_t>
  var stop: CFunctionPointer<kmod_stop_func_t>
}
struct kmod_info_32_v1 {
  var next_addr: UInt32
  var info_version: Int32
  var id: UInt32
  var name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var version: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var reference_count: Int32
  var reference_list_addr: UInt32
  var address: UInt32
  var size: UInt32
  var hdr_size: UInt32
  var start_addr: UInt32
  var stop_addr: UInt32
}
typealias kmod_info_32_v1_t = kmod_info_32_v1
struct kmod_info_64_v1 {
  var next_addr: UInt64
  var info_version: Int32
  var id: UInt32
  var name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var version: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var reference_count: Int32
  var reference_list_addr: UInt64
  var address: UInt64
  var size: UInt64
  var hdr_size: UInt64
  var start_addr: UInt64
  var stop_addr: UInt64
}
typealias kmod_info_64_v1_t = kmod_info_64_v1
typealias kmod_info_array_t = UnsafeMutablePointer<kmod_info_t>
typealias kmod_info_t = kmod_info
struct kmod_reference {
  var next: UnsafeMutablePointer<kmod_reference>
  var info: UnsafeMutablePointer<kmod_info>
}
typealias kmod_reference_t = kmod_reference
typealias kmod_start_func_t = (UnsafeMutablePointer<kmod_info>, UnsafeMutablePointer<Void>) -> kern_return_t
typealias kmod_stop_func_t = (UnsafeMutablePointer<kmod_info>, UnsafeMutablePointer<Void>) -> kern_return_t
typealias kmod_t = Int32
func kqueue() -> Int32
struct kqueue_fdinfo {
  var pfi: proc_fileinfo
  var kqueueinfo: kqueue_info
}
struct kqueue_info {
  var kq_stat: vinfo_stat
  var kq_state: UInt32
  var rfu_1: UInt32
}
func l64a(_: Int) -> UnsafeMutablePointer<Int8>
typealias labelstr_t = UnsafeMutablePointer<Int8>
func labs(_: Int) -> Int
struct lastlogx {
  var ll_tv: timeval
  var ll_line: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ll_host: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
@availability(OSX, introduced=10.5) func lchflags(_: UnsafePointer<Int8>, _: __uint32_t) -> Int32
@availability(OSX, introduced=10.5) func lchmod(_: UnsafePointer<Int8>, _: mode_t) -> Int32
func lchown(_: UnsafePointer<Int8>, _: uid_t, _: gid_t) -> Int32
func lcong48(_: UnsafeMutablePointer<UInt16>)
struct lconv {
  var decimal_point: UnsafeMutablePointer<Int8>
  var thousands_sep: UnsafeMutablePointer<Int8>
  var grouping: UnsafeMutablePointer<Int8>
  var int_curr_symbol: UnsafeMutablePointer<Int8>
  var currency_symbol: UnsafeMutablePointer<Int8>
  var mon_decimal_point: UnsafeMutablePointer<Int8>
  var mon_thousands_sep: UnsafeMutablePointer<Int8>
  var mon_grouping: UnsafeMutablePointer<Int8>
  var positive_sign: UnsafeMutablePointer<Int8>
  var negative_sign: UnsafeMutablePointer<Int8>
  var int_frac_digits: Int8
  var frac_digits: Int8
  var p_cs_precedes: Int8
  var p_sep_by_space: Int8
  var n_cs_precedes: Int8
  var n_sep_by_space: Int8
  var p_sign_posn: Int8
  var n_sign_posn: Int8
  var int_p_cs_precedes: Int8
  var int_n_cs_precedes: Int8
  var int_p_sep_by_space: Int8
  var int_n_sep_by_space: Int8
  var int_p_sign_posn: Int8
  var int_n_sign_posn: Int8
}
func ldexp(_: Double, _: Int32) -> Double
func ldexpf(_: Float, _: Int32) -> Float
func ldiv(_: Int, _: Int) -> ldiv_t
struct ldiv_t {
  var quot: Int
  var rem: Int
}
var leaf: VISIT {
  get {
    return
  }
}
typealias ledger_amount_t = Int64
typealias ledger_array_t = UnsafeMutablePointer<ledger_t>
typealias ledger_item_t = natural_t
typealias ledger_port_array_t = ledger_array_t
typealias ledger_port_t = ledger_t
typealias ledger_t = mach_port_t
func lfind(_: UnsafePointer<Void>, _: UnsafePointer<Void>, _: UnsafeMutablePointer<UInt>, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<Void>
func lgamma(_: Double) -> Double
func lgammaf(_: Float) -> Float
func libiconv_set_relocation_prefix(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>)
struct linger {
  var l_onoff: Int32
  var l_linger: Int32
}
func link(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
@availability(OSX, introduced=10.10) func linkat(_: Int32, _: UnsafePointer<Int8>, _: Int32, _: UnsafePointer<Int8>, _: Int32) -> Int32
func lio_listio(mode: Int32, aiocblist: UnsafePointer<UnsafeMutablePointer<aiocb>>, nent: Int32, sigp: UnsafeMutablePointer<sigevent>) -> Int32
func listen(_: Int32, _: Int32) -> Int32
func llabs(_: Int64) -> Int64
func lldiv(_: Int64, _: Int64) -> lldiv_t
struct lldiv_t {
  var quot: Int64
  var rem: Int64
}
func llrint(_: Double) -> Int64
func llrintf(_: Float) -> Int64
func llround(_: Double) -> Int64
func llroundf(_: Float) -> Int64
struct loadavg {
  var ldavg: (fixpt_t, fixpt_t, fixpt_t)
  var fscale: Int
}
func localeconv() -> UnsafeMutablePointer<lconv>
func localtime(_: UnsafePointer<time_t>) -> UnsafeMutablePointer<tm>
func localtime_r(_: UnsafePointer<time_t>, _: UnsafeMutablePointer<tm>) -> UnsafeMutablePointer<tm>
func lock_acquire(lock_set: lock_set_t, lock_id: Int32) -> kern_return_t
func lock_handoff(lock_set: lock_set_t, lock_id: Int32) -> kern_return_t
func lock_handoff_accept(lock_set: lock_set_t, lock_id: Int32) -> kern_return_t
func lock_make_stable(lock_set: lock_set_t, lock_id: Int32) -> kern_return_t
func lock_release(lock_set: lock_set_t, lock_id: Int32) -> kern_return_t
func lock_set_create(task: task_t, new_lock_set: UnsafeMutablePointer<lock_set_t>, n_ulocks: Int32, policy: Int32) -> kern_return_t
func lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t
typealias lock_set_port_t = lock_set_t
typealias lock_set_t = mach_port_t
func lock_try(lock_set: lock_set_t, lock_id: Int32) -> kern_return_t
func lockf(_: Int32, _: Int32, _: off_t) -> Int32
struct lockgroup_info {
  var lockgroup_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var lockgroup_attr: UInt64
  var lock_spin_cnt: UInt64
  var lock_spin_util_cnt: UInt64
  var lock_spin_held_cnt: UInt64
  var lock_spin_miss_cnt: UInt64
  var lock_spin_held_max: UInt64
  var lock_spin_held_cum: UInt64
  var lock_mtx_cnt: UInt64
  var lock_mtx_util_cnt: UInt64
  var lock_mtx_held_cnt: UInt64
  var lock_mtx_miss_cnt: UInt64
  var lock_mtx_wait_cnt: UInt64
  var lock_mtx_held_max: UInt64
  var lock_mtx_held_cum: UInt64
  var lock_mtx_wait_max: UInt64
  var lock_mtx_wait_cum: UInt64
  var lock_rw_cnt: UInt64
  var lock_rw_util_cnt: UInt64
  var lock_rw_held_cnt: UInt64
  var lock_rw_miss_cnt: UInt64
  var lock_rw_wait_cnt: UInt64
  var lock_rw_held_max: UInt64
  var lock_rw_held_cum: UInt64
  var lock_rw_wait_max: UInt64
  var lock_rw_wait_cum: UInt64
}
typealias lockgroup_info_array_t = UnsafeMutablePointer<lockgroup_info_t>
typealias lockgroup_info_t = lockgroup_info
func log(_: Double) -> Double
func log10(_: Double) -> Double
func log10f(_: Float) -> Float
func log1p(_: Double) -> Double
func log1pf(_: Float) -> Float
func log2(_: Double) -> Double
func log2f(_: Float) -> Float
struct log2phys {
  var l2p_flags: UInt32
  var l2p_contigbytes: off_t
  var l2p_devoffset: off_t
}
func logb(_: Double) -> Double
func logbf(_: Float) -> Float
func logf(_: Float) -> Float
@noreturn func longjmp(_: UnsafeMutablePointer<Int32>, _: Int32)
func longjmperror()
func lrand48() -> Int
func lrint(_: Double) -> Int
func lrintf(_: Float) -> Int
func lround(_: Double) -> Int
func lroundf(_: Float) -> Int
func lsearch(_: UnsafePointer<Void>, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<UInt>, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<Void>
func lseek(_: Int32, _: off_t, _: Int32) -> off_t
func lstat(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat>) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func lstat64(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat64>) -> Int32
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func lstatx64_np(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat64>, _: filesec_t) -> Int32
func lstatx_np(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat>, _: filesec_t) -> Int32
@availability(OSX, introduced=10.5) func lutimes(_: UnsafePointer<Int8>, _: UnsafePointer<timeval>) -> Int32
func mach_absolute_time() -> UInt64
func mach_approximate_time() -> UInt64
struct mach_dead_name_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_port: mach_port_name_t
  var trailer: mach_msg_format_0_trailer_t
}
func mach_error(str: UnsafePointer<Int8>, error_value: mach_error_t)
typealias mach_error_fn_t = CFunctionPointer<(() -> mach_error_t)>
func mach_error_string(error_value: mach_error_t) -> UnsafeMutablePointer<Int8>
typealias mach_error_t = kern_return_t
func mach_error_type(error_value: mach_error_t) -> UnsafeMutablePointer<Int8>
typealias mach_exception_code_t = mach_exception_data_type_t
typealias mach_exception_data_t = UnsafeMutablePointer<mach_exception_data_type_t>
typealias mach_exception_data_type_t = Int64
typealias mach_exception_subcode_t = mach_exception_data_type_t
func mach_host_self() -> mach_port_t
func mach_make_memory_entry(target_task: vm_map_t, size: UnsafeMutablePointer<vm_size_t>, offset: vm_offset_t, permission: vm_prot_t, object_handle: UnsafeMutablePointer<mem_entry_name_port_t>, parent_entry: mem_entry_name_port_t) -> kern_return_t
func mach_make_memory_entry_64(target_task: vm_map_t, size: UnsafeMutablePointer<memory_object_size_t>, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: UnsafeMutablePointer<mach_port_t>, parent_entry: mem_entry_name_port_t) -> kern_return_t
func mach_memory_object_memory_entry(host: host_t, `internal`: boolean_t, size: vm_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func mach_memory_object_memory_entry_64(host: host_t, `internal`: boolean_t, size: memory_object_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func mach_msg(msg: UnsafeMutablePointer<mach_msg_header_t>, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) -> mach_msg_return_t
struct mach_msg_audit_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  var msgh_audit: audit_token_t
}
struct mach_msg_base_t {
  var header: mach_msg_header_t
  var body: mach_msg_body_t
}
typealias mach_msg_bits_t = UInt32
struct mach_msg_body_t {
  var msgh_descriptor_count: mach_msg_size_t
}
struct mach_msg_context_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  var msgh_audit: audit_token_t
  var msgh_context: mach_port_context_t
}
typealias mach_msg_copy_options_t = UInt32
typealias mach_msg_descriptor_type_t = UInt32
func mach_msg_destroy(_: UnsafeMutablePointer<mach_msg_header_t>)
struct mach_msg_empty_rcv_t {
  var header: mach_msg_header_t
  var trailer: mach_msg_trailer_t
}
struct mach_msg_empty_send_t {
  var header: mach_msg_header_t
}
typealias mach_msg_format_0_trailer_t = mach_msg_security_trailer_t
struct mach_msg_header_t {
  var msgh_bits: mach_msg_bits_t
  var msgh_size: mach_msg_size_t
  var msgh_remote_port: mach_port_t
  var msgh_local_port: mach_port_t
  var msgh_voucher_port: mach_port_name_t
  var msgh_id: mach_msg_id_t
}
typealias mach_msg_id_t = integer_t
struct mach_msg_mac_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
  var msgh_audit: audit_token_t
  var msgh_context: mach_port_context_t
  var msgh_ad: Int32
  var msgh_labels: msg_labels_t
}
typealias mach_msg_max_trailer_t = mach_msg_mac_trailer_t
typealias mach_msg_option_t = integer_t
typealias mach_msg_options_t = integer_t
func mach_msg_overwrite(msg: UnsafeMutablePointer<mach_msg_header_t>, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: UnsafeMutablePointer<mach_msg_header_t>, rcv_limit: mach_msg_size_t) -> mach_msg_return_t
func mach_msg_receive(_: UnsafeMutablePointer<mach_msg_header_t>) -> mach_msg_return_t
typealias mach_msg_return_t = kern_return_t
struct mach_msg_security_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
  var msgh_sender: security_token_t
}
func mach_msg_send(_: UnsafeMutablePointer<mach_msg_header_t>) -> mach_msg_return_t
struct mach_msg_seqno_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
  var msgh_seqno: mach_port_seqno_t
}
func mach_msg_server(_: CFunctionPointer<((UnsafeMutablePointer<mach_msg_header_t>, UnsafeMutablePointer<mach_msg_header_t>) -> boolean_t)>, _: mach_msg_size_t, _: mach_port_t, _: mach_msg_options_t) -> mach_msg_return_t
func mach_msg_server_importance(_: CFunctionPointer<((UnsafeMutablePointer<mach_msg_header_t>, UnsafeMutablePointer<mach_msg_header_t>) -> boolean_t)>, _: mach_msg_size_t, _: mach_port_t, _: mach_msg_options_t) -> mach_msg_return_t
func mach_msg_server_once(_: CFunctionPointer<((UnsafeMutablePointer<mach_msg_header_t>, UnsafeMutablePointer<mach_msg_header_t>) -> boolean_t)>, _: mach_msg_size_t, _: mach_port_t, _: mach_msg_options_t) -> mach_msg_return_t
typealias mach_msg_size_t = natural_t
typealias mach_msg_timeout_t = natural_t
typealias mach_msg_trailer_info_t = UnsafeMutablePointer<Int8>
typealias mach_msg_trailer_size_t = UInt32
struct mach_msg_trailer_t {
  var msgh_trailer_type: mach_msg_trailer_type_t
  var msgh_trailer_size: mach_msg_trailer_size_t
}
typealias mach_msg_trailer_type_t = UInt32
typealias mach_msg_type_name_t = UInt32
typealias mach_msg_type_number_t = natural_t
typealias mach_msg_type_size_t = natural_t
struct mach_no_senders_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_count: mach_msg_type_number_t
  var trailer: mach_msg_format_0_trailer_t
}
func mach_port_allocate(task: ipc_space_t, right: mach_port_right_t, name: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate_full(task: ipc_space_t, right: mach_port_right_t, proto: mach_port_t, qos: COpaquePointer, name: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
func mach_port_allocate_name(task: ipc_space_t, right: mach_port_right_t, name: mach_port_name_t) -> kern_return_t
func mach_port_allocate_qos(task: ipc_space_t, right: mach_port_right_t, qos: COpaquePointer, name: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
typealias mach_port_array_t = UnsafeMutablePointer<mach_port_t>
func mach_port_construct(task: ipc_space_t, options: mach_port_options_ptr_t, context: mach_port_context_t, name: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
typealias mach_port_context_t = mach_vm_address_t
func mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t
struct mach_port_deleted_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_port: mach_port_name_t
  var trailer: mach_msg_format_0_trailer_t
}
typealias mach_port_delta_t = integer_t
func mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t
struct mach_port_destroyed_notification_t {
  var not_header: mach_msg_header_t
  var not_body: mach_msg_body_t
  var trailer: mach_msg_format_0_trailer_t
}
func mach_port_destruct(task: ipc_space_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: mach_port_context_t) -> kern_return_t
func mach_port_dnrequest_info(task: ipc_space_t, name: mach_port_name_t, dnr_total: UnsafeMutablePointer<UInt32>, dnr_used: UnsafeMutablePointer<UInt32>) -> kern_return_t
func mach_port_extract_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func mach_port_extract_right(task: ipc_space_t, name: mach_port_name_t, msgt_name: mach_msg_type_name_t, poly: UnsafeMutablePointer<mach_port_t>, polyPoly: UnsafeMutablePointer<mach_msg_type_name_t>) -> kern_return_t
typealias mach_port_flavor_t = Int32
func mach_port_get_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_out: mach_port_info_t, port_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_get_context(task: ipc_space_t, name: mach_port_name_t, context: UnsafeMutablePointer<mach_port_context_t>) -> kern_return_t
func mach_port_get_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, refs: UnsafeMutablePointer<mach_port_urefs_t>) -> kern_return_t
func mach_port_get_set_status(task: ipc_space_t, name: mach_port_name_t, members: UnsafeMutablePointer<mach_port_name_array_t>, membersCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_get_srights(task: ipc_space_t, name: mach_port_name_t, srights: UnsafeMutablePointer<mach_port_rights_t>) -> kern_return_t
func mach_port_guard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t, strict: boolean_t) -> kern_return_t
struct mach_port_guard_exception_codes {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
struct mach_port_info_ext {
  var mpie_status: mach_port_status_t
  var mpie_boost_cnt: mach_port_msgcount_t
  var reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
typealias mach_port_info_ext_t = mach_port_info_ext
typealias mach_port_info_t = UnsafeMutablePointer<integer_t>
func mach_port_insert_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) -> kern_return_t
func mach_port_insert_right(task: ipc_space_t, name: mach_port_name_t, poly: mach_port_t, polyPoly: mach_msg_type_name_t) -> kern_return_t
func mach_port_kernel_object(task: ipc_space_t, name: mach_port_name_t, object_type: UnsafeMutablePointer<UInt32>, object_addr: UnsafeMutablePointer<UInt32>) -> kern_return_t
func mach_port_kobject(task: ipc_space_t, name: mach_port_name_t, object_type: UnsafeMutablePointer<natural_t>, object_addr: UnsafeMutablePointer<mach_vm_address_t>) -> kern_return_t
struct mach_port_limits {
  var mpl_qlimit: mach_port_msgcount_t
}
typealias mach_port_limits_t = mach_port_limits
func mach_port_mod_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) -> kern_return_t
func mach_port_move_member(task: ipc_space_t, member: mach_port_name_t, after: mach_port_name_t) -> kern_return_t
typealias mach_port_mscount_t = natural_t
typealias mach_port_msgcount_t = natural_t
typealias mach_port_name_array_t = UnsafeMutablePointer<mach_port_name_t>
typealias mach_port_name_t = natural_t
func mach_port_names(task: ipc_space_t, names: UnsafeMutablePointer<mach_port_name_array_t>, namesCnt: UnsafeMutablePointer<mach_msg_type_number_t>, types: UnsafeMutablePointer<mach_port_type_array_t>, typesCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct mach_port_options {
  var flags: UInt32
  var mpl: mach_port_limits_t
  var reserved: (UInt64, UInt64)
}
typealias mach_port_options_ptr_t = UnsafeMutablePointer<mach_port_options_t>
typealias mach_port_options_t = mach_port_options
func mach_port_peek(task: ipc_space_t, name: mach_port_name_t, trailer_type: mach_msg_trailer_type_t, request_seqnop: UnsafeMutablePointer<mach_port_seqno_t>, msg_sizep: UnsafeMutablePointer<mach_msg_size_t>, msg_idp: UnsafeMutablePointer<mach_msg_id_t>, trailer_infop: mach_msg_trailer_info_t, trailer_infopCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_port_rename(task: ipc_space_t, old_name: mach_port_name_t, new_name: mach_port_name_t) -> kern_return_t
func mach_port_request_notification(task: ipc_space_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t, notify: mach_port_t, notifyPoly: mach_msg_type_name_t, previous: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
typealias mach_port_right_t = natural_t
typealias mach_port_rights_t = natural_t
typealias mach_port_seqno_t = natural_t
func mach_port_set_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info: mach_port_info_t, port_infoCnt: mach_msg_type_number_t) -> kern_return_t
func mach_port_set_context(task: ipc_space_t, name: mach_port_name_t, context: mach_port_context_t) -> kern_return_t
func mach_port_set_mscount(task: ipc_space_t, name: mach_port_name_t, mscount: mach_port_mscount_t) -> kern_return_t
func mach_port_set_seqno(task: ipc_space_t, name: mach_port_name_t, seqno: mach_port_seqno_t) -> kern_return_t
func mach_port_space_basic_info(task: ipc_space_t, basic_info: UnsafeMutablePointer<ipc_info_space_basic_t>) -> kern_return_t
func mach_port_space_info(task: ipc_space_t, space_info: UnsafeMutablePointer<ipc_info_space_t>, table_info: UnsafeMutablePointer<ipc_info_name_array_t>, table_infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>, tree_info: UnsafeMutablePointer<ipc_info_tree_name_array_t>, tree_infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias mach_port_srights_t = UInt32
struct mach_port_status {
  var mps_pset: mach_port_rights_t
  var mps_seqno: mach_port_seqno_t
  var mps_mscount: mach_port_mscount_t
  var mps_qlimit: mach_port_msgcount_t
  var mps_msgcount: mach_port_msgcount_t
  var mps_sorights: mach_port_rights_t
  var mps_srights: boolean_t
  var mps_pdrequest: boolean_t
  var mps_nsrequest: boolean_t
  var mps_flags: natural_t
}
typealias mach_port_status_t = mach_port_status
typealias mach_port_t = __darwin_mach_port_t
func mach_port_type(task: ipc_space_t, name: mach_port_name_t, ptype: UnsafeMutablePointer<mach_port_type_t>) -> kern_return_t
typealias mach_port_type_array_t = UnsafeMutablePointer<mach_port_type_t>
typealias mach_port_type_t = natural_t
func mach_port_unguard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t) -> kern_return_t
typealias mach_port_urefs_t = natural_t
func mach_ports_lookup(target_task: task_t, init_port_set: UnsafeMutablePointer<mach_port_array_t>, init_port_setCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_ports_register(target_task: task_t, init_port_set: mach_port_array_t, init_port_setCnt: mach_msg_type_number_t) -> kern_return_t
struct mach_send_once_notification_t {
  var not_header: mach_msg_header_t
  var trailer: mach_msg_format_0_trailer_t
}
struct mach_send_possible_notification_t {
  var not_header: mach_msg_header_t
  var NDR: NDR_record_t
  var not_port: mach_port_name_t
  var trailer: mach_msg_format_0_trailer_t
}
struct mach_task_basic_info {
  var virtual_size: mach_vm_size_t
  var resident_size: mach_vm_size_t
  var resident_size_max: mach_vm_size_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
  var suspend_count: integer_t
}
typealias mach_task_basic_info_data_t = mach_task_basic_info
typealias mach_task_basic_info_t = UnsafeMutablePointer<mach_task_basic_info>
var mach_task_self_: mach_port_t
func mach_thread_self() -> mach_port_t
struct mach_timebase_info {
  var numer: UInt32
  var denom: UInt32
}
func mach_timebase_info(info: mach_timebase_info_t) -> kern_return_t
typealias mach_timebase_info_data_t = mach_timebase_info
typealias mach_timebase_info_t = UnsafeMutablePointer<mach_timebase_info>
struct mach_timespec {
  var tv_sec: UInt32
  var tv_nsec: clock_res_t
}
typealias mach_timespec_t = mach_timespec
typealias mach_vm_address_t = UInt64
func mach_vm_allocate(target: vm_map_t, address: UnsafeMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, flags: Int32) -> kern_return_t
func mach_vm_behavior_set(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, new_behavior: vm_behavior_t) -> kern_return_t
func mach_vm_copy(target_task: vm_map_t, source_address: mach_vm_address_t, size: mach_vm_size_t, dest_address: mach_vm_address_t) -> kern_return_t
func mach_vm_deallocate(target: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t) -> kern_return_t
struct mach_vm_info_region {
  var vir_start: mach_vm_offset_t
  var vir_end: mach_vm_offset_t
  var vir_object: mach_vm_offset_t
  var vir_offset: memory_object_offset_t
  var vir_needs_copy: boolean_t
  var vir_protection: vm_prot_t
  var vir_max_protection: vm_prot_t
  var vir_inheritance: vm_inherit_t
  var vir_wired_count: natural_t
  var vir_user_wired_count: natural_t
}
typealias mach_vm_info_region_t = mach_vm_info_region
func mach_vm_inherit(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, new_inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_machine_attribute(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, attribute: vm_machine_attribute_t, value: UnsafeMutablePointer<vm_machine_attribute_val_t>) -> kern_return_t
func mach_vm_map(target_task: vm_map_t, address: UnsafeMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: Int32, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func mach_vm_msync(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, sync_flags: vm_sync_t) -> kern_return_t
typealias mach_vm_offset_t = UInt64
func mach_vm_page_info(target_task: vm_map_t, address: mach_vm_address_t, flavor: vm_page_info_flavor_t, info: vm_page_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_page_query(target_map: vm_map_t, offset: mach_vm_offset_t, disposition: UnsafeMutablePointer<integer_t>, ref_count: UnsafeMutablePointer<integer_t>) -> kern_return_t
func mach_vm_protect(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func mach_vm_purgable_control(target_task: vm_map_t, address: mach_vm_address_t, control: vm_purgable_t, state: UnsafeMutablePointer<Int32>) -> kern_return_t
func mach_vm_read(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, data: UnsafeMutablePointer<vm_offset_t>, dataCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct mach_vm_read_entry {
  var address: mach_vm_address_t
  var size: mach_vm_size_t
}
typealias mach_vm_read_entry_t = (mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry, mach_vm_read_entry)
func mach_vm_read_list(target_task: vm_map_t, data_list: UnsafeMutablePointer<mach_vm_read_entry>, count: natural_t) -> kern_return_t
func mach_vm_read_overwrite(target_task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, data: mach_vm_address_t, outsize: UnsafeMutablePointer<mach_vm_size_t>) -> kern_return_t
func mach_vm_region(target_task: vm_map_t, address: UnsafeMutablePointer<mach_vm_address_t>, size: UnsafeMutablePointer<mach_vm_size_t>, flavor: vm_region_flavor_t, info: vm_region_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>, object_name: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func mach_vm_region_info(task: vm_map_t, address: vm_address_t, region: UnsafeMutablePointer<vm_info_region_t>, objects: UnsafeMutablePointer<vm_info_object_array_t>, objectsCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_info_64(task: vm_map_t, address: vm_address_t, region: UnsafeMutablePointer<vm_info_region_64_t>, objects: UnsafeMutablePointer<vm_info_object_array_t>, objectsCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_region_recurse(target_task: vm_map_t, address: UnsafeMutablePointer<mach_vm_address_t>, size: UnsafeMutablePointer<mach_vm_size_t>, nesting_depth: UnsafeMutablePointer<natural_t>, info: vm_region_recurse_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func mach_vm_remap(target_task: vm_map_t, target_address: UnsafeMutablePointer<mach_vm_address_t>, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: Int32, src_task: vm_map_t, src_address: mach_vm_address_t, copy: boolean_t, cur_protection: UnsafeMutablePointer<vm_prot_t>, max_protection: UnsafeMutablePointer<vm_prot_t>, inheritance: vm_inherit_t) -> kern_return_t
typealias mach_vm_size_t = UInt64
func mach_vm_wire(host_priv: host_priv_t, task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, desired_access: vm_prot_t) -> kern_return_t
func mach_vm_write(target_task: vm_map_t, address: mach_vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) -> kern_return_t
typealias mach_voucher_attr_command_t = UInt32
typealias mach_voucher_attr_content_size_t = UInt32
typealias mach_voucher_attr_content_t = UnsafeMutablePointer<UInt8>
typealias mach_voucher_attr_control_flags_t = UInt32
typealias mach_voucher_attr_control_t = mach_port_t
typealias mach_voucher_attr_importance_refs = UInt32
typealias mach_voucher_attr_key_array_t = UnsafeMutablePointer<mach_voucher_attr_key_t>
typealias mach_voucher_attr_key_t = UInt32
typealias mach_voucher_attr_manager_t = mach_port_t
typealias mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t
typealias mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_raw_recipe_t = UnsafeMutablePointer<UInt8>
typealias mach_voucher_attr_recipe_command_array_t = UnsafeMutablePointer<mach_voucher_attr_recipe_command_t>
typealias mach_voucher_attr_recipe_command_t = UInt32
struct mach_voucher_attr_recipe_data {
  var key: mach_voucher_attr_key_t
  var command: mach_voucher_attr_recipe_command_t
  var previous_voucher: mach_voucher_name_t
  var content_size: mach_voucher_attr_content_size_t
}
typealias mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data
typealias mach_voucher_attr_recipe_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_recipe_t = UnsafeMutablePointer<mach_voucher_attr_recipe_data_t>
typealias mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t
typealias mach_voucher_attr_value_handle_array_t = UnsafeMutablePointer<mach_voucher_attr_value_handle_t>
typealias mach_voucher_attr_value_handle_t = UInt64
typealias mach_voucher_attr_value_reference_t = UInt32
func mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t
typealias mach_voucher_name_array_t = UnsafeMutablePointer<mach_voucher_name_t>
typealias mach_voucher_name_t = mach_port_name_t
typealias mach_voucher_selector_t = UInt32
typealias mach_voucher_t = mach_port_t
func mach_wait_until(deadline: UInt64) -> kern_return_t
func mach_zone_info(host: host_priv_t, names: UnsafeMutablePointer<mach_zone_name_array_t>, namesCnt: UnsafeMutablePointer<mach_msg_type_number_t>, info: UnsafeMutablePointer<mach_zone_info_array_t>, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias mach_zone_info_array_t = UnsafeMutablePointer<mach_zone_info_t>
struct mach_zone_info_data {
  var mzi_count: UInt64
  var mzi_cur_size: UInt64
  var mzi_max_size: UInt64
  var mzi_elem_size: UInt64
  var mzi_alloc_size: UInt64
  var mzi_sum_size: UInt64
  var mzi_exhaustible: UInt64
  var mzi_collectable: UInt64
}
typealias mach_zone_info_t = mach_zone_info_data
struct mach_zone_name {
  var mzn_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias mach_zone_name_array_t = UnsafeMutablePointer<mach_zone_name_t>
typealias mach_zone_name_t = mach_zone_name
func macx_backing_store_recovery(pid: Int32) -> kern_return_t
func macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t
func macx_swapoff(filename: UInt64, flags: Int32) -> kern_return_t
func macx_swapon(filename: UInt64, flags: Int32, size: Int32, priority: Int32) -> kern_return_t
func macx_triggers(hi_water: Int32, low_water: Int32, flags: Int32, alert_port: mach_port_t) -> kern_return_t
func madvise(_: UnsafeMutablePointer<Void>, _: UInt, _: Int32) -> Int32
func malloc(_: UInt) -> UnsafeMutablePointer<Void>
func malloc_create_zone(start_size: vm_size_t, flags: UInt32) -> UnsafeMutablePointer<malloc_zone_t>
@availability(OSX, introduced=10.6) func malloc_default_purgeable_zone() -> UnsafeMutablePointer<malloc_zone_t>
func malloc_default_zone() -> UnsafeMutablePointer<malloc_zone_t>
func malloc_destroy_zone(zone: UnsafeMutablePointer<malloc_zone_t>)
func malloc_get_all_zones(task: task_t, reader: CFunctionPointer<memory_reader_t>, addresses: UnsafeMutablePointer<UnsafeMutablePointer<vm_address_t>>, count: UnsafeMutablePointer<UInt32>) -> kern_return_t
func malloc_get_zone_name(zone: UnsafeMutablePointer<malloc_zone_t>) -> UnsafePointer<Int8>
func malloc_good_size(size: UInt) -> UInt
struct malloc_introspection_t {
  var enumerator: CFunctionPointer<((task_t, UnsafeMutablePointer<Void>, UInt32, vm_address_t, CFunctionPointer<memory_reader_t>, CFunctionPointer<vm_range_recorder_t>) -> kern_return_t)>
  var good_size: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>, UInt) -> UInt)>
  var check: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>) -> boolean_t)>
  var print: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>, boolean_t) -> Void)>
  var log: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>, UnsafeMutablePointer<Void>) -> Void)>
  var force_lock: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>) -> Void)>
  var force_unlock: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>) -> Void)>
  var statistics: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>, UnsafeMutablePointer<malloc_statistics_t>) -> Void)>
  var zone_locked: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>) -> boolean_t)>
  var enable_discharge_checking: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>) -> boolean_t)>
  var disable_discharge_checking: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>) -> Void)>
  var discharge: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>, UnsafeMutablePointer<Void>) -> Void)>
  var enumerate_discharged_pointers: CFunctionPointer<((UnsafeMutablePointer<malloc_zone_t>, ((UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>) -> Void)!) -> Void)>
}
@availability(OSX, introduced=10.6) func malloc_make_nonpurgeable(ptr: UnsafeMutablePointer<Void>) -> Int32
@availability(OSX, introduced=10.6) func malloc_make_purgeable(ptr: UnsafeMutablePointer<Void>)
func malloc_set_zone_name(zone: UnsafeMutablePointer<malloc_zone_t>, name: UnsafePointer<Int8>)
func malloc_size(ptr: UnsafePointer<Void>) -> UInt
struct malloc_statistics_t {
  var blocks_in_use: UInt32
  var size_in_use: UInt
  var max_size_in_use: UInt
  var size_allocated: UInt
}
func malloc_zone_batch_free(zone: UnsafeMutablePointer<malloc_zone_t>, to_be_freed: UnsafeMutablePointer<UnsafeMutablePointer<Void>>, num: UInt32)
func malloc_zone_batch_malloc(zone: UnsafeMutablePointer<malloc_zone_t>, size: UInt, results: UnsafeMutablePointer<UnsafeMutablePointer<Void>>, num_requested: UInt32) -> UInt32
func malloc_zone_calloc(zone: UnsafeMutablePointer<malloc_zone_t>, num_items: UInt, size: UInt) -> UnsafeMutablePointer<Void>
func malloc_zone_check(zone: UnsafeMutablePointer<malloc_zone_t>) -> boolean_t
@availability(OSX, introduced=10.7) func malloc_zone_disable_discharge_checking(zone: UnsafeMutablePointer<malloc_zone_t>)
@availability(OSX, introduced=10.7) func malloc_zone_discharge(zone: UnsafeMutablePointer<malloc_zone_t>, memory: UnsafeMutablePointer<Void>)
@availability(OSX, introduced=10.7) func malloc_zone_enable_discharge_checking(zone: UnsafeMutablePointer<malloc_zone_t>) -> boolean_t
@availability(OSX, introduced=10.7) func malloc_zone_enumerate_discharged_pointers(zone: UnsafeMutablePointer<malloc_zone_t>, report_discharged: ((UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>) -> Void)!)
func malloc_zone_free(zone: UnsafeMutablePointer<malloc_zone_t>, ptr: UnsafeMutablePointer<Void>)
func malloc_zone_from_ptr(ptr: UnsafePointer<Void>) -> UnsafeMutablePointer<malloc_zone_t>
func malloc_zone_log(zone: UnsafeMutablePointer<malloc_zone_t>, address: UnsafeMutablePointer<Void>)
func malloc_zone_malloc(zone: UnsafeMutablePointer<malloc_zone_t>, size: UInt) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.6) func malloc_zone_memalign(zone: UnsafeMutablePointer<malloc_zone_t>, alignment: UInt, size: UInt) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.7) func malloc_zone_pressure_relief(zone: UnsafeMutablePointer<malloc_zone_t>, goal: UInt) -> UInt
func malloc_zone_print(zone: UnsafeMutablePointer<malloc_zone_t>, verbose: boolean_t)
func malloc_zone_print_ptr_info(ptr: UnsafeMutablePointer<Void>)
func malloc_zone_realloc(zone: UnsafeMutablePointer<malloc_zone_t>, ptr: UnsafeMutablePointer<Void>, size: UInt) -> UnsafeMutablePointer<Void>
func malloc_zone_register(zone: UnsafeMutablePointer<malloc_zone_t>)
func malloc_zone_statistics(zone: UnsafeMutablePointer<malloc_zone_t>, stats: UnsafeMutablePointer<malloc_statistics_t>)
typealias malloc_zone_t = _malloc_zone_t
func malloc_zone_unregister(zone: UnsafeMutablePointer<malloc_zone_t>)
func malloc_zone_valloc(zone: UnsafeMutablePointer<malloc_zone_t>, size: UInt) -> UnsafeMutablePointer<Void>
func map_fd(fd: Int32, offset: vm_offset_t, addr: UnsafeMutablePointer<vm_offset_t>, find_space: boolean_t, numbytes: vm_size_t) -> kern_return_t
var master_device_port: mach_port_t
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func matherr(_: UnsafeMutablePointer<exception>) -> Int32
struct mb_class_stat {
  var mbcl_cname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var mbcl_size: UInt32
  var mbcl_total: UInt32
  var mbcl_active: UInt32
  var mbcl_infree: UInt32
  var mbcl_slab_cnt: UInt32
  var mbcl_pad: UInt32
  var mbcl_alloc_cnt: UInt64
  var mbcl_free_cnt: UInt64
  var mbcl_notified: UInt64
  var mbcl_purge_cnt: UInt64
  var mbcl_fail_cnt: UInt64
  var mbcl_ctotal: UInt32
  var mbcl_release_cnt: UInt32
  var mbcl_mc_state: UInt32
  var mbcl_mc_cached: UInt32
  var mbcl_mc_waiter_cnt: UInt32
  var mbcl_mc_wretry_cnt: UInt32
  var mbcl_mc_nwretry_cnt: UInt32
  var mbcl_peak_reported: UInt32
  var mbcl_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
typealias mb_class_stat_t = mb_class_stat
struct mb_stat {
  var mbs_cnt: UInt32
  var mbs_pad: UInt32
  var mbs_class: (mb_class_stat_t)
}
typealias mb_stat_t = mb_stat
func mblen(_: UnsafePointer<Int8>, _: UInt) -> Int32
func mbrlen(_: UnsafePointer<Int8>, _: UInt, _: COpaquePointer) -> UInt
func mbrtowc(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<Int8>, _: UInt, _: COpaquePointer) -> UInt
func mbsinit(_: COpaquePointer) -> Int32
func mbsnrtowcs(_: UnsafeMutablePointer<wchar_t>, _: UnsafeMutablePointer<UnsafePointer<Int8>>, _: UInt, _: UInt, _: COpaquePointer) -> UInt
func mbsrtowcs(_: UnsafeMutablePointer<wchar_t>, _: UnsafeMutablePointer<UnsafePointer<Int8>>, _: UInt, _: COpaquePointer) -> UInt
struct mbstat {
  var m_mbufs: UInt32
  var m_clusters: UInt32
  var m_spare: UInt32
  var m_clfree: UInt32
  var m_drops: UInt32
  var m_wait: UInt32
  var m_drain: UInt32
  var m_mtypes: (u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short)
  var m_mcfail: UInt32
  var m_mpfail: UInt32
  var m_msize: UInt32
  var m_mclbytes: UInt32
  var m_minclsize: UInt32
  var m_mlen: UInt32
  var m_mhlen: UInt32
  var m_bigclusters: UInt32
  var m_bigclfree: UInt32
  var m_bigmclbytes: UInt32
}
func mbstowcs(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<Int8>, _: UInt) -> UInt
func mbtowc(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<Int8>, _: UInt) -> Int32
typealias mbuf_t = COpaquePointer
typealias mcontext_t = UnsafeMutablePointer<__darwin_mcontext64>
typealias mem_entry_name_port_t = mach_port_t
func memccpy(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: Int32, _: UInt) -> UnsafeMutablePointer<Void>
func memchr(_: UnsafePointer<Void>, _: Int32, _: UInt) -> UnsafeMutablePointer<Void>
func memcmp(_: UnsafePointer<Void>, _: UnsafePointer<Void>, _: UInt) -> Int32
func memcpy(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: UInt) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.7) func memmem(_: UnsafePointer<Void>, _: UInt, _: UnsafePointer<Void>, _: UInt) -> UnsafeMutablePointer<Void>
func memmove(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: UInt) -> UnsafeMutablePointer<Void>
typealias memory_object_array_t = UnsafeMutablePointer<memory_object_t>
struct memory_object_attr_info {
  var copy_strategy: memory_object_copy_strategy_t
  var cluster_size: memory_object_cluster_size_t
  var may_cache_object: boolean_t
  var temporary: boolean_t
}
typealias memory_object_attr_info_data_t = memory_object_attr_info
typealias memory_object_attr_info_t = UnsafeMutablePointer<memory_object_attr_info>
struct memory_object_behave_info {
  var copy_strategy: memory_object_copy_strategy_t
  var temporary: boolean_t
  var invalidate: boolean_t
  var silent_overwrite: boolean_t
  var advisory_pageout: boolean_t
}
typealias memory_object_behave_info_data_t = memory_object_behave_info
typealias memory_object_behave_info_t = UnsafeMutablePointer<memory_object_behave_info>
typealias memory_object_cluster_size_t = natural_t
typealias memory_object_control_t = mach_port_t
typealias memory_object_copy_strategy_t = Int32
typealias memory_object_default_t = mach_port_t
typealias memory_object_fault_info_t = UnsafeMutablePointer<natural_t>
typealias memory_object_flavor_t = Int32
typealias memory_object_info_data_t = (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
typealias memory_object_info_t = UnsafeMutablePointer<Int32>
typealias memory_object_name_t = mach_port_t
typealias memory_object_offset_t = UInt64
struct memory_object_perf_info {
  var cluster_size: memory_object_cluster_size_t
  var may_cache: boolean_t
}
typealias memory_object_perf_info_data_t = memory_object_perf_info
typealias memory_object_perf_info_t = UnsafeMutablePointer<memory_object_perf_info>
typealias memory_object_return_t = Int32
typealias memory_object_size_t = UInt64
typealias memory_object_t = mach_port_t
typealias memory_reader_t = (task_t, vm_address_t, vm_size_t, UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> kern_return_t
func memset(_: UnsafeMutablePointer<Void>, _: Int32, _: UInt) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.5) func memset_pattern16(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: UInt)
@availability(OSX, introduced=10.5) func memset_pattern4(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: UInt)
@availability(OSX, introduced=10.5) func memset_pattern8(_: UnsafeMutablePointer<Void>, _: UnsafePointer<Void>, _: UInt)
@availability(OSX, introduced=10.9) func memset_s(_: UnsafeMutablePointer<Void>, _: rsize_t, _: Int32, _: rsize_t) -> errno_t
func mergesort(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> Int32
@availability(OSX, introduced=10.6) func mergesort_b(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: ((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)!) -> Int32
func mig_allocate(_: UnsafeMutablePointer<vm_address_t>, _: vm_size_t)
func mig_dealloc_reply_port(reply_port: mach_port_t)
func mig_deallocate(_: vm_address_t, _: vm_size_t)
func mig_get_reply_port() -> mach_port_t
typealias mig_impl_routine_t = CFunctionPointer<(() -> kern_return_t)>
func mig_put_reply_port(reply_port: mach_port_t)
struct mig_reply_error_t {
  var Head: mach_msg_header_t
  var NDR: NDR_record_t
  var RetCode: kern_return_t
}
func mig_reply_setup(_: UnsafeMutablePointer<mach_msg_header_t>, _: UnsafeMutablePointer<mach_msg_header_t>)
typealias mig_routine_arg_descriptor_t = COpaquePointer
typealias mig_routine_descriptor = routine_descriptor
typealias mig_routine_descriptor_t = UnsafeMutablePointer<mig_routine_descriptor>
typealias mig_routine_t = mig_stub_routine_t
typealias mig_server_routine_t = CFunctionPointer<((UnsafeMutablePointer<mach_msg_header_t>) -> mig_routine_t)>
func mig_strncpy(dest: UnsafeMutablePointer<Int8>, src: UnsafePointer<Int8>, len: Int32) -> Int32
typealias mig_stub_routine_t = CFunctionPointer<((UnsafeMutablePointer<mach_msg_header_t>, UnsafeMutablePointer<mach_msg_header_t>) -> Void)>
struct mig_subsystem {
  var server: mig_server_routine_t
  var start: mach_msg_id_t
  var end: mach_msg_id_t
  var maxsize: mach_msg_size_t
  var reserved: vm_address_t
  var routine: (mig_routine_descriptor)
}
typealias mig_subsystem_t = UnsafeMutablePointer<mig_subsystem>
struct mig_symtab {
  var ms_routine_name: UnsafeMutablePointer<Int8>
  var ms_routine_number: Int32
  var ms_routine: CFunctionPointer<(() -> Void)>
}
typealias mig_symtab_t = mig_symtab
func mincore(_: UnsafePointer<Void>, _: UInt, _: UnsafeMutablePointer<Int8>) -> Int32
func minherit(_: UnsafeMutablePointer<Void>, _: UInt, _: Int32) -> Int32
func minphys(bp: buf_t) -> u_int
func mkdir(_: UnsafePointer<Int8>, _: mode_t) -> Int32
@availability(OSX, introduced=10.10) func mkdirat(_: Int32, _: UnsafePointer<Int8>, _: mode_t) -> Int32
func mkdirx_np(_: UnsafePointer<Int8>, _: filesec_t) -> Int32
func mkdtemp(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func mkfifo(_: UnsafePointer<Int8>, _: mode_t) -> Int32
func mkfifox_np(_: UnsafePointer<Int8>, _: filesec_t) -> Int32
func mknod(_: UnsafePointer<Int8>, _: mode_t, _: dev_t) -> Int32
@availability(OSX, introduced=10.8) func mkpath_np(path: UnsafePointer<Int8>, omode: mode_t) -> Int32
func mkstemp(_: UnsafeMutablePointer<Int8>) -> Int32
func mkstemps(_: UnsafeMutablePointer<Int8>, _: Int32) -> Int32
func mktemp(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func mktime(_: UnsafeMutablePointer<tm>) -> time_t
func mlock(_: UnsafePointer<Void>, _: UInt) -> Int32
func mlockall(_: Int32) -> Int32
func mmap(_: UnsafeMutablePointer<Void>, _: UInt, _: Int32, _: Int32, _: Int32, _: off_t) -> UnsafeMutablePointer<Void>
typealias mode_t = __darwin_mode_t
func modf(_: Double, _: UnsafeMutablePointer<Double>) -> Double
func modff(_: Float, _: UnsafeMutablePointer<Float>) -> Float
func modwatch(_: er_t, _: Int32) -> Int32
func mount(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: Int32, _: UnsafeMutablePointer<Void>) -> Int32
typealias mount_t = COpaquePointer
func mprotect(_: UnsafeMutablePointer<Void>, _: UInt, _: Int32) -> Int32
func mrand48() -> Int
struct msg {
  var msg_next: UnsafeMutablePointer<msg>
  var msg_type: Int
  var msg_ts: UInt16
  var msg_spot: Int16
  var label: COpaquePointer
}
struct msg_labels_t {
  var sender: mach_port_name_t
}
struct msgbuf {
  var msg_magic: Int32
  var msg_size: Int32
  var msg_bufx: Int32
  var msg_bufr: Int32
  var msg_bufc: UnsafeMutablePointer<Int8>
}
func msgctl(_: Int32, _: Int32, _: UnsafeMutablePointer<__msqid_ds_new>) -> Int32
func msgget(_: key_t, _: Int32) -> Int32
struct msghdr {
  var msg_name: UnsafeMutablePointer<Void>
  var msg_namelen: socklen_t
  var msg_iov: UnsafeMutablePointer<iovec>
  var msg_iovlen: Int32
  var msg_control: UnsafeMutablePointer<Void>
  var msg_controllen: socklen_t
  var msg_flags: Int32
}
struct msginfo {
  var msgmax: Int32
  var msgmni: Int32
  var msgmnb: Int32
  var msgtql: Int32
  var msgssz: Int32
  var msgseg: Int32
}
typealias msglen_t = UInt
typealias msgqnum_t = UInt
func msgrcv(_: Int32, _: UnsafeMutablePointer<Void>, _: UInt, _: Int, _: Int32) -> Int
func msgsnd(_: Int32, _: UnsafePointer<Void>, _: UInt, _: Int32) -> Int32
struct mstats {
  var bytes_total: UInt
  var chunks_used: UInt
  var bytes_used: UInt
  var chunks_free: UInt
  var bytes_free: UInt
}
func mstats() -> mstats
func msync(_: UnsafeMutablePointer<Void>, _: UInt, _: Int32) -> Int32
func munlock(_: UnsafePointer<Void>, _: UInt) -> Int32
func munlockall() -> Int32
func munmap(_: UnsafeMutablePointer<Void>, _: UInt) -> Int32
struct mymsg {
  var mtype: Int
  var mtext: (Int8)
}
func nan(_: UnsafePointer<Int8>) -> Double
func nanf(_: UnsafePointer<Int8>) -> Float
func nanosleep(_: UnsafePointer<timespec>, _: UnsafeMutablePointer<timespec>) -> Int32
typealias natural_t = __darwin_natural_t
struct ndrv_info {
  var ndrvsi_if_family: UInt32
  var ndrvsi_if_unit: UInt32
  var ndrvsi_if_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
func nearbyint(_: Double) -> Double
func nearbyintf(_: Float) -> Float
struct net_event_data {
  var if_family: UInt32
  var if_unit: UInt32
  var if_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias netaddr_t = UInt32
struct netent {
  var n_name: UnsafeMutablePointer<Int8>
  var n_aliases: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var n_addrtype: Int32
  var n_net: UInt32
}
struct netfs_status {
  var ns_status: UInt32
  var ns_mountopts: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ns_waittime: UInt32
  var ns_threadcount: UInt32
  var ns_threadids: ()
}
struct network_port_t {
  var np_receiver: netaddr_t
  var np_owner: netaddr_t
  var np_puid: np_uid_t
  var np_sid: np_uid_t
}
func nextafter(_: Double, _: Double) -> Double
func nextafterf(_: Float, _: Float) -> Float
func nextwctype(_: wint_t, _: wctype_t) -> wint_t
typealias nfds_t = UInt32
func nfssvc(_: Int32, _: UnsafeMutablePointer<Void>) -> Int32
func nftw(_: UnsafePointer<Int8>, _: CFunctionPointer<((UnsafePointer<Int8>, UnsafePointer<stat>, Int32, UnsafeMutablePointer<FTW>) -> Int32)>, _: Int32, _: Int32) -> Int32
func nice(_: Int32) -> Int32
typealias nl_catd = UnsafeMutablePointer<__nl_cat_d>
typealias nl_item = __darwin_nl_item
func nl_langinfo(_: nl_item) -> UnsafeMutablePointer<Int8>
typealias nlink_t = __uint16_t
var noErr: Int {
  get {
    return
  }
}
var normal: Int {
  get {
    return
  }
}
typealias notify_port_t = mach_port_t
struct np_uid_t {
  var np_uid_high: Int
  var np_uid_low: Int
}
func nrand48(_: UnsafeMutablePointer<UInt16>) -> Int
struct ntsid_t {
  var sid_kind: UInt8
  var sid_authcount: UInt8
  var sid_authority: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var sid_authorities: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
typealias off_t = __darwin_off_t
struct ombstat {
  var m_mbufs: UInt32
  var m_clusters: UInt32
  var m_spare: UInt32
  var m_clfree: UInt32
  var m_drops: UInt32
  var m_wait: UInt32
  var m_drain: UInt32
  var m_mtypes: (u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short, u_short)
  var m_mcfail: UInt32
  var m_mpfail: UInt32
  var m_msize: UInt32
  var m_mclbytes: UInt32
  var m_minclsize: UInt32
  var m_mlen: UInt32
  var m_mhlen: UInt32
}
func opendir(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<DIR>
func openlog(_: UnsafePointer<Int8>, _: Int32, _: Int32)
func openx_np(_: UnsafePointer<Int8>, _: Int32, _: filesec_t) -> Int32
var optarg: UnsafeMutablePointer<Int8>
var opterr: Int32
var optind: Int32
struct option {
  var name: UnsafePointer<Int8>
  var has_arg: Int32
  var flag: UnsafeMutablePointer<Int32>
  var val: Int32
}
var optopt: Int32
var optreset: Int32
struct ostat {
  var st_dev: __uint16_t
  var st_ino: ino_t
  var st_mode: mode_t
  var st_nlink: nlink_t
  var st_uid: __uint16_t
  var st_gid: __uint16_t
  var st_rdev: __uint16_t
  var st_size: __int32_t
  var st_atimespec: timespec
  var st_mtimespec: timespec
  var st_ctimespec: timespec
  var st_blksize: __int32_t
  var st_blocks: __int32_t
  var st_flags: __uint32_t
  var st_gen: __uint32_t
}
var outline: Int {
  get {
    return
  }
}
typealias page_address_array_t = UnsafeMutablePointer<vm_offset_t>
func panic_init(_: mach_port_t)
struct passwd {
  var pw_name: UnsafeMutablePointer<Int8>
  var pw_passwd: UnsafeMutablePointer<Int8>
  var pw_uid: uid_t
  var pw_gid: gid_t
  var pw_change: __darwin_time_t
  var pw_class: UnsafeMutablePointer<Int8>
  var pw_gecos: UnsafeMutablePointer<Int8>
  var pw_dir: UnsafeMutablePointer<Int8>
  var pw_shell: UnsafeMutablePointer<Int8>
  var pw_expire: __darwin_time_t
}
func pathconf(_: UnsafePointer<Int8>, _: Int32) -> Int
func pause() -> Int32
func pclose(_: UnsafeMutablePointer<FILE>) -> Int32
func perror(_: UnsafePointer<Int8>)
func pfctlinput(_: Int32, _: UnsafeMutablePointer<sockaddr>)
func physio(_: CFunctionPointer<((buf_t) -> Void)>, _: buf_t, _: dev_t, _: Int32, _: CFunctionPointer<((buf_t) -> u_int)>, _: COpaquePointer, _: Int32) -> Int32
func pid_for_task(t: mach_port_name_t, x: UnsafeMutablePointer<Int32>) -> kern_return_t
typealias pid_t = __darwin_pid_t
func pipe(_: UnsafeMutablePointer<Int32>) -> Int32
struct pipe_fdinfo {
  var pfi: proc_fileinfo
  var pipeinfo: pipe_info
}
struct pipe_info {
  var pipe_stat: vinfo_stat
  var pipe_handle: UInt64
  var pipe_peerhandle: UInt64
  var pipe_status: Int32
  var rfu_1: Int32
}
struct pipebuf {
  var cnt: u_int
  var `in`: u_int
  var out: u_int
  var size: u_int
  var buffer: caddr_t
}
typealias pkthdr_t = COpaquePointer
struct plimit {
  var pl_rlimit: (rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit, rlimit)
  var pl_refcnt: Int32
}
typealias pointer_t = vm_offset_t
typealias policy_base_data_t = policy_bases
typealias policy_base_t = UnsafeMutablePointer<integer_t>
struct policy_bases {
  var ts: policy_timeshare_base_data_t
  var rr: policy_rr_base_data_t
  var fifo: policy_fifo_base_data_t
}
struct policy_fifo_base {
  var base_priority: integer_t
}
typealias policy_fifo_base_data_t = policy_fifo_base
typealias policy_fifo_base_t = UnsafeMutablePointer<policy_fifo_base>
struct policy_fifo_info {
  var max_priority: integer_t
  var base_priority: integer_t
  var depressed: boolean_t
  var depress_priority: integer_t
}
typealias policy_fifo_info_data_t = policy_fifo_info
typealias policy_fifo_info_t = UnsafeMutablePointer<policy_fifo_info>
struct policy_fifo_limit {
  var max_priority: integer_t
}
typealias policy_fifo_limit_data_t = policy_fifo_limit
typealias policy_fifo_limit_t = UnsafeMutablePointer<policy_fifo_limit>
typealias policy_info_data_t = policy_infos
typealias policy_info_t = UnsafeMutablePointer<integer_t>
struct policy_infos {
  var ts: policy_timeshare_info_data_t
  var rr: policy_rr_info_data_t
  var fifo: policy_fifo_info_data_t
}
typealias policy_limit_data_t = policy_limits
typealias policy_limit_t = UnsafeMutablePointer<integer_t>
struct policy_limits {
  var ts: policy_timeshare_limit_data_t
  var rr: policy_rr_limit_data_t
  var fifo: policy_fifo_limit_data_t
}
struct policy_rr_base {
  var base_priority: integer_t
  var quantum: integer_t
}
typealias policy_rr_base_data_t = policy_rr_base
typealias policy_rr_base_t = UnsafeMutablePointer<policy_rr_base>
struct policy_rr_info {
  var max_priority: integer_t
  var base_priority: integer_t
  var quantum: integer_t
  var depressed: boolean_t
  var depress_priority: integer_t
}
typealias policy_rr_info_data_t = policy_rr_info
typealias policy_rr_info_t = UnsafeMutablePointer<policy_rr_info>
struct policy_rr_limit {
  var max_priority: integer_t
}
typealias policy_rr_limit_data_t = policy_rr_limit
typealias policy_rr_limit_t = UnsafeMutablePointer<policy_rr_limit>
typealias policy_t = Int32
struct policy_timeshare_base {
  var base_priority: integer_t
}
typealias policy_timeshare_base_data_t = policy_timeshare_base
typealias policy_timeshare_base_t = UnsafeMutablePointer<policy_timeshare_base>
struct policy_timeshare_info {
  var max_priority: integer_t
  var base_priority: integer_t
  var cur_priority: integer_t
  var depressed: boolean_t
  var depress_priority: integer_t
}
typealias policy_timeshare_info_data_t = policy_timeshare_info
typealias policy_timeshare_info_t = UnsafeMutablePointer<policy_timeshare_info>
struct policy_timeshare_limit {
  var max_priority: integer_t
}
typealias policy_timeshare_limit_data_t = policy_timeshare_limit
typealias policy_timeshare_limit_t = UnsafeMutablePointer<policy_timeshare_limit>
func poll(_: UnsafeMutablePointer<pollfd>, _: nfds_t, _: Int32) -> Int32
struct pollfd {
  var fd: Int32
  var events: Int16
  var revents: Int16
}
func popen(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<FILE>
func port_obj_init(_: Int32)
var port_obj_table: UnsafeMutablePointer<port_obj_tentry>
var port_obj_table_size: Int32
struct port_obj_tentry {
  var pos_value: UnsafeMutablePointer<Void>
  var pos_type: Int32
}
func posix2time(_: time_t) -> time_t
typealias posix_cred_t = UnsafeMutablePointer<posix_cred>
func posix_madvise(_: UnsafeMutablePointer<Void>, _: UInt, _: Int32) -> Int32
@availability(OSX, introduced=10.6) func posix_memalign(_: UnsafeMutablePointer<UnsafeMutablePointer<Void>>, _: UInt, _: UInt) -> Int32
func posix_openpt(_: Int32) -> Int32
@availability(OSX, introduced=10.5) func posix_spawn(_: UnsafeMutablePointer<pid_t>, _: UnsafePointer<Int8>, _: UnsafePointer<posix_spawn_file_actions_t>, _: UnsafePointer<posix_spawnattr_t>, __argv: UnsafePointer<UnsafeMutablePointer<Int8>>, __envp: UnsafePointer<UnsafeMutablePointer<Int8>>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawn_file_actions_addclose(_: UnsafeMutablePointer<posix_spawn_file_actions_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.5) func posix_spawn_file_actions_adddup2(_: UnsafeMutablePointer<posix_spawn_file_actions_t>, _: Int32, _: Int32) -> Int32
@availability(OSX, introduced=10.7) func posix_spawn_file_actions_addinherit_np(_: UnsafeMutablePointer<posix_spawn_file_actions_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.5) func posix_spawn_file_actions_addopen(_: UnsafeMutablePointer<posix_spawn_file_actions_t>, _: Int32, _: UnsafePointer<Int8>, _: Int32, _: mode_t) -> Int32
@availability(OSX, introduced=10.5) func posix_spawn_file_actions_destroy(_: UnsafeMutablePointer<posix_spawn_file_actions_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawn_file_actions_init(_: UnsafeMutablePointer<posix_spawn_file_actions_t>) -> Int32
typealias posix_spawn_file_actions_t = UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.5) func posix_spawnattr_destroy(_: UnsafeMutablePointer<posix_spawnattr_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_getbinpref_np(_: UnsafePointer<posix_spawnattr_t>, _: UInt, _: UnsafeMutablePointer<cpu_type_t>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_getflags(_: UnsafePointer<posix_spawnattr_t>, _: UnsafeMutablePointer<Int16>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_getpgroup(_: UnsafePointer<posix_spawnattr_t>, _: UnsafeMutablePointer<pid_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_getsigdefault(_: UnsafePointer<posix_spawnattr_t>, _: UnsafeMutablePointer<sigset_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_getsigmask(_: UnsafePointer<posix_spawnattr_t>, _: UnsafeMutablePointer<sigset_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_init(_: UnsafeMutablePointer<posix_spawnattr_t>) -> Int32
@availability(OSX, introduced=10.6) func posix_spawnattr_setauditsessionport_np(_: UnsafeMutablePointer<posix_spawnattr_t>, _: mach_port_t) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setbinpref_np(_: UnsafeMutablePointer<posix_spawnattr_t>, _: UInt, _: UnsafeMutablePointer<cpu_type_t>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setexceptionports_np(_: UnsafeMutablePointer<posix_spawnattr_t>, _: exception_mask_t, _: mach_port_t, _: exception_behavior_t, _: thread_state_flavor_t) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setflags(_: UnsafeMutablePointer<posix_spawnattr_t>, _: Int16) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setpgroup(_: UnsafeMutablePointer<posix_spawnattr_t>, _: pid_t) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setsigdefault(_: UnsafeMutablePointer<posix_spawnattr_t>, _: UnsafePointer<sigset_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setsigmask(_: UnsafeMutablePointer<posix_spawnattr_t>, _: UnsafePointer<sigset_t>) -> Int32
@availability(OSX, introduced=10.5) func posix_spawnattr_setspecialport_np(_: UnsafeMutablePointer<posix_spawnattr_t>, _: mach_port_t, _: Int32) -> Int32
typealias posix_spawnattr_t = UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.5) func posix_spawnp(_: UnsafeMutablePointer<pid_t>, _: UnsafePointer<Int8>, _: UnsafePointer<posix_spawn_file_actions_t>, _: UnsafePointer<posix_spawnattr_t>, __argv: UnsafePointer<UnsafeMutablePointer<Int8>>, __envp: UnsafePointer<UnsafeMutablePointer<Int8>>) -> Int32
var postorder: VISIT {
  get {
    return
  }
}
func pow(_: Double, _: Double) -> Double
func powf(_: Float, _: Float) -> Float
typealias ppnum_t = UInt32
func pread(_: Int32, _: UnsafeMutablePointer<Void>, _: UInt, _: off_t) -> Int
var preorder: VISIT {
  get {
    return
  }
}
struct proc_bsdinfo {
  var pbi_flags: UInt32
  var pbi_status: UInt32
  var pbi_xstatus: UInt32
  var pbi_pid: UInt32
  var pbi_ppid: UInt32
  var pbi_uid: uid_t
  var pbi_gid: gid_t
  var pbi_ruid: uid_t
  var pbi_rgid: gid_t
  var pbi_svuid: uid_t
  var pbi_svgid: gid_t
  var rfu_1: UInt32
  var pbi_comm: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var pbi_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var pbi_nfiles: UInt32
  var pbi_pgid: UInt32
  var pbi_pjobc: UInt32
  var e_tdev: UInt32
  var e_tpgid: UInt32
  var pbi_nice: Int32
  var pbi_start_tvsec: UInt64
  var pbi_start_tvusec: UInt64
}
struct proc_bsdshortinfo {
  var pbsi_pid: UInt32
  var pbsi_ppid: UInt32
  var pbsi_pgid: UInt32
  var pbsi_status: UInt32
  var pbsi_comm: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var pbsi_flags: UInt32
  var pbsi_uid: uid_t
  var pbsi_gid: gid_t
  var pbsi_ruid: uid_t
  var pbsi_rgid: gid_t
  var pbsi_svuid: uid_t
  var pbsi_svgid: gid_t
  var pbsi_rfu: UInt32
}
struct proc_fdinfo {
  var proc_fd: Int32
  var proc_fdtype: UInt32
}
struct proc_fileinfo {
  var fi_openflags: UInt32
  var fi_status: UInt32
  var fi_offset: off_t
  var fi_type: Int32
  var fi_guardflags: UInt32
}
struct proc_fileportinfo {
  var proc_fileport: UInt32
  var proc_fdtype: UInt32
}
struct proc_regioninfo {
  var pri_protection: UInt32
  var pri_max_protection: UInt32
  var pri_inheritance: UInt32
  var pri_flags: UInt32
  var pri_offset: UInt64
  var pri_behavior: UInt32
  var pri_user_wired_count: UInt32
  var pri_user_tag: UInt32
  var pri_pages_resident: UInt32
  var pri_pages_shared_now_private: UInt32
  var pri_pages_swapped_out: UInt32
  var pri_pages_dirtied: UInt32
  var pri_ref_count: UInt32
  var pri_shadow_depth: UInt32
  var pri_share_mode: UInt32
  var pri_private_pages_resident: UInt32
  var pri_shared_pages_resident: UInt32
  var pri_obj_id: UInt32
  var pri_depth: UInt32
  var pri_address: UInt64
  var pri_size: UInt64
}
struct proc_regionwithpathinfo {
  var prp_prinfo: proc_regioninfo
  var prp_vip: vnode_info_path
}
struct proc_rlimit_control_wakeupmon {
  var wm_flags: UInt32
  var wm_rate: Int32
}
typealias proc_t = COpaquePointer
struct proc_taskallinfo {
  var pbsd: proc_bsdinfo
  var ptinfo: proc_taskinfo
}
struct proc_taskinfo {
  var pti_virtual_size: UInt64
  var pti_resident_size: UInt64
  var pti_total_user: UInt64
  var pti_total_system: UInt64
  var pti_threads_user: UInt64
  var pti_threads_system: UInt64
  var pti_policy: Int32
  var pti_faults: Int32
  var pti_pageins: Int32
  var pti_cow_faults: Int32
  var pti_messages_sent: Int32
  var pti_messages_received: Int32
  var pti_syscalls_mach: Int32
  var pti_syscalls_unix: Int32
  var pti_csw: Int32
  var pti_threadnum: Int32
  var pti_numrunning: Int32
  var pti_priority: Int32
}
struct proc_threadinfo {
  var pth_user_time: UInt64
  var pth_system_time: UInt64
  var pth_cpu_usage: Int32
  var pth_policy: Int32
  var pth_run_state: Int32
  var pth_flags: Int32
  var pth_sleep_time: Int32
  var pth_curpri: Int32
  var pth_priority: Int32
  var pth_maxpriority: Int32
  var pth_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct proc_threadwithpathinfo {
  var pt: proc_threadinfo
  var pvip: vnode_info_path
}
struct proc_vnodepathinfo {
  var pvi_cdir: vnode_info_path
  var pvi_rdir: vnode_info_path
}
struct proc_workqueueinfo {
  var pwq_nthreads: UInt32
  var pwq_runthreads: UInt32
  var pwq_blockedthreads: UInt32
  var pwq_state: UInt32
}
typealias processor_array_t = UnsafeMutablePointer<processor_t>
func processor_assign(processor: processor_t, new_set: processor_set_t, wait: boolean_t) -> kern_return_t
struct processor_basic_info {
  var cpu_type: cpu_type_t
  var cpu_subtype: cpu_subtype_t
  var running: boolean_t
  var slot_num: Int32
  var is_master: boolean_t
}
typealias processor_basic_info_data_t = processor_basic_info
typealias processor_basic_info_t = UnsafeMutablePointer<processor_basic_info>
func processor_control(processor: processor_t, processor_cmd: processor_info_t, processor_cmdCnt: mach_msg_type_number_t) -> kern_return_t
struct processor_cpu_load_info {
  var cpu_ticks: (UInt32, UInt32, UInt32, UInt32)
}
typealias processor_cpu_load_info_data_t = processor_cpu_load_info
typealias processor_cpu_load_info_t = UnsafeMutablePointer<processor_cpu_load_info>
func processor_exit(processor: processor_t) -> kern_return_t
typealias processor_flavor_t = Int32
func processor_get_assignment(processor: processor_t, assigned_set: UnsafeMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_info(processor: processor_t, flavor: processor_flavor_t, host: UnsafeMutablePointer<host_t>, processor_info_out: processor_info_t, processor_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias processor_info_array_t = UnsafeMutablePointer<integer_t>
typealias processor_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias processor_info_t = UnsafeMutablePointer<integer_t>
typealias processor_port_array_t = processor_array_t
typealias processor_port_t = processor_t
typealias processor_set_array_t = UnsafeMutablePointer<processor_set_t>
struct processor_set_basic_info {
  var processor_count: Int32
  var default_policy: Int32
}
typealias processor_set_basic_info_data_t = processor_set_basic_info
typealias processor_set_basic_info_t = UnsafeMutablePointer<processor_set_basic_info>
typealias processor_set_control_port_t = processor_set_t
typealias processor_set_control_t = mach_port_t
func processor_set_create(host: host_t, new_set: UnsafeMutablePointer<processor_set_t>, new_name: UnsafeMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_set_default(host: host_t, default_set: UnsafeMutablePointer<processor_set_name_t>) -> kern_return_t
func processor_set_destroy(set: processor_set_t) -> kern_return_t
typealias processor_set_flavor_t = Int32
func processor_set_info(set_name: processor_set_name_t, flavor: Int32, host: UnsafeMutablePointer<host_t>, info_out: processor_set_info_t, info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias processor_set_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias processor_set_info_t = UnsafeMutablePointer<integer_t>
struct processor_set_load_info {
  var task_count: Int32
  var thread_count: Int32
  var load_average: integer_t
  var mach_factor: integer_t
}
typealias processor_set_load_info_data_t = processor_set_load_info
typealias processor_set_load_info_t = UnsafeMutablePointer<processor_set_load_info>
func processor_set_max_priority(processor_set: processor_set_t, max_priority: Int32, change_threads: boolean_t) -> kern_return_t
typealias processor_set_name_array_t = UnsafeMutablePointer<processor_set_t>
typealias processor_set_name_port_array_t = processor_set_array_t
typealias processor_set_name_port_t = processor_set_t
typealias processor_set_name_t = processor_set_t
func processor_set_policy_control(pset: processor_set_t, flavor: processor_set_flavor_t, policy_info: processor_set_info_t, policy_infoCnt: mach_msg_type_number_t, change: boolean_t) -> kern_return_t
func processor_set_policy_disable(processor_set: processor_set_t, policy: Int32, change_threads: boolean_t) -> kern_return_t
func processor_set_policy_enable(processor_set: processor_set_t, policy: Int32) -> kern_return_t
typealias processor_set_port_t = processor_set_t
func processor_set_stack_usage(pset: processor_set_t, ltotal: UnsafeMutablePointer<UInt32>, space: UnsafeMutablePointer<vm_size_t>, resident: UnsafeMutablePointer<vm_size_t>, maxusage: UnsafeMutablePointer<vm_size_t>, maxstack: UnsafeMutablePointer<vm_offset_t>) -> kern_return_t
func processor_set_statistics(pset: processor_set_name_t, flavor: processor_set_flavor_t, info_out: processor_set_info_t, info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias processor_set_t = mach_port_t
func processor_set_tasks(processor_set: processor_set_t, task_list: UnsafeMutablePointer<task_array_t>, task_listCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_set_threads(processor_set: processor_set_t, thread_list: UnsafeMutablePointer<thread_act_array_t>, thread_listCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func processor_start(processor: processor_t) -> kern_return_t
typealias processor_t = mach_port_t
func profil(_: UnsafeMutablePointer<Int8>, _: UInt, _: UInt, _: UInt32) -> Int32
struct protoent {
  var p_name: UnsafeMutablePointer<Int8>
  var p_aliases: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var p_proto: Int32
}
func pselect(_: Int32, _: UnsafeMutablePointer<fd_set>, _: UnsafeMutablePointer<fd_set>, _: UnsafeMutablePointer<fd_set>, _: UnsafePointer<timespec>, _: UnsafePointer<sigset_t>) -> Int32
struct psem_fdinfo {
  var pfi: proc_fileinfo
  var pseminfo: psem_info
}
struct psem_info {
  var psem_stat: vinfo_stat
  var psem_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct pseminfo {
  var psem_flags: UInt32
  var psem_usecount: UInt32
  var psem_mode: mode_t
  var psem_uid: uid_t
  var psem_gid: gid_t
  var psem_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var psem_semobject: UnsafeMutablePointer<Void>
  var psem_label: COpaquePointer
  var psem_creator_pid: pid_t
  var psem_creator_uniqueid: UInt64
}
struct pshm_fdinfo {
  var pfi: proc_fileinfo
  var pshminfo: pshm_info
}
struct pshm_info {
  var pshm_stat: vinfo_stat
  var pshm_mappaddr: UInt64
  var pshm_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct pshminfo {
  var pshm_flags: UInt32
  var pshm_usecount: UInt32
  var pshm_length: off_t
  var pshm_mode: mode_t
  var pshm_uid: uid_t
  var pshm_gid: gid_t
  var pshm_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var pshm_memobject: UnsafeMutablePointer<Void>
  var pshm_label: COpaquePointer
}
func psignal(_: UInt32, _: UnsafePointer<Int8>)
@availability(OSX, introduced=10.6) func psort(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>)
@availability(OSX, introduced=10.6) func psort_b(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: ((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)!)
@availability(OSX, introduced=10.6) func psort_r(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: UnsafeMutablePointer<Void>, _: CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>)
struct pstats {
  var p_ru: rusage
  var p_cru: rusage
  var p_prof: uprof
  var ps_start: UInt64
}
@availability(OSX, introduced=10.4) func pthread_atfork(_: CFunctionPointer<(() -> Void)>, _: CFunctionPointer<(() -> Void)>, _: CFunctionPointer<(() -> Void)>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_destroy(_: UnsafeMutablePointer<pthread_attr_t>) -> Int32
@availability(OSX, introduced=10.10) func pthread_attr_get_qos_class_np(__attr: UnsafeMutablePointer<pthread_attr_t>, __qos_class: UnsafeMutablePointer<qos_class_t>, __relative_priority: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getdetachstate(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getguardsize(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getinheritsched(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getschedparam(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<sched_param>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getschedpolicy(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getscope(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getstack(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getstackaddr(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_getstacksize(_: UnsafePointer<pthread_attr_t>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_init(_: UnsafeMutablePointer<pthread_attr_t>) -> Int32
@availability(OSX, introduced=10.10) func pthread_attr_set_qos_class_np(__attr: UnsafeMutablePointer<pthread_attr_t>, __qos_class: qos_class_t, __relative_priority: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setdetachstate(_: UnsafeMutablePointer<pthread_attr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setguardsize(_: UnsafeMutablePointer<pthread_attr_t>, _: UInt) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setinheritsched(_: UnsafeMutablePointer<pthread_attr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setschedparam(_: UnsafeMutablePointer<pthread_attr_t>, _: UnsafePointer<sched_param>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setschedpolicy(_: UnsafeMutablePointer<pthread_attr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setscope(_: UnsafeMutablePointer<pthread_attr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setstack(_: UnsafeMutablePointer<pthread_attr_t>, _: UnsafeMutablePointer<Void>, _: UInt) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setstackaddr(_: UnsafeMutablePointer<pthread_attr_t>, _: UnsafeMutablePointer<Void>) -> Int32
@availability(OSX, introduced=10.4) func pthread_attr_setstacksize(_: UnsafeMutablePointer<pthread_attr_t>, _: UInt) -> Int32
typealias pthread_attr_t = __darwin_pthread_attr_t
@availability(OSX, introduced=10.4) func pthread_cancel(_: pthread_t) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_broadcast(_: UnsafeMutablePointer<pthread_cond_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_destroy(_: UnsafeMutablePointer<pthread_cond_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_init(_: UnsafeMutablePointer<pthread_cond_t>, _: UnsafePointer<pthread_condattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_signal(_: UnsafeMutablePointer<pthread_cond_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_signal_thread_np(_: UnsafeMutablePointer<pthread_cond_t>, _: pthread_t) -> Int32
typealias pthread_cond_t = __darwin_pthread_cond_t
@availability(OSX, introduced=10.4) func pthread_cond_timedwait(_: UnsafeMutablePointer<pthread_cond_t>, _: UnsafeMutablePointer<pthread_mutex_t>, _: UnsafePointer<timespec>) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_timedwait_relative_np(_: UnsafeMutablePointer<pthread_cond_t>, _: UnsafeMutablePointer<pthread_mutex_t>, _: UnsafePointer<timespec>) -> Int32
@availability(OSX, introduced=10.4) func pthread_cond_wait(_: UnsafeMutablePointer<pthread_cond_t>, _: UnsafeMutablePointer<pthread_mutex_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_condattr_destroy(_: UnsafeMutablePointer<pthread_condattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_condattr_getpshared(_: UnsafePointer<pthread_condattr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_condattr_init(_: UnsafeMutablePointer<pthread_condattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_condattr_setpshared(_: UnsafeMutablePointer<pthread_condattr_t>, _: Int32) -> Int32
typealias pthread_condattr_t = __darwin_pthread_condattr_t
@availability(OSX, introduced=10.4) func pthread_create(_: UnsafeMutablePointer<pthread_t>, _: UnsafePointer<pthread_attr_t>, _: CFunctionPointer<((UnsafeMutablePointer<Void>) -> UnsafeMutablePointer<Void>)>, _: UnsafeMutablePointer<Void>) -> Int32
@availability(OSX, introduced=10.4) func pthread_create_suspended_np(_: UnsafeMutablePointer<pthread_t>, _: UnsafePointer<pthread_attr_t>, _: CFunctionPointer<((UnsafeMutablePointer<Void>) -> UnsafeMutablePointer<Void>)>, _: UnsafeMutablePointer<Void>) -> Int32
@availability(OSX, introduced=10.4) func pthread_detach(_: pthread_t) -> Int32
@availability(OSX, introduced=10.4) func pthread_equal(_: pthread_t, _: pthread_t) -> Int32
@availability(OSX, introduced=10.4) @noreturn func pthread_exit(_: UnsafeMutablePointer<Void>)
@availability(OSX, introduced=10.5) func pthread_from_mach_thread_np(_: mach_port_t) -> pthread_t
@availability(OSX, introduced=10.10) func pthread_get_qos_class_np(__pthread: pthread_t, __qos_class: UnsafeMutablePointer<qos_class_t>, __relative_priority: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_get_stackaddr_np(_: pthread_t) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.4) func pthread_get_stacksize_np(_: pthread_t) -> UInt
@availability(OSX, introduced=10.4) func pthread_getconcurrency() -> Int32
@availability(OSX, introduced=10.6) func pthread_getname_np(_: pthread_t, _: UnsafeMutablePointer<Int8>, _: UInt) -> Int32
@availability(OSX, introduced=10.4) func pthread_getschedparam(_: pthread_t, _: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<sched_param>) -> Int32
@availability(OSX, introduced=10.4) func pthread_getspecific(_: pthread_key_t) -> UnsafeMutablePointer<Void>
func pthread_getugid_np(_: UnsafeMutablePointer<uid_t>, _: UnsafeMutablePointer<gid_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_is_threaded_np() -> Int32
@availability(OSX, introduced=10.4) func pthread_join(_: pthread_t, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>) -> Int32
@availability(OSX, introduced=10.4) func pthread_key_create(_: UnsafeMutablePointer<pthread_key_t>, _: CFunctionPointer<((UnsafeMutablePointer<Void>) -> Void)>) -> Int32
@availability(OSX, introduced=10.4) func pthread_key_delete(_: pthread_key_t) -> Int32
typealias pthread_key_t = __darwin_pthread_key_t
@availability(OSX, introduced=10.4) func pthread_kill(_: pthread_t, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_mach_thread_np(_: pthread_t) -> mach_port_t
@availability(OSX, introduced=10.4) func pthread_main_np() -> Int32
@availability(OSX, introduced=10.4) func pthread_mutex_destroy(_: UnsafeMutablePointer<pthread_mutex_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutex_getprioceiling(_: UnsafePointer<pthread_mutex_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutex_init(_: UnsafeMutablePointer<pthread_mutex_t>, _: UnsafePointer<pthread_mutexattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutex_lock(_: UnsafeMutablePointer<pthread_mutex_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutex_setprioceiling(_: UnsafeMutablePointer<pthread_mutex_t>, _: Int32, _: UnsafeMutablePointer<Int32>) -> Int32
typealias pthread_mutex_t = __darwin_pthread_mutex_t
@availability(OSX, introduced=10.4) func pthread_mutex_trylock(_: UnsafeMutablePointer<pthread_mutex_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutex_unlock(_: UnsafeMutablePointer<pthread_mutex_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_destroy(_: UnsafeMutablePointer<pthread_mutexattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_getprioceiling(_: UnsafePointer<pthread_mutexattr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_getprotocol(_: UnsafePointer<pthread_mutexattr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_getpshared(_: UnsafePointer<pthread_mutexattr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_gettype(_: UnsafePointer<pthread_mutexattr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_init(_: UnsafeMutablePointer<pthread_mutexattr_t>) -> Int32
@availability(OSX, introduced=10.7) func pthread_mutexattr_setpolicy_np(_: UnsafeMutablePointer<pthread_mutexattr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_setprioceiling(_: UnsafeMutablePointer<pthread_mutexattr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_setprotocol(_: UnsafeMutablePointer<pthread_mutexattr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_setpshared(_: UnsafeMutablePointer<pthread_mutexattr_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_mutexattr_settype(_: UnsafeMutablePointer<pthread_mutexattr_t>, _: Int32) -> Int32
typealias pthread_mutexattr_t = __darwin_pthread_mutexattr_t
@availability(OSX, introduced=10.4) func pthread_once(_: UnsafeMutablePointer<pthread_once_t>, _: CFunctionPointer<(() -> Void)>) -> Int32
typealias pthread_once_t = __darwin_pthread_once_t
@availability(OSX, introduced=10.10) func pthread_override_qos_class_end_np(__override: pthread_override_t) -> Int32
@availability(OSX, introduced=10.10) func pthread_override_qos_class_start_np(__pthread: pthread_t, __qos_class: qos_class_t, __relative_priority: Int32) -> pthread_override_t
typealias pthread_override_t = COpaquePointer
@availability(OSX, introduced=10.4) func pthread_rwlock_destroy(_: UnsafeMutablePointer<pthread_rwlock_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlock_init(_: UnsafeMutablePointer<pthread_rwlock_t>, _: UnsafePointer<pthread_rwlockattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlock_rdlock(_: UnsafeMutablePointer<pthread_rwlock_t>) -> Int32
typealias pthread_rwlock_t = __darwin_pthread_rwlock_t
@availability(OSX, introduced=10.4) func pthread_rwlock_tryrdlock(_: UnsafeMutablePointer<pthread_rwlock_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlock_trywrlock(_: UnsafeMutablePointer<pthread_rwlock_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlock_unlock(_: UnsafeMutablePointer<pthread_rwlock_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlock_wrlock(_: UnsafeMutablePointer<pthread_rwlock_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlockattr_destroy(_: UnsafeMutablePointer<pthread_rwlockattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlockattr_getpshared(_: UnsafePointer<pthread_rwlockattr_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlockattr_init(_: UnsafeMutablePointer<pthread_rwlockattr_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_rwlockattr_setpshared(_: UnsafeMutablePointer<pthread_rwlockattr_t>, _: Int32) -> Int32
typealias pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t
@availability(OSX, introduced=10.4) func pthread_self() -> pthread_t
@availability(OSX, introduced=10.10) func pthread_set_qos_class_self_np(__qos_class: qos_class_t, __relative_priority: Int32) -> Int32
@availability(OSX, introduced=10.4) func pthread_setcancelstate(_: Int32, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_setcanceltype(_: Int32, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(OSX, introduced=10.4) func pthread_setconcurrency(_: Int32) -> Int32
@availability(OSX, introduced=10.6) func pthread_setname_np(_: UnsafePointer<Int8>) -> Int32
@availability(OSX, introduced=10.4) func pthread_setschedparam(_: pthread_t, _: Int32, _: UnsafePointer<sched_param>) -> Int32
@availability(OSX, introduced=10.4) func pthread_setspecific(_: pthread_key_t, _: UnsafePointer<Void>) -> Int32
func pthread_setugid_np(_: uid_t, _: gid_t) -> Int32
@availability(OSX, introduced=10.4) func pthread_sigmask(_: Int32, _: UnsafePointer<sigset_t>, _: UnsafeMutablePointer<sigset_t>) -> Int32
typealias pthread_t = __darwin_pthread_t
@availability(OSX, introduced=10.4) func pthread_testcancel()
@availability(OSX, introduced=10.6) func pthread_threadid_np(_: pthread_t, _: UnsafeMutablePointer<__uint64_t>) -> Int32
@availability(OSX, introduced=10.4) func pthread_yield_np()
typealias ptrdiff_t = Int
func ptsname(_: Int32) -> UnsafeMutablePointer<Int8>
func putc(_: Int32, _: UnsafeMutablePointer<FILE>) -> Int32
func putc_unlocked(_: Int32, _: UnsafeMutablePointer<FILE>) -> Int32
func putchar(c: Int32) -> Int32
func putchar_unlocked(_: Int32) -> Int32
func putenv(_: UnsafeMutablePointer<Int8>) -> Int32
func puts(_: UnsafePointer<Int8>) -> Int32
func pututxline(_: UnsafePointer<utmpx>) -> UnsafeMutablePointer<utmpx>
func putw(_: Int32, _: UnsafeMutablePointer<FILE>) -> Int32
func putwc(_: wchar_t, _: UnsafeMutablePointer<FILE>) -> wint_t
func putwchar(_: wchar_t) -> wint_t
func pwrite(_: Int32, _: UnsafePointer<Void>, _: UInt, _: off_t) -> Int
typealias qaddr_t = UnsafeMutablePointer<quad_t>
struct qelem {
  var q_forw: UnsafeMutablePointer<qelem>
  var q_back: UnsafeMutablePointer<qelem>
  var q_data: UnsafeMutablePointer<Int8>
}
@availability(OSX, introduced=10.10) func qos_class_main() -> qos_class_t
@availability(OSX, introduced=10.10) func qos_class_self() -> qos_class_t
struct qos_class_t {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
func qsort(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>)
@availability(OSX, introduced=10.6) func qsort_b(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: ((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)!)
func qsort_r(_: UnsafeMutablePointer<Void>, _: UInt, _: UInt, _: UnsafeMutablePointer<Void>, _: CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>)
typealias quad_t = Int64
func quotactl(_: UnsafePointer<Int8>, _: Int32, _: Int32, _: caddr_t) -> Int32
func radixsort(_: UnsafeMutablePointer<UnsafePointer<UInt8>>, _: Int32, _: UnsafePointer<UInt8>, _: UInt32) -> Int32
struct radvisory {
  var ra_offset: off_t
  var ra_count: Int32
}
func raise(_: Int32) -> Int32
func rand() -> Int32
func rand_r(_: UnsafeMutablePointer<UInt32>) -> Int32
func random() -> Int
struct rawarc {
  var raw_frompc: UInt32
  var raw_selfpc: UInt32
  var raw_count: Int32
}
struct rawarc_64 {
  var raw_frompc: UInt64
  var raw_selfpc: UInt64
  var raw_count: Int32
}
struct rawarc_order {
  var raw_frompc: UInt32
  var raw_selfpc: UInt32
  var raw_count: UInt32
  var raw_order: UInt32
}
struct rawarc_order_64 {
  var raw_frompc: UInt64
  var raw_selfpc: UInt64
  var raw_count: UInt32
  var raw_order: UInt32
}
typealias rawarc_order_t = rawarc_order_64
typealias rawarc_t = rawarc_64
struct rb_node {
  var opaque: (UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>)
}
typealias rb_node_t = rb_node
struct rb_tree {
  var opaque: (UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>)
}
@availability(OSX, introduced=10.9) func rb_tree_count(_: UnsafeMutablePointer<rb_tree_t>) -> UInt
@availability(OSX, introduced=10.9) func rb_tree_find_node(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafePointer<Void>) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.9) func rb_tree_find_node_geq(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafePointer<Void>) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.9) func rb_tree_find_node_leq(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafePointer<Void>) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.9) func rb_tree_init(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafePointer<rb_tree_ops_t>)
@availability(OSX, introduced=10.9) func rb_tree_insert_node(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafeMutablePointer<Void>) -> UnsafeMutablePointer<Void>
@availability(OSX, introduced=10.9) func rb_tree_iterate(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafeMutablePointer<Void>, _: UInt32) -> UnsafeMutablePointer<Void>
struct rb_tree_ops_t {
  var rbto_compare_nodes: rbto_compare_nodes_fn
  var rbto_compare_key: rbto_compare_key_fn
  var rbto_node_offset: UInt
  var rbto_context: UnsafeMutablePointer<Void>
}
@availability(OSX, introduced=10.9) func rb_tree_remove_node(_: UnsafeMutablePointer<rb_tree_t>, _: UnsafeMutablePointer<Void>)
typealias rb_tree_t = rb_tree
typealias rbto_compare_key_fn = CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>
typealias rbto_compare_nodes_fn = CFunctionPointer<((UnsafeMutablePointer<Void>, UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>
func rcmd(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int32>) -> Int32
func rcmd_af(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int32>, _: Int32) -> Int32
func read(_: Int32, _: UnsafeMutablePointer<Void>, _: UInt) -> Int
func read_frandom(buffer: UnsafeMutablePointer<Void>, numBytes: u_int)
func read_random(buffer: UnsafeMutablePointer<Void>, numBytes: u_int)
func readdir(_: UnsafeMutablePointer<DIR>) -> UnsafeMutablePointer<dirent>
func readdir_r(_: UnsafeMutablePointer<DIR>, _: UnsafeMutablePointer<dirent>, _: UnsafeMutablePointer<UnsafeMutablePointer<dirent>>) -> Int32
func readlink(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int8>, _: UInt) -> Int
@availability(OSX, introduced=10.10) func readlinkat(_: Int32, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int8>, _: UInt) -> Int
func readv(_: Int32, _: UnsafePointer<iovec>, _: Int32) -> Int
func realloc(_: UnsafeMutablePointer<Void>, _: UInt) -> UnsafeMutablePointer<Void>
func reallocf(_: UnsafeMutablePointer<Void>, _: UInt) -> UnsafeMutablePointer<Void>
func realpath(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
func reboot(_: Int32) -> Int32
func recv(_: Int32, _: UnsafeMutablePointer<Void>, _: UInt, _: Int32) -> Int
func recvfrom(_: Int32, _: UnsafeMutablePointer<Void>, _: UInt, _: Int32, _: UnsafeMutablePointer<sockaddr>, _: UnsafeMutablePointer<socklen_t>) -> Int
func recvmsg(_: Int32, _: UnsafeMutablePointer<msghdr>, _: Int32) -> Int
typealias reg64_t = UInt32
func regcomp(_: UnsafeMutablePointer<regex_t>, _: UnsafePointer<Int8>, _: Int32) -> Int32
func regerror(_: Int32, _: UnsafePointer<regex_t>, _: UnsafeMutablePointer<Int8>, _: UInt) -> UInt
struct regex_t {
  var re_magic: Int32
  var re_nsub: UInt
  var re_endp: UnsafePointer<Int8>
  var re_g: COpaquePointer
}
func regexec(_: UnsafePointer<regex_t>, _: UnsafePointer<Int8>, _: UInt, __pmatch: UnsafeMutablePointer<regmatch_t>, _: Int32) -> Int32
func regfree(_: UnsafeMutablePointer<regex_t>)
typealias register_t = Int64
struct regmatch_t {
  var rm_so: regoff_t
  var rm_eo: regoff_t
}
@availability(OSX, introduced=10.8) func regncomp(_: UnsafeMutablePointer<regex_t>, _: UnsafePointer<Int8>, _: UInt, _: Int32) -> Int32
@availability(OSX, introduced=10.8) func regnexec(_: UnsafePointer<regex_t>, _: UnsafePointer<Int8>, _: UInt, _: UInt, __pmatch: UnsafeMutablePointer<regmatch_t>, _: Int32) -> Int32
typealias regoff_t = __darwin_off_t
@availability(OSX, introduced=10.8) func regwcomp(_: UnsafeMutablePointer<regex_t>, _: UnsafePointer<wchar_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.8) func regwexec(_: UnsafePointer<regex_t>, _: UnsafePointer<wchar_t>, _: UInt, __pmatch: UnsafeMutablePointer<regmatch_t>, _: Int32) -> Int32
@availability(OSX, introduced=10.8) func regwncomp(_: UnsafeMutablePointer<regex_t>, _: UnsafePointer<wchar_t>, _: UInt, _: Int32) -> Int32
@availability(OSX, introduced=10.8) func regwnexec(_: UnsafePointer<regex_t>, _: UnsafePointer<wchar_t>, _: UInt, _: UInt, __pmatch: UnsafeMutablePointer<regmatch_t>, _: Int32) -> Int32
func remainder(_: Double, _: Double) -> Double
func remainderf(_: Float, _: Float) -> Float
func remove(_: UnsafePointer<Int8>) -> Int32
func remque(_: UnsafeMutablePointer<Void>)
func remquo(_: Double, _: Double, _: UnsafeMutablePointer<Int32>) -> Double
func remquof(_: Float, _: Float, _: UnsafeMutablePointer<Int32>) -> Float
func rename(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
@availability(OSX, introduced=10.10) func renameat(_: Int32, _: UnsafePointer<Int8>, _: Int32, _: UnsafePointer<Int8>) -> Int32
func revoke(_: UnsafePointer<Int8>) -> Int32
func rewind(_: UnsafeMutablePointer<FILE>)
func rewinddir(_: UnsafeMutablePointer<DIR>)
func rindex(_: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<Int8>
func rint(_: Double) -> Double
func rintf(_: Float) -> Float
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func rinttol(_: Double) -> Int
typealias rlim_t = __uint64_t
struct rlimit {
  var rlim_cur: rlim_t
  var rlim_max: rlim_t
}
func rmdir(_: UnsafePointer<Int8>) -> Int32
func round(_: Double) -> Double
func roundf(_: Float) -> Float
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func roundtol(_: Double) -> Int
typealias route_t = COpaquePointer
typealias routine_arg_descriptor_t = COpaquePointer
typealias routine_arg_offset = UInt32
typealias routine_arg_size = UInt32
typealias routine_arg_type = UInt32
struct routine_descriptor {
  var impl_routine: mig_impl_routine_t
  var stub_routine: mig_stub_routine_t
  var argc: UInt32
  var descr_count: UInt32
  var arg_descr: routine_arg_descriptor_t
  var max_reply_msg: UInt32
}
typealias routine_descriptor_t = UnsafeMutablePointer<routine_descriptor>
struct rpc_routine_arg_descriptor {
  var type: routine_arg_type
  var size: routine_arg_size
  var count: routine_arg_size
  var offset: routine_arg_offset
}
typealias rpc_routine_arg_descriptor_t = UnsafeMutablePointer<rpc_routine_arg_descriptor>
struct rpc_routine_descriptor {
  var impl_routine: mig_impl_routine_t
  var stub_routine: mig_stub_routine_t
  var argc: UInt32
  var descr_count: UInt32
  var arg_descr: rpc_routine_arg_descriptor_t
  var max_reply_msg: UInt32
}
typealias rpc_routine_descriptor_t = UnsafeMutablePointer<rpc_routine_descriptor>
struct rpc_signature {
  var rd: rpc_routine_descriptor
  var rad: (rpc_routine_arg_descriptor)
}
struct rpc_subsystem {
  var reserved: UnsafeMutablePointer<Void>
  var start: mach_msg_id_t
  var end: mach_msg_id_t
  var maxsize: UInt32
  var base_addr: vm_address_t
  var routine: (rpc_routine_descriptor)
  var arg_descriptor: (rpc_routine_arg_descriptor)
}
typealias rpc_subsystem_t = UnsafeMutablePointer<rpc_subsystem>
struct rpcent {
  var r_name: UnsafeMutablePointer<Int8>
  var r_aliases: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var r_number: Int32
}
func rresvport(_: UnsafeMutablePointer<Int32>) -> Int32
func rresvport_af(_: UnsafeMutablePointer<Int32>, _: Int32) -> Int32
typealias rsize_t = UInt
struct rslvmulti_req {
  var sa: UnsafeMutablePointer<sockaddr>
  var llsa: UnsafeMutablePointer<UnsafeMutablePointer<sockaddr>>
}
struct rt_addrinfo {
  var rti_addrs: Int32
  var rti_info: (UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>, UnsafeMutablePointer<sockaddr>)
}
struct rt_metrics {
  var rmx_locks: UInt32
  var rmx_mtu: UInt32
  var rmx_hopcount: UInt32
  var rmx_expire: Int32
  var rmx_recvpipe: UInt32
  var rmx_sendpipe: UInt32
  var rmx_ssthresh: UInt32
  var rmx_rtt: UInt32
  var rmx_rttvar: UInt32
  var rmx_pksent: UInt32
  var rmx_filler: (UInt32, UInt32, UInt32, UInt32)
}
struct rt_msghdr {
  var rtm_msglen: u_short
  var rtm_version: u_char
  var rtm_type: u_char
  var rtm_index: u_short
  var rtm_flags: Int32
  var rtm_addrs: Int32
  var rtm_pid: pid_t
  var rtm_seq: Int32
  var rtm_errno: Int32
  var rtm_use: Int32
  var rtm_inits: UInt32
  var rtm_rmx: rt_metrics
}
struct rt_msghdr2 {
  var rtm_msglen: u_short
  var rtm_version: u_char
  var rtm_type: u_char
  var rtm_index: u_short
  var rtm_flags: Int32
  var rtm_addrs: Int32
  var rtm_refcnt: Int32
  var rtm_parentflags: Int32
  var rtm_reserved: Int32
  var rtm_use: Int32
  var rtm_inits: UInt32
  var rtm_rmx: rt_metrics
}
struct rtstat {
  var rts_badredirect: Int16
  var rts_dynamic: Int16
  var rts_newgateway: Int16
  var rts_unreach: Int16
  var rts_wildcard: Int16
}
typealias rune_t = __darwin_rune_t
struct rusage {
  var ru_utime: timeval
  var ru_stime: timeval
  var ru_maxrss: Int
  var ru_ixrss: Int
  var ru_idrss: Int
  var ru_isrss: Int
  var ru_minflt: Int
  var ru_majflt: Int
  var ru_nswap: Int
  var ru_inblock: Int
  var ru_oublock: Int
  var ru_msgsnd: Int
  var ru_msgrcv: Int
  var ru_nsignals: Int
  var ru_nvcsw: Int
  var ru_nivcsw: Int
}
typealias rusage_info_current = rusage_info_v3
typealias rusage_info_t = UnsafeMutablePointer<Void>
struct rusage_info_v0 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
}
struct rusage_info_v1 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  var ri_child_user_time: UInt64
  var ri_child_system_time: UInt64
  var ri_child_pkg_idle_wkups: UInt64
  var ri_child_interrupt_wkups: UInt64
  var ri_child_pageins: UInt64
  var ri_child_elapsed_abstime: UInt64
}
struct rusage_info_v2 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  var ri_child_user_time: UInt64
  var ri_child_system_time: UInt64
  var ri_child_pkg_idle_wkups: UInt64
  var ri_child_interrupt_wkups: UInt64
  var ri_child_pageins: UInt64
  var ri_child_elapsed_abstime: UInt64
  var ri_diskio_bytesread: UInt64
  var ri_diskio_byteswritten: UInt64
}
struct rusage_info_v3 {
  var ri_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var ri_user_time: UInt64
  var ri_system_time: UInt64
  var ri_pkg_idle_wkups: UInt64
  var ri_interrupt_wkups: UInt64
  var ri_pageins: UInt64
  var ri_wired_size: UInt64
  var ri_resident_size: UInt64
  var ri_phys_footprint: UInt64
  var ri_proc_start_abstime: UInt64
  var ri_proc_exit_abstime: UInt64
  var ri_child_user_time: UInt64
  var ri_child_system_time: UInt64
  var ri_child_pkg_idle_wkups: UInt64
  var ri_child_interrupt_wkups: UInt64
  var ri_child_pageins: UInt64
  var ri_child_elapsed_abstime: UInt64
  var ri_diskio_bytesread: UInt64
  var ri_diskio_byteswritten: UInt64
  var ri_cpu_time_qos_default: UInt64
  var ri_cpu_time_qos_maintenance: UInt64
  var ri_cpu_time_qos_background: UInt64
  var ri_cpu_time_qos_utility: UInt64
  var ri_cpu_time_qos_legacy: UInt64
  var ri_cpu_time_qos_user_initiated: UInt64
  var ri_cpu_time_qos_user_interactive: UInt64
  var ri_billed_system_time: UInt64
  var ri_serviced_system_time: UInt64
}
func ruserok(_: UnsafePointer<Int8>, _: Int32, _: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
typealias sa_family_t = __uint8_t
func safe_gets(_: UnsafeMutablePointer<Int8>, _: UnsafeMutablePointer<Int8>, _: Int32)
@availability(*, unavailable) func sbrk(_: Int32) -> UnsafeMutablePointer<Void>
struct sbuf {
  var s_buf: UnsafeMutablePointer<Int8>
  var s_unused: UnsafeMutablePointer<Void>
  var s_size: Int32
  var s_len: Int32
  var s_flags: Int32
}
func sbuf_bcat(_: UnsafeMutablePointer<sbuf>, _: UnsafePointer<Void>, _: UInt) -> Int32
func sbuf_bcpy(_: UnsafeMutablePointer<sbuf>, _: UnsafePointer<Void>, _: UInt) -> Int32
func sbuf_cat(_: UnsafeMutablePointer<sbuf>, _: UnsafePointer<Int8>) -> Int32
func sbuf_clear(_: UnsafeMutablePointer<sbuf>)
func sbuf_cpy(_: UnsafeMutablePointer<sbuf>, _: UnsafePointer<Int8>) -> Int32
func sbuf_data(_: UnsafeMutablePointer<sbuf>) -> UnsafeMutablePointer<Int8>
func sbuf_delete(_: UnsafeMutablePointer<sbuf>)
func sbuf_done(_: UnsafeMutablePointer<sbuf>) -> Int32
func sbuf_finish(_: UnsafeMutablePointer<sbuf>)
func sbuf_len(_: UnsafeMutablePointer<sbuf>) -> Int32
func sbuf_new(_: UnsafeMutablePointer<sbuf>, _: UnsafeMutablePointer<Int8>, _: Int32, _: Int32) -> UnsafeMutablePointer<sbuf>
func sbuf_overflowed(_: UnsafeMutablePointer<sbuf>) -> Int32
func sbuf_putc(_: UnsafeMutablePointer<sbuf>, _: Int32) -> Int32
func sbuf_setpos(_: UnsafeMutablePointer<sbuf>, _: Int32) -> Int32
func sbuf_trim(_: UnsafeMutablePointer<sbuf>) -> Int32
func sbuf_vprintf(_: UnsafeMutablePointer<sbuf>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func scalb(_: Double, _: Double) -> Double
func scalbln(_: Double, _: Int) -> Double
func scalblnf(_: Float, _: Int) -> Float
func scalbn(_: Double, _: Int32) -> Double
func scalbnf(_: Float, _: Int32) -> Float
func scandir(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<UnsafeMutablePointer<dirent>>>, _: CFunctionPointer<((UnsafePointer<dirent>) -> Int32)>, _: CFunctionPointer<((UnsafeMutablePointer<UnsafePointer<dirent>>, UnsafeMutablePointer<UnsafePointer<dirent>>) -> Int32)>) -> Int32
@availability(OSX, introduced=10.6) func scandir_b(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<UnsafeMutablePointer<dirent>>>, _: ((UnsafePointer<dirent>) -> Int32)!, _: ((UnsafeMutablePointer<UnsafePointer<dirent>>, UnsafeMutablePointer<UnsafePointer<dirent>>) -> Int32)!) -> Int32
func sched_get_priority_max(_: Int32) -> Int32
func sched_get_priority_min(_: Int32) -> Int32
struct sched_param {
  var sched_priority: Int32
  var __opaque: (Int8, Int8, Int8, Int8)
}
func sched_yield() -> Int32
func searchfs(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<fssearchblock>, _: UnsafeMutablePointer<UInt>, _: UInt32, _: UInt32, _: UnsafeMutablePointer<searchstate>) -> Int32
struct searchstate {
  var ss_union_flags: UInt32
  var ss_union_layer: UInt32
  var ss_fsstate: (u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char, u_char)
}
struct security_token_t {
  var val: (UInt32, UInt32)
}
func seed48(_: UnsafeMutablePointer<UInt16>) -> UnsafeMutablePointer<UInt16>
func seekdir(_: UnsafeMutablePointer<DIR>, _: Int)
typealias segsz_t = Int32
func select(_: Int32, _: UnsafeMutablePointer<fd_set>, _: UnsafeMutablePointer<fd_set>, _: UnsafeMutablePointer<fd_set>, _: UnsafeMutablePointer<timeval>) -> Int32
struct sem {
  var semval: UInt16
  var sempid: pid_t
  var semncnt: UInt16
  var semzcnt: UInt16
}
func sem_close(_: UnsafeMutablePointer<sem_t>) -> Int32
@availability(*, unavailable) func sem_destroy(_: UnsafeMutablePointer<sem_t>) -> Int32
@availability(*, unavailable) func sem_getvalue(_: UnsafeMutablePointer<sem_t>, _: UnsafeMutablePointer<Int32>) -> Int32
@availability(*, unavailable) func sem_init(_: UnsafeMutablePointer<sem_t>, _: Int32, _: UInt32) -> Int32
func sem_post(_: UnsafeMutablePointer<sem_t>) -> Int32
typealias sem_t = Int32
func sem_trywait(_: UnsafeMutablePointer<sem_t>) -> Int32
func sem_unlink(_: UnsafePointer<Int8>) -> Int32
func sem_wait(_: UnsafeMutablePointer<sem_t>) -> Int32
func semaphore_create(task: task_t, semaphore: UnsafeMutablePointer<semaphore_t>, policy: Int32, value: Int32) -> kern_return_t
func semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t
typealias semaphore_port_t = semaphore_t
func semaphore_signal(semaphore: semaphore_t) -> kern_return_t
func semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t
func semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t
typealias semaphore_t = mach_port_t
func semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t) -> kern_return_t
func semaphore_timedwait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t, wait_time: mach_timespec_t) -> kern_return_t
func semaphore_wait(semaphore: semaphore_t) -> kern_return_t
func semaphore_wait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t) -> kern_return_t
struct sembuf {
  var sem_num: UInt16
  var sem_op: Int16
  var sem_flg: Int16
}
func semget(_: key_t, _: Int32, _: Int32) -> Int32
func semop(_: Int32, _: UnsafeMutablePointer<sembuf>, _: UInt) -> Int32
func send(_: Int32, _: UnsafePointer<Void>, _: UInt, _: Int32) -> Int
func sendfile(_: Int32, _: Int32, _: off_t, _: UnsafeMutablePointer<off_t>, _: UnsafeMutablePointer<sf_hdtr>, _: Int32) -> Int32
func sendmsg(_: Int32, _: UnsafePointer<msghdr>, _: Int32) -> Int
func sendto(_: Int32, _: UnsafePointer<Void>, _: UInt, _: Int32, _: UnsafePointer<sockaddr>, _: socklen_t) -> Int
struct servent {
  var s_name: UnsafeMutablePointer<Int8>
  var s_aliases: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var s_port: Int32
  var s_proto: UnsafeMutablePointer<Int8>
}
func set_dp_control_port(host: host_priv_t, control_port: mach_port_t) -> kern_return_t
func setac()
func setattrlist(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<Void>, _: UInt, _: UInt32) -> Int32
func setauclass()
@availability(OSX, unavailable, introduced=10.0, deprecated=10.8, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func setaudit(_: UnsafePointer<auditinfo>) -> Int32
func setaudit_addr(_: UnsafePointer<auditinfo_addr>, _: Int32) -> Int32
func setauevent()
func setauid(_: UnsafePointer<au_id_t>) -> Int32
func setauuser()
func setbuf(_: UnsafeMutablePointer<FILE>, _: UnsafeMutablePointer<Int8>)
func setbuffer(_: UnsafeMutablePointer<FILE>, _: UnsafeMutablePointer<Int8>, _: Int32)
func setdomainname(_: UnsafePointer<Int8>, _: Int32) -> Int32
func setegid(_: gid_t) -> Int32
func setenv(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: Int32) -> Int32
func seteuid(_: uid_t) -> Int32
func setgid(_: gid_t) -> Int32
func setgrent()
func setgrfile(_: UnsafePointer<Int8>)
func setgroupent(_: Int32) -> Int32
func setgroups(_: Int32, _: UnsafePointer<gid_t>) -> Int32
func sethostent(_: Int32)
func sethostid(_: Int)
func sethostname(_: UnsafePointer<Int8>, _: Int32) -> Int32
@availability(OSX, introduced=10.5) func setiopolicy_np(_: Int32, _: Int32, _: Int32) -> Int32
@availability(OSX, introduced=10.7) func setipv4sourcefilter(_: Int32, _: in_addr, _: in_addr, _: UInt32, _: UInt32, _: UnsafeMutablePointer<in_addr>) -> Int32
func setitimer(_: Int32, _: UnsafePointer<itimerval>, _: UnsafeMutablePointer<itimerval>) -> Int32
func setjmp(_: UnsafeMutablePointer<Int32>) -> Int32
func setkey(_: UnsafePointer<Int8>)
func setlcid(pid: pid_t, lcid: pid_t) -> Int32
func setlinebuf(_: UnsafeMutablePointer<FILE>) -> Int32
func setlocale(_: Int32, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func setlogin(_: UnsafePointer<Int8>) -> Int32
func setlogmask(_: Int32) -> Int32
func setmode(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<Void>
func setnetent(_: Int32)
func setnetgrent(_: UnsafePointer<Int8>)
func setpassent(_: Int32) -> Int32
func setpgid(_: pid_t, _: pid_t) -> Int32
func setpgrp() -> pid_t
func setpriority(_: Int32, _: id_t, _: Int32) -> Int32
func setprogname(_: UnsafePointer<Int8>)
func setprotoent(_: Int32)
func setpwent()
func setregid(_: gid_t, _: gid_t) -> Int32
func setreuid(_: uid_t, _: uid_t) -> Int32
func setrgid(_: gid_t) -> Int32
func setrlimit(_: Int32, _: UnsafePointer<rlimit>) -> Int32
func setrpcent(stayopen: Int32)
func setruid(_: uid_t) -> Int32
func setservent(_: Int32)
func setsgroups_np(_: Int32, _: UnsafePointer<UInt8>) -> Int32
func setsid() -> pid_t
func setsockopt(_: Int32, _: Int32, _: Int32, _: UnsafePointer<Void>, _: socklen_t) -> Int32
@availability(OSX, introduced=10.7) func setsourcefilter(_: Int32, _: UInt32, _: UnsafeMutablePointer<sockaddr>, _: socklen_t, _: UInt32, _: UInt32, _: UnsafeMutablePointer<sockaddr_storage>) -> Int32
func setstate(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func settimeofday(_: UnsafePointer<timeval>, _: UnsafePointer<timezone>) -> Int32
func setuid(_: uid_t) -> Int32
func setusershell()
func setutxent()
@availability(OSX, introduced=10.5) func setutxent_wtmp(_: Int32)
func setvbuf(_: UnsafeMutablePointer<FILE>, _: UnsafeMutablePointer<Int8>, _: Int32, _: UInt) -> Int32
func setwgroups_np(_: Int32, _: UnsafePointer<UInt8>) -> Int32
struct sf_hdtr {
  var headers: UnsafeMutablePointer<iovec>
  var hdr_cnt: Int32
  var trailers: UnsafeMutablePointer<iovec>
  var trl_cnt: Int32
}
var shadow: Int {
  get {
    return
  }
}
struct shared_file_mapping_np {
  var sfm_address: mach_vm_address_t
  var sfm_size: mach_vm_size_t
  var sfm_file_offset: mach_vm_offset_t
  var sfm_max_prot: vm_prot_t
  var sfm_init_prot: vm_prot_t
}
func shared_region_check_np(startaddress: UnsafeMutablePointer<UInt64>) -> Int32
func shared_region_map_np(fd: Int32, mappingCount: UInt32, mappings: UnsafePointer<shared_file_mapping_np>) -> Int32
func shared_region_slide_np() -> Int32
func shm_unlink(_: UnsafePointer<Int8>) -> Int32
func shmat(_: Int32, _: UnsafePointer<Void>, _: Int32) -> UnsafeMutablePointer<Void>
typealias shmatt_t = UInt16
func shmctl(_: Int32, _: Int32, _: UnsafeMutablePointer<__shmid_ds_new>) -> Int32
func shmdt(_: UnsafePointer<Void>) -> Int32
func shmget(_: key_t, _: UInt, _: Int32) -> Int32
func shutdown(_: Int32, _: Int32) -> Int32
typealias sig_atomic_t = Int32
typealias sig_t = CFunctionPointer<((Int32) -> Void)>
struct sigaction {
  var sa_mask: sigset_t
  var sa_flags: Int32
}
func sigaction(_: Int32, _: UnsafePointer<sigaction>, _: UnsafeMutablePointer<sigaction>) -> Int32
func sigaddset(_: UnsafeMutablePointer<sigset_t>, _: Int32) -> Int32
func sigaltstack(_: UnsafePointer<stack_t>, _: UnsafeMutablePointer<stack_t>) -> Int32
func sigblock(_: Int32) -> Int32
func sigdelset(_: UnsafeMutablePointer<sigset_t>, _: Int32) -> Int32
func sigemptyset(_: UnsafeMutablePointer<sigset_t>) -> Int32
struct sigevent {
  var sigev_notify: Int32
  var sigev_signo: Int32
  var sigev_notify_function: COpaquePointer
  var sigev_notify_attributes: UnsafeMutablePointer<pthread_attr_t>
}
func sigfillset(_: UnsafeMutablePointer<sigset_t>) -> Int32
func sighold(_: Int32) -> Int32
func sigignore(_: Int32) -> Int32
typealias siginfo_t = __siginfo
func siginterrupt(_: Int32, _: Int32) -> Int32
func sigismember(_: UnsafePointer<sigset_t>, _: Int32) -> Int32
typealias sigjmp_buf = (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
@noreturn func siglongjmp(_: UnsafeMutablePointer<Int32>, _: Int32)
func signal(_: Int32, _: CFunctionPointer<((Int32) -> Void)>) -> CFunctionPointer<((Int32) -> Void)>
var signgam: Int32
@availability(OSX, unavailable, introduced=10.0, deprecated=10.9, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func significand(_: Double) -> Double
func sigpause(_: Int32) -> Int32
func sigpending(_: UnsafeMutablePointer<sigset_t>) -> Int32
func sigprocmask(_: Int32, _: UnsafePointer<sigset_t>, _: UnsafeMutablePointer<sigset_t>) -> Int32
func sigrelse(_: Int32) -> Int32
func sigset(_: Int32, _: CFunctionPointer<((Int32) -> Void)>) -> CFunctionPointer<((Int32) -> Void)>
typealias sigset_t = __darwin_sigset_t
func sigsetjmp(_: UnsafeMutablePointer<Int32>, _: Int32) -> Int32
func sigsetmask(_: Int32) -> Int32
struct sigstack {
  var ss_sp: UnsafeMutablePointer<Int8>
  var ss_onstack: Int32
}
func sigsuspend(_: UnsafePointer<sigset_t>) -> Int32
struct sigvec {
  var sv_handler: CFunctionPointer<((Int32) -> Void)>
  var sv_mask: Int32
  var sv_flags: Int32
}
func sigvec(_: Int32, _: UnsafeMutablePointer<sigvec>, _: UnsafeMutablePointer<sigvec>) -> Int32
func sigwait(_: UnsafePointer<sigset_t>, _: UnsafeMutablePointer<Int32>) -> Int32
func sin(_: Double) -> Double
func sinf(_: Float) -> Float
func sinh(_: Double) -> Double
func sinhf(_: Float) -> Float
typealias size_t = UInt
func sleep(_: UInt32) -> UInt32
typealias sleep_type_t = Int32
func slot_name(_: cpu_type_t, _: cpu_subtype_t, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>)
typealias so_gen_t = u_quad_t
struct so_np_extensions {
  var npx_flags: UInt32
  var npx_mask: UInt32
}
struct sockaddr {
  var sa_len: __uint8_t
  var sa_family: sa_family_t
  var sa_data: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct sockaddr_ctl {
  var sc_len: u_char
  var sc_family: u_char
  var ss_sysaddr: UInt16
  var sc_id: UInt32
  var sc_unit: UInt32
  var sc_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct sockaddr_in {
  var sin_len: __uint8_t
  var sin_family: sa_family_t
  var sin_port: in_port_t
  var sin_addr: in_addr
  var sin_zero: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct sockaddr_in6 {
  var sin6_len: __uint8_t
  var sin6_family: sa_family_t
  var sin6_port: in_port_t
  var sin6_flowinfo: __uint32_t
  var sin6_addr: in6_addr
  var sin6_scope_id: __uint32_t
}
struct sockaddr_storage {
  var ss_len: __uint8_t
  var ss_family: sa_family_t
  var __ss_pad1: (Int8, Int8, Int8, Int8, Int8, Int8)
  var __ss_align: __int64_t
  var __ss_pad2: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
struct sockaddr_sys {
  var ss_len: u_char
  var ss_family: u_char
  var ss_sysaddr: UInt16
  var ss_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct sockaddr_un {
  var sun_len: UInt8
  var sun_family: sa_family_t
  var sun_path: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
@availability(OSX, introduced=10.5) func sockatmark(_: Int32) -> Int32
struct sockbuf_info {
  var sbi_cc: UInt32
  var sbi_hiwat: UInt32
  var sbi_mbcnt: UInt32
  var sbi_mbmax: UInt32
  var sbi_lowat: UInt32
  var sbi_flags: Int16
  var sbi_timeo: Int16
}
func socket(_: Int32, _: Int32, _: Int32) -> Int32
struct socket_fdinfo {
  var pfi: proc_fileinfo
  var psi: socket_info
}
struct socket_info {
  var soi_stat: vinfo_stat
  var soi_so: UInt64
  var soi_pcb: UInt64
  var soi_type: Int32
  var soi_protocol: Int32
  var soi_family: Int32
  var soi_options: Int16
  var soi_linger: Int16
  var soi_state: Int16
  var soi_qlen: Int16
  var soi_incqlen: Int16
  var soi_qlimit: Int16
  var soi_timeo: Int16
  var soi_error: u_short
  var soi_oobmark: UInt32
  var soi_rcv: sockbuf_info
  var soi_snd: sockbuf_info
  var soi_kind: Int32
  var rfu_1: UInt32
}
typealias socket_t = COpaquePointer
func socketpair(_: Int32, _: Int32, _: Int32, _: UnsafeMutablePointer<Int32>) -> Int32
typealias socklen_t = __darwin_socklen_t
typealias sockopt_t = COpaquePointer
struct sockproto {
  var sp_family: __uint16_t
  var sp_protocol: __uint16_t
}
typealias speed_t = UInt
struct speedtab {
  var sp_speed: Int32
  var sp_code: Int32
}
func sqrt(_: Double) -> Double
func sqrtf(_: Float) -> Float
func sradixsort(_: UnsafeMutablePointer<UnsafePointer<UInt8>>, _: Int32, _: UnsafePointer<UInt8>, _: UInt32) -> Int32
func srand(_: UInt32)
func srand48(_: Int)
func sranddev()
func srandom(_: UInt32)
func srandomdev()
typealias ssize_t = Int
typealias stack_t = __darwin_sigaltstack
func stat(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat>) -> Int32
struct stat {
  var st_dev: dev_t
  var st_mode: mode_t
  var st_nlink: nlink_t
  var st_ino: __darwin_ino64_t
  var st_uid: uid_t
  var st_gid: gid_t
  var st_rdev: dev_t
  var st_atimespec: timespec
  var st_mtimespec: timespec
  var st_ctimespec: timespec
  var st_birthtimespec: timespec
  var st_size: off_t
  var st_blocks: blkcnt_t
  var st_blksize: blksize_t
  var st_flags: __uint32_t
  var st_gen: __uint32_t
  var st_lspare: __int32_t
  var st_qspare: (__int64_t, __int64_t)
}
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func stat64(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat64>) -> Int32
struct stat64 {
  var st_dev: dev_t
  var st_mode: mode_t
  var st_nlink: nlink_t
  var st_ino: __darwin_ino64_t
  var st_uid: uid_t
  var st_gid: gid_t
  var st_rdev: dev_t
  var st_atimespec: timespec
  var st_mtimespec: timespec
  var st_ctimespec: timespec
  var st_birthtimespec: timespec
  var st_size: off_t
  var st_blocks: blkcnt_t
  var st_blksize: blksize_t
  var st_flags: __uint32_t
  var st_gen: __uint32_t
  var st_lspare: __int32_t
  var st_qspare: (__int64_t, __int64_t)
}
func statfs(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<statfs>) -> Int32
struct statfs {
  var f_bsize: UInt32
  var f_iosize: Int32
  var f_blocks: UInt64
  var f_bfree: UInt64
  var f_bavail: UInt64
  var f_files: UInt64
  var f_ffree: UInt64
  var f_fsid: fsid_t
  var f_owner: uid_t
  var f_type: UInt32
  var f_flags: UInt32
  var f_fssubtype: UInt32
  var f_fstypename: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_mntonname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_mntfromname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct statfs64 {
  var f_bsize: UInt32
  var f_iosize: Int32
  var f_blocks: UInt64
  var f_bfree: UInt64
  var f_bavail: UInt64
  var f_files: UInt64
  var f_ffree: UInt64
  var f_fsid: fsid_t
  var f_owner: uid_t
  var f_type: UInt32
  var f_flags: UInt32
  var f_fssubtype: UInt32
  var f_fstypename: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_mntonname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_mntfromname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_reserved: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func statfs64(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<statfs64>) -> Int32
func statvfs(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<statvfs>) -> Int32
struct statvfs {
  var f_bsize: UInt
  var f_frsize: UInt
  var f_blocks: fsblkcnt_t
  var f_bfree: fsblkcnt_t
  var f_bavail: fsblkcnt_t
  var f_files: fsfilcnt_t
  var f_ffree: fsfilcnt_t
  var f_favail: fsfilcnt_t
  var f_fsid: UInt
  var f_flag: UInt
  var f_namemax: UInt
}
@availability(OSX, unavailable, introduced=10.5, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func statx64_np(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat64>, _: filesec_t) -> Int32
func statx_np(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<stat>, _: filesec_t) -> Int32
func stpcpy(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
@availability(OSX, introduced=10.7) func stpncpy(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
func strcasecmp(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
func strcasestr(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strcat(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strchr(_: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<Int8>
func strcmp(s1: UnsafePointer<Int8>, s2: UnsafePointer<Int8>) -> Int32
func strcoll(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
func strcpy(dst: UnsafeMutablePointer<Int8>, src: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strcspn(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UInt
func strdup(_: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strerror(_: Int32) -> UnsafeMutablePointer<Int8>
func strerror_r(_: Int32, _: UnsafeMutablePointer<Int8>, _: UInt) -> Int32
func strftime(_: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafePointer<Int8>, _: UnsafePointer<tm>) -> UInt
func strlcat(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UInt
func strlcpy(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UInt
func strlen(s: UnsafePointer<Int8>) -> UInt
func strmode(_: Int32, _: UnsafeMutablePointer<Int8>)
func strncasecmp(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> Int32
func strncat(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
func strncmp(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> Int32
func strncpy(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
@availability(OSX, introduced=10.7) func strndup(_: UnsafePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
@availability(OSX, introduced=10.7) func strnlen(_: UnsafePointer<Int8>, _: UInt) -> UInt
func strnstr(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UnsafeMutablePointer<Int8>
func strpbrk(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strptime(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<tm>) -> UnsafeMutablePointer<Int8>
func strrchr(_: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<Int8>
func strsep(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strsignal(sig: Int32) -> UnsafeMutablePointer<Int8>
func strspn(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UInt
func strstr(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strtod(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Double
func strtof(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> Float
func strtofflags(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafeMutablePointer<UInt>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.4) func strtoimax(__nptr: UnsafePointer<Int8>, __endptr: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, __base: Int32) -> intmax_t
func strtok(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
func strtok_r(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> UnsafeMutablePointer<Int8>
func strtol(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32) -> Int
func strtoll(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32) -> Int64
func strtoq(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32) -> Int64
func strtoul(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32) -> UInt
func strtoull(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32) -> UInt64
@availability(OSX, introduced=10.4) func strtoumax(__nptr: UnsafePointer<Int8>, __endptr: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, __base: Int32) -> uintmax_t
func strtouq(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: Int32) -> UInt64
func strxfrm(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: UInt) -> UInt
var suboptarg: UnsafeMutablePointer<Int8>
typealias suseconds_t = __darwin_suseconds_t
func swab(_: UnsafePointer<Void>, _: UnsafeMutablePointer<Void>, _: Int)
func swapon(_: UnsafePointer<Int8>) -> Int32
typealias swblk_t = Int32
func swtch() -> boolean_t
func swtch_pri(pri: Int32) -> boolean_t
func symlink(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> Int32
@availability(OSX, introduced=10.10) func symlinkat(_: UnsafePointer<Int8>, _: Int32, _: UnsafePointer<Int8>) -> Int32
typealias symtab_name_t = (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
func sync()
typealias sync_policy_t = Int32
@availability(OSX, introduced=10.8) func sync_volume_np(_: UnsafePointer<Int8>, _: Int32) -> Int32
let sys_nerr: Int32
let sys_siglist: (UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>)
let sys_signame: (UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>, UnsafePointer<Int8>)
typealias syscall_arg_t = UInt64
func sysconf(_: Int32) -> Int
func sysctl(_: UnsafeMutablePointer<Int32>, _: u_int, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<UInt>, _: UnsafeMutablePointer<Void>, _: UInt) -> Int32
func sysctlbyname(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<Void>, _: UnsafeMutablePointer<UInt>, _: UnsafeMutablePointer<Void>, _: UInt) -> Int32
func sysctlnametomib(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<Int32>, _: UnsafeMutablePointer<UInt>) -> Int32
@availability(OSX, introduced=10.0) func system(_: UnsafePointer<Int8>) -> Int32
func tan(_: Double) -> Double
func tanf(_: Float) -> Float
func tanh(_: Double) -> Double
func tanhf(_: Float) -> Float
struct task_absolutetime_info {
  var total_user: UInt64
  var total_system: UInt64
  var threads_user: UInt64
  var threads_system: UInt64
}
typealias task_absolutetime_info_data_t = task_absolutetime_info
typealias task_absolutetime_info_t = UnsafeMutablePointer<task_absolutetime_info>
struct task_affinity_tag_info {
  var set_count: integer_t
  var min: integer_t
  var max: integer_t
  var task_count: integer_t
}
typealias task_affinity_tag_info_data_t = task_affinity_tag_info
typealias task_affinity_tag_info_t = UnsafeMutablePointer<task_affinity_tag_info>
typealias task_array_t = UnsafeMutablePointer<task_t>
func task_assign(task: task_t, new_set: processor_set_t, assign_threads: boolean_t) -> kern_return_t
func task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t
struct task_basic_info {
  var suspend_count: integer_t
  var virtual_size: vm_size_t
  var resident_size: vm_size_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
}
struct task_basic_info_32 {
  var suspend_count: integer_t
  var virtual_size: natural_t
  var resident_size: natural_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
}
typealias task_basic_info_32_data_t = task_basic_info_32
typealias task_basic_info_32_t = UnsafeMutablePointer<task_basic_info_32>
struct task_basic_info_64 {
  var suspend_count: integer_t
  var virtual_size: mach_vm_size_t
  var resident_size: mach_vm_size_t
  var user_time: time_value_t
  var system_time: time_value_t
  var policy: policy_t
}
typealias task_basic_info_64_data_t = task_basic_info_64
typealias task_basic_info_64_t = UnsafeMutablePointer<task_basic_info_64>
typealias task_basic_info_data_t = task_basic_info
typealias task_basic_info_t = UnsafeMutablePointer<task_basic_info>
struct task_category_policy {
  var role: task_role_t
}
typealias task_category_policy_data_t = task_category_policy
typealias task_category_policy_t = UnsafeMutablePointer<task_category_policy>
func task_create(target_task: task_t, ledgers: ledger_array_t, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: UnsafeMutablePointer<task_t>) -> kern_return_t
struct task_dyld_info {
  var all_image_info_addr: mach_vm_address_t
  var all_image_info_size: mach_vm_size_t
  var all_image_info_format: integer_t
}
typealias task_dyld_info_data_t = task_dyld_info
typealias task_dyld_info_t = UnsafeMutablePointer<task_dyld_info>
struct task_events_info {
  var faults: integer_t
  var pageins: integer_t
  var cow_faults: integer_t
  var messages_sent: integer_t
  var messages_received: integer_t
  var syscalls_mach: integer_t
  var syscalls_unix: integer_t
  var csw: integer_t
}
typealias task_events_info_data_t = task_events_info
typealias task_events_info_t = UnsafeMutablePointer<task_events_info>
struct task_extmod_info {
  var task_uuid: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
  var extmod_statistics: vm_extmod_statistics_data_t
}
typealias task_extmod_info_data_t = task_extmod_info
typealias task_extmod_info_t = UnsafeMutablePointer<task_extmod_info>
typealias task_flavor_t = natural_t
func task_for_pid(target_tport: mach_port_name_t, pid: Int32, t: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
func task_get_assignment(task: task_t, assigned_set: UnsafeMutablePointer<processor_set_name_t>) -> kern_return_t
func task_get_emulation_vector(task: task_t, vector_start: UnsafeMutablePointer<Int32>, emulation_vector: UnsafeMutablePointer<emulation_vector_t>, emulation_vectorCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_get_exception_ports(task: task_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: UnsafeMutablePointer<mach_msg_type_number_t>, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) -> kern_return_t
func task_get_mach_voucher(task: task_t, which: mach_voucher_selector_t, voucher: UnsafeMutablePointer<ipc_voucher_t>) -> kern_return_t
func task_get_special_port(task: task_t, which_port: Int32, special_port: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func task_get_state(task: task_t, flavor: thread_state_flavor_t, old_state: thread_state_t, old_stateCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func task_info(target_task: task_name_t, flavor: task_flavor_t, task_info_out: task_info_t, task_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias task_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias task_info_t = UnsafeMutablePointer<integer_t>
struct task_kernelmemory_info {
  var total_palloc: UInt64
  var total_pfree: UInt64
  var total_salloc: UInt64
  var total_sfree: UInt64
}
typealias task_kernelmemory_info_data_t = task_kernelmemory_info
typealias task_kernelmemory_info_t = UnsafeMutablePointer<task_kernelmemory_info>
struct task_latency_qos {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias task_latency_qos_t = integer_t
func task_name_for_pid(target_tport: mach_port_name_t, pid: Int32, tn: UnsafeMutablePointer<mach_port_name_t>) -> kern_return_t
typealias task_name_t = mach_port_t
func task_policy(task: task_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, set_limit: boolean_t, change: boolean_t) -> kern_return_t
typealias task_policy_flavor_t = natural_t
func task_policy_get(task: task_t, flavor: task_policy_flavor_t, policy_info: task_policy_t, policy_infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>, get_default: UnsafeMutablePointer<boolean_t>) -> kern_return_t
func task_policy_set(task: task_t, flavor: task_policy_flavor_t, policy_info: task_policy_t, policy_infoCnt: mach_msg_type_number_t) -> kern_return_t
typealias task_policy_t = UnsafeMutablePointer<integer_t>
typealias task_port_array_t = task_array_t
typealias task_port_t = task_t
struct task_power_info {
  var total_user: UInt64
  var total_system: UInt64
  var task_interrupt_wakeups: UInt64
  var task_platform_idle_wakeups: UInt64
  var task_timer_wakeups_bin_1: UInt64
  var task_timer_wakeups_bin_2: UInt64
}
typealias task_power_info_data_t = task_power_info
typealias task_power_info_t = UnsafeMutablePointer<task_power_info>
struct task_power_info_v2 {
  var cpu_energy: task_power_info_data_t
  var gpu_energy: gpu_energy_data
}
typealias task_power_info_v2_data_t = task_power_info_v2
typealias task_power_info_v2_t = UnsafeMutablePointer<task_power_info_v2>
func task_purgable_info(task: task_t, stats: UnsafeMutablePointer<task_purgable_info_t>) -> kern_return_t
typealias task_purgable_info_t = vm_purgeable_info
struct task_qos_policy {
  var task_latency_qos_tier: task_latency_qos_t
  var task_throughput_qos_tier: task_throughput_qos_t
}
typealias task_qos_policy_t = UnsafeMutablePointer<task_qos_policy>
func task_resume(target_task: task_t) -> kern_return_t
func task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t
struct task_role {
  init(_ value: Int32) {

  }
  var value: Int32
}
typealias task_role_t = integer_t
func task_sample(task: task_t, reply: mach_port_t) -> kern_return_t
func task_self_trap() -> mach_port_name_t
func task_set_emulation(target_port: task_t, routine_entry_pt: vm_address_t, routine_number: Int32) -> kern_return_t
func task_set_emulation_vector(task: task_t, vector_start: Int32, emulation_vector: emulation_vector_t, emulation_vectorCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func task_set_info(target_task: task_t, flavor: task_flavor_t, task_info_in: task_info_t, task_info_inCnt: mach_msg_type_number_t) -> kern_return_t
func task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t
func task_set_phys_footprint_limit(task: task_t, new_limit: Int32, old_limit: UnsafeMutablePointer<Int32>) -> kern_return_t
func task_set_policy(task: task_t, pset: processor_set_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, limit: policy_limit_t, limitCnt: mach_msg_type_number_t, change: boolean_t) -> kern_return_t
func task_set_port_space(task: ipc_space_t, table_entries: Int32) -> kern_return_t
func task_set_ras_pc(target_task: task_t, basepc: vm_address_t, boundspc: vm_address_t) -> kern_return_t
func task_set_special_port(task: task_t, which_port: Int32, special_port: mach_port_t) -> kern_return_t
func task_set_state(task: task_t, flavor: thread_state_flavor_t, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
typealias task_special_port_t = Int32
func task_suspend(target_task: task_t) -> kern_return_t
func task_suspend2(target_task: task_t, suspend_token: UnsafeMutablePointer<task_suspension_token_t>) -> kern_return_t
typealias task_suspension_token_t = mach_port_t
func task_swap_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: exception_mask_array_t, masksCnt: UnsafeMutablePointer<mach_msg_type_number_t>, old_handlerss: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) -> kern_return_t
func task_swap_mach_voucher(task: task_t, new_voucher: ipc_voucher_t, old_voucher: UnsafeMutablePointer<ipc_voucher_t>) -> kern_return_t
typealias task_t = mach_port_t
func task_terminate(target_task: task_t) -> kern_return_t
struct task_thread_times_info {
  var user_time: time_value_t
  var system_time: time_value_t
}
typealias task_thread_times_info_data_t = task_thread_times_info
typealias task_thread_times_info_t = UnsafeMutablePointer<task_thread_times_info>
func task_threads(target_task: task_t, act_list: UnsafeMutablePointer<thread_act_array_t>, act_listCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct task_throughput_qos {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias task_throughput_qos_t = integer_t
struct task_trace_memory_info {
  var user_memory_address: UInt64
  var buffer_size: UInt64
  var mailbox_array_size: UInt64
}
typealias task_trace_memory_info_data_t = task_trace_memory_info
typealias task_trace_memory_info_t = UnsafeMutablePointer<task_trace_memory_info>
struct task_vm_info {
  var virtual_size: mach_vm_size_t
  var region_count: integer_t
  var page_size: integer_t
  var resident_size: mach_vm_size_t
  var resident_size_peak: mach_vm_size_t
  var device: mach_vm_size_t
  var device_peak: mach_vm_size_t
  var `internal`: mach_vm_size_t
  var internal_peak: mach_vm_size_t
  var external: mach_vm_size_t
  var external_peak: mach_vm_size_t
  var reusable: mach_vm_size_t
  var reusable_peak: mach_vm_size_t
  var purgeable_volatile_pmap: mach_vm_size_t
  var purgeable_volatile_resident: mach_vm_size_t
  var purgeable_volatile_virtual: mach_vm_size_t
  var compressed: mach_vm_size_t
  var compressed_peak: mach_vm_size_t
  var compressed_lifetime: mach_vm_size_t
}
typealias task_vm_info_data_t = task_vm_info
typealias task_vm_info_t = UnsafeMutablePointer<task_vm_info>
struct task_wait_state_info {
  var total_wait_state_time: UInt64
  var total_wait_sfi_state_time: UInt64
  var _reserved: (UInt32, UInt32, UInt32, UInt32)
}
typealias task_wait_state_info_data_t = task_wait_state_info
typealias task_wait_state_info_t = UnsafeMutablePointer<task_wait_state_info>
func task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t
func task_zone_info(target_task: task_t, names: UnsafeMutablePointer<mach_zone_name_array_t>, namesCnt: UnsafeMutablePointer<mach_msg_type_number_t>, info: UnsafeMutablePointer<task_zone_info_array_t>, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias task_zone_info_array_t = UnsafeMutablePointer<task_zone_info_t>
struct task_zone_info_data {
  var tzi_count: UInt64
  var tzi_cur_size: UInt64
  var tzi_max_size: UInt64
  var tzi_elem_size: UInt64
  var tzi_alloc_size: UInt64
  var tzi_sum_size: UInt64
  var tzi_exhaustible: UInt64
  var tzi_collectable: UInt64
  var tzi_caller_acct: UInt64
  var tzi_task_alloc: UInt64
  var tzi_task_free: UInt64
}
typealias task_zone_info_t = task_zone_info_data
func tcdrain(_: Int32) -> Int32
typealias tcflag_t = UInt
func tcflow(_: Int32, _: Int32) -> Int32
func tcflush(_: Int32, _: Int32) -> Int32
func tcgetattr(_: Int32, _: UnsafeMutablePointer<termios>) -> Int32
func tcgetpgrp(_: Int32) -> pid_t
func tcgetsid(_: Int32) -> pid_t
typealias tcp_cc = __uint32_t
typealias tcp_seq = __uint32_t
struct tcp_sockinfo {
  var tcpsi_ini: in_sockinfo
  var tcpsi_state: Int32
  var tcpsi_timer: (Int32, Int32, Int32, Int32)
  var tcpsi_mss: Int32
  var tcpsi_flags: UInt32
  var rfu_1: UInt32
  var tcpsi_tp: UInt64
}
func tcsendbreak(_: Int32, _: Int32) -> Int32
func tcsetattr(_: Int32, _: Int32, _: UnsafePointer<termios>) -> Int32
func tcsetpgrp(_: Int32, _: pid_t) -> Int32
func tdelete(_: UnsafePointer<Void>, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<Void>
func telldir(_: UnsafeMutablePointer<DIR>) -> Int
@availability(*, unavailable, message="This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.") func tempnam(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>) -> UnsafeMutablePointer<Int8>
struct termios {
  var c_iflag: tcflag_t
  var c_oflag: tcflag_t
  var c_cflag: tcflag_t
  var c_lflag: tcflag_t
  var c_cc: (cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t, cc_t)
  var c_ispeed: speed_t
  var c_ospeed: speed_t
}
typealias text_encoding_t = UInt32
func tfind(_: UnsafePointer<Void>, _: UnsafePointer<UnsafeMutablePointer<Void>>, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<Void>
func tgamma(_: Double) -> Double
func tgammaf(_: Float) -> Float
func thread_abort(target_act: thread_act_t) -> kern_return_t
func thread_abort_safely(target_act: thread_act_t) -> kern_return_t
typealias thread_act_array_t = UnsafeMutablePointer<thread_act_t>
typealias thread_act_port_array_t = thread_act_array_t
typealias thread_act_port_t = thread_act_t
typealias thread_act_t = mach_port_t
struct thread_affinity_policy {
  var affinity_tag: integer_t
}
typealias thread_affinity_policy_data_t = thread_affinity_policy
typealias thread_affinity_policy_t = UnsafeMutablePointer<thread_affinity_policy>
typealias thread_array_t = UnsafeMutablePointer<thread_t>
func thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t
func thread_assign_default(thread: thread_act_t) -> kern_return_t
struct thread_background_policy {
  var priority: integer_t
}
typealias thread_background_policy_data_t = thread_background_policy
typealias thread_background_policy_t = UnsafeMutablePointer<thread_background_policy>
struct thread_basic_info {
  var user_time: time_value_t
  var system_time: time_value_t
  var cpu_usage: integer_t
  var policy: policy_t
  var run_state: integer_t
  var flags: integer_t
  var suspend_count: integer_t
  var sleep_time: integer_t
}
typealias thread_basic_info_data_t = thread_basic_info
typealias thread_basic_info_t = UnsafeMutablePointer<thread_basic_info>
func thread_create(parent_task: task_t, child_act: UnsafeMutablePointer<thread_act_t>) -> kern_return_t
func thread_create_running(parent_task: task_t, flavor: thread_state_flavor_t, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t, child_act: UnsafeMutablePointer<thread_act_t>) -> kern_return_t
func thread_depress_abort(thread: thread_act_t) -> kern_return_t
struct thread_extended_policy {
  var timeshare: boolean_t
}
typealias thread_extended_policy_data_t = thread_extended_policy
typealias thread_extended_policy_t = UnsafeMutablePointer<thread_extended_policy>
typealias thread_flavor_t = natural_t
func thread_get_assignment(thread: thread_act_t, assigned_set: UnsafeMutablePointer<processor_set_name_t>) -> kern_return_t
func thread_get_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: UnsafeMutablePointer<mach_msg_type_number_t>, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) -> kern_return_t
func thread_get_mach_voucher(thr_act: thread_act_t, which: mach_voucher_selector_t, voucher: UnsafeMutablePointer<ipc_voucher_t>) -> kern_return_t
func thread_get_special_port(thr_act: thread_act_t, which_port: Int32, special_port: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func thread_get_state(target_act: thread_act_t, flavor: thread_state_flavor_t, old_state: thread_state_t, old_stateCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct thread_identifier_info {
  var thread_id: UInt64
  var thread_handle: UInt64
  var dispatch_qaddr: UInt64
}
typealias thread_identifier_info_data_t = thread_identifier_info
typealias thread_identifier_info_t = UnsafeMutablePointer<thread_identifier_info>
func thread_info(target_act: thread_act_t, flavor: thread_flavor_t, thread_info_out: thread_info_t, thread_info_outCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias thread_info_data_t = (integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t, integer_t)
typealias thread_info_t = UnsafeMutablePointer<integer_t>
struct thread_latency_qos_policy {
  var thread_latency_qos_tier: thread_latency_qos_t
}
typealias thread_latency_qos_policy_data_t = thread_latency_qos_policy
typealias thread_latency_qos_policy_t = UnsafeMutablePointer<thread_latency_qos_policy>
typealias thread_latency_qos_t = integer_t
func thread_policy(thr_act: thread_act_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, set_limit: boolean_t) -> kern_return_t
typealias thread_policy_flavor_t = natural_t
func thread_policy_get(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: thread_policy_t, policy_infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>, get_default: UnsafeMutablePointer<boolean_t>) -> kern_return_t
func thread_policy_set(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: thread_policy_t, policy_infoCnt: mach_msg_type_number_t) -> kern_return_t
typealias thread_policy_t = UnsafeMutablePointer<integer_t>
typealias thread_port_array_t = thread_array_t
typealias thread_port_t = thread_t
struct thread_precedence_policy {
  var importance: integer_t
}
typealias thread_precedence_policy_data_t = thread_precedence_policy
typealias thread_precedence_policy_t = UnsafeMutablePointer<thread_precedence_policy>
func thread_resume(target_act: thread_act_t) -> kern_return_t
func thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t
func thread_set_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) -> kern_return_t
func thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t
func thread_set_policy(thr_act: thread_act_t, pset: processor_set_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, limit: policy_limit_t, limitCnt: mach_msg_type_number_t) -> kern_return_t
func thread_set_special_port(thr_act: thread_act_t, which_port: Int32, special_port: mach_port_t) -> kern_return_t
func thread_set_state(target_act: thread_act_t, flavor: thread_state_flavor_t, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t) -> kern_return_t
struct thread_standard_policy {
  var no_data: natural_t
}
typealias thread_standard_policy_data_t = thread_standard_policy
typealias thread_standard_policy_t = UnsafeMutablePointer<thread_standard_policy>
typealias thread_state_data_t = (natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t, natural_t)
typealias thread_state_flavor_array_t = UnsafeMutablePointer<thread_state_flavor_t>
typealias thread_state_flavor_t = Int32
typealias thread_state_t = UnsafeMutablePointer<natural_t>
func thread_suspend(target_act: thread_act_t) -> kern_return_t
func thread_swap_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: exception_mask_array_t, masksCnt: UnsafeMutablePointer<mach_msg_type_number_t>, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) -> kern_return_t
func thread_swap_mach_voucher(thr_act: thread_act_t, new_voucher: ipc_voucher_t, old_voucher: UnsafeMutablePointer<ipc_voucher_t>) -> kern_return_t
func thread_switch(thread_name: mach_port_name_t, option: Int32, option_time: mach_msg_timeout_t) -> kern_return_t
typealias thread_t = mach_port_t
func thread_terminate(target_act: thread_act_t) -> kern_return_t
struct thread_throughput_qos_policy {
  var thread_throughput_qos_tier: thread_throughput_qos_t
}
typealias thread_throughput_qos_policy_data_t = thread_throughput_qos_policy
typealias thread_throughput_qos_policy_t = UnsafeMutablePointer<thread_throughput_qos_policy>
typealias thread_throughput_qos_t = integer_t
struct thread_time_constraint_policy {
  var period: UInt32
  var computation: UInt32
  var constraint: UInt32
  var preemptible: boolean_t
}
typealias thread_time_constraint_policy_data_t = thread_time_constraint_policy
typealias thread_time_constraint_policy_t = UnsafeMutablePointer<thread_time_constraint_policy>
func thread_wire(host_priv: host_priv_t, thread: thread_act_t, wired: boolean_t) -> kern_return_t
func time(_: UnsafeMutablePointer<time_t>) -> time_t
func time2posix(_: time_t) -> time_t
typealias time_t = __darwin_time_t
struct time_value {
  var seconds: integer_t
  var microseconds: integer_t
}
typealias time_value_t = time_value
struct timeb {
  var time: time_t
  var millitm: UInt16
  var timezone: Int16
  var dstflag: Int16
}
func timegm(_: UnsafeMutablePointer<tm>) -> time_t
func timelocal(_: UnsafeMutablePointer<tm>) -> time_t
func times(_: UnsafeMutablePointer<tms>) -> clock_t
struct timespec {
  var tv_sec: __darwin_time_t
  var tv_nsec: Int
}
struct timeval {
  var tv_sec: __darwin_time_t
  var tv_usec: __darwin_suseconds_t
}
struct timeval32 {
  var tv_sec: __int32_t
  var tv_usec: __int32_t
}
struct timezone {
  var tz_minuteswest: Int32
  var tz_dsttime: Int32
}
var timezone: Int
struct tm {
  var tm_sec: Int32
  var tm_min: Int32
  var tm_hour: Int32
  var tm_mday: Int32
  var tm_mon: Int32
  var tm_year: Int32
  var tm_wday: Int32
  var tm_yday: Int32
  var tm_isdst: Int32
  var tm_gmtoff: Int
  var tm_zone: UnsafeMutablePointer<Int8>
}
func tmpfile() -> UnsafeMutablePointer<FILE>
@availability(*, unavailable, message="This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.") func tmpnam(_: UnsafeMutablePointer<Int8>) -> UnsafeMutablePointer<Int8>
struct tms {
  var tms_utime: clock_t
  var tms_stime: clock_t
  var tms_cutime: clock_t
  var tms_cstime: clock_t
}
func toascii(_c: Int32) -> Int32
struct tokenstr {
  var id: u_char
  var data: UnsafeMutablePointer<u_char>
  var len: UInt
}
typealias tokenstr_t = tokenstr
func tolower(_c: Int32) -> Int32
struct tostruct {
  var selfpc: UInt32
  var count: Int32
  var link: UInt16
  var order: UInt16
}
struct tostruct_64 {
  var selfpc: UInt64
  var count: Int32
  var link: UInt16
  var order: UInt16
}
typealias tostruct_t = tostruct_64
func toupper(_c: Int32) -> Int32
func towctrans(_: wint_t, _: wctrans_t) -> wint_t
func towlower(_wc: wint_t) -> wint_t
func towupper(_wc: wint_t) -> wint_t
func trunc(_: Double) -> Double
func truncate(_: UnsafePointer<Int8>, _: off_t) -> Int32
func truncf(_: Float) -> Float
func tsearch(_: UnsafePointer<Void>, _: UnsafeMutablePointer<UnsafeMutablePointer<Void>>, _: CFunctionPointer<((UnsafePointer<Void>, UnsafePointer<Void>) -> Int32)>) -> UnsafeMutablePointer<Void>
func ttyname(_: Int32) -> UnsafeMutablePointer<Int8>
func ttyname_r(_: Int32, _: UnsafeMutablePointer<Int8>, _: UInt) -> Int32
struct ttysize {
  var ts_lines: UInt16
  var ts_cols: UInt16
  var ts_xxx: UInt16
  var ts_yyy: UInt16
}
func ttyslot() -> Int32
func twalk(_: UnsafePointer<Void>, _: CFunctionPointer<((UnsafePointer<Void>, VISIT, Int32) -> Void)>)
func tzset()
func tzsetwall()
typealias u_char = UInt8
typealias u_int = UInt32
typealias u_long = UInt
typealias u_quad_t = UInt64
typealias u_short = UInt16
func ualarm(_: useconds_t, _: useconds_t) -> useconds_t
typealias ucontext64_t = __darwin_ucontext64
typealias ucontext_t = __darwin_ucontext
struct ucred {
  var cr_ref: u_long
  var cr_posix: posix_cred
  var cr_label: COpaquePointer
  var cr_audit: au_session
}
typealias uid_t = __darwin_uid_t
typealias uint = UInt32
typealias uint_fast16_t = UInt16
typealias uint_fast32_t = UInt32
typealias uint_fast64_t = UInt64
typealias uint_fast8_t = UInt8
typealias uint_least16_t = UInt16
typealias uint_least32_t = UInt32
typealias uint_least64_t = UInt64
typealias uint_least8_t = UInt8
typealias uintmax_t = UInt
typealias uintptr_t = UInt
struct uio_rw {
  init(_ value: UInt32) {

  }
  var value: UInt32
}
typealias uio_t = COpaquePointer
func umask(_: mode_t) -> mode_t
@availability(OSX, unavailable, introduced=10.4, deprecated=10.6, message="APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift") func umaskx_np(_: filesec_t) -> Int32
struct un_sockinfo {
  var unsi_conn_so: UInt64
  var unsi_conn_pcb: UInt64
}
func uname(_: UnsafeMutablePointer<utsname>) -> Int32
func undelete(_: UnsafePointer<Int8>) -> Int32
var underline: Int {
  get {
    return
  }
}
func ungetc(_: Int32, _: UnsafeMutablePointer<FILE>) -> Int32
func ungetwc(_: wint_t, _: UnsafeMutablePointer<FILE>) -> wint_t
typealias unicode_to_hfs_func_t = CFunctionPointer<((UnsafeMutablePointer<UniChar>, UInt32, UnsafeMutablePointer<UInt8>) -> Int32)>
func unlink(_: UnsafePointer<Int8>) -> Int32
@availability(OSX, introduced=10.10) func unlinkat(_: Int32, _: UnsafePointer<Int8>, _: Int32) -> Int32
func unlockpt(_: Int32) -> Int32
func unmount(_: UnsafePointer<Int8>, _: Int32) -> Int32
typealias unp_gen_t = u_quad_t
func unsetenv(_: UnsafePointer<Int8>) -> Int32
func unwhiteout(_: UnsafePointer<Int8>) -> Int32
typealias upl_t = mach_port_t
typealias useconds_t = __darwin_useconds_t
struct user {
}
typealias user_addr_t = UInt64
func user_from_uid(_: uid_t, _: Int32) -> UnsafeMutablePointer<Int8>
typealias user_long_t = Int64
typealias user_off_t = Int64
typealias user_size_t = UInt64
typealias user_ssize_t = Int64
typealias user_subsystem_t = UnsafeMutablePointer<Int8>
typealias user_time_t = Int64
typealias user_ulong_t = UInt64
typealias ushort = UInt16
func usleep(_: useconds_t) -> Int32
struct utimbuf {
  var actime: time_t
  var modtime: time_t
}
func utime(_: UnsafePointer<Int8>, _: UnsafePointer<utimbuf>) -> Int32
func utimes(_: UnsafePointer<Int8>, _: UnsafePointer<timeval>) -> Int32
struct utmpx {
  var ut_user: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ut_id: (Int8, Int8, Int8, Int8)
  var ut_line: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ut_pid: pid_t
  var ut_type: Int16
  var ut_tv: timeval
  var ut_host: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var ut_pad: (__uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t, __uint32_t)
}
@availability(OSX, introduced=10.5) func utmpxname(_: UnsafePointer<Int8>) -> Int32
struct utsname {
  var sysname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var nodename: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var release: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var version: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var machine: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
func uuid_clear(uu: UnsafeMutablePointer<UInt8>)
func uuid_compare(uu1: UnsafePointer<UInt8>, uu2: UnsafePointer<UInt8>) -> Int32
func uuid_copy(dst: UnsafeMutablePointer<UInt8>, src: UnsafePointer<UInt8>)
func uuid_generate(out: UnsafeMutablePointer<UInt8>)
func uuid_generate_random(out: UnsafeMutablePointer<UInt8>)
func uuid_generate_time(out: UnsafeMutablePointer<UInt8>)
func uuid_is_null(uu: UnsafePointer<UInt8>) -> Int32
func uuid_parse(`in`: UnsafePointer<Int8>, uu: UnsafeMutablePointer<UInt8>) -> Int32
typealias uuid_string_t = __darwin_uuid_string_t
typealias uuid_t = __darwin_uuid_t
func uuid_unparse(uu: UnsafePointer<UInt8>, out: UnsafeMutablePointer<Int8>)
func uuid_unparse_lower(uu: UnsafePointer<UInt8>, out: UnsafeMutablePointer<Int8>)
func uuid_unparse_upper(uu: UnsafePointer<UInt8>, out: UnsafeMutablePointer<Int8>)
typealias va_list = __darwin_va_list
func valloc(_: UInt) -> UnsafeMutablePointer<Void>
func vasprintf(_: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
@availability(OSX, introduced=10.7) func vdprintf(_: Int32, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func vfork() -> Int32
func vfprintf(_: UnsafeMutablePointer<FILE>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
typealias vfs_context_t = COpaquePointer
struct vfs_server {
  var vs_minutes: Int32
  var vs_server_name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)
}
func vfscanf(_: UnsafeMutablePointer<FILE>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
struct vfsconf {
  var vfc_reserved1: UInt32
  var vfc_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var vfc_typenum: Int32
  var vfc_refcount: Int32
  var vfc_flags: Int32
  var vfc_reserved2: UInt32
  var vfc_reserved3: UInt32
}
struct vfsidctl {
  var vc_vers: Int32
  var vc_fsid: fsid_t
  var vc_ptr: UnsafeMutablePointer<Void>
  var vc_len: UInt
  var vc_spare: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct vfsquery {
  var vq_flags: UInt32
  var vq_spare: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)
}
struct vfsstatfs {
  var f_bsize: UInt32
  var f_iosize: UInt
  var f_blocks: UInt64
  var f_bfree: UInt64
  var f_bavail: UInt64
  var f_bused: UInt64
  var f_files: UInt64
  var f_ffree: UInt64
  var f_fsid: fsid_t
  var f_owner: uid_t
  var f_flags: UInt64
  var f_fstypename: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_mntonname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_mntfromname: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
  var f_fssubtype: UInt32
  var f_reserved: (UnsafeMutablePointer<Void>, UnsafeMutablePointer<Void>)
}
typealias vfstable_t = COpaquePointer
func vfwprintf(_: UnsafeMutablePointer<FILE>, _: UnsafePointer<wchar_t>, _: CVaListPointer) -> Int32
func vfwscanf(_: UnsafeMutablePointer<FILE>, _: UnsafePointer<wchar_t>, _: CVaListPointer) -> Int32
struct vinfo_stat {
  var vst_dev: UInt32
  var vst_mode: UInt16
  var vst_nlink: UInt16
  var vst_ino: UInt64
  var vst_uid: uid_t
  var vst_gid: gid_t
  var vst_atime: Int64
  var vst_atimensec: Int64
  var vst_mtime: Int64
  var vst_mtimensec: Int64
  var vst_ctime: Int64
  var vst_ctimensec: Int64
  var vst_birthtime: Int64
  var vst_birthtimensec: Int64
  var vst_size: off_t
  var vst_blocks: Int64
  var vst_blksize: Int32
  var vst_flags: UInt32
  var vst_gen: UInt32
  var vst_rdev: UInt32
  var vst_qspare: (Int64, Int64)
}
typealias vm32_object_id_t = UInt32
typealias vm_address_t = vm_offset_t
func vm_allocate(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: vm_size_t, flags: Int32) -> kern_return_t
func vm_allocate_cpm(host_priv: host_priv_t, task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: vm_size_t, flags: Int32) -> kern_return_t
func vm_behavior_set(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_behavior: vm_behavior_t) -> kern_return_t
typealias vm_behavior_t = Int32
func vm_copy(target_task: vm_map_t, source_address: vm_address_t, size: vm_size_t, dest_address: vm_address_t) -> kern_return_t
func vm_deallocate(target_task: vm_map_t, address: vm_address_t, size: vm_size_t) -> kern_return_t
struct vm_extmod_statistics {
  var task_for_pid_count: Int64
  var task_for_pid_caller_count: Int64
  var thread_creation_count: Int64
  var thread_creation_caller_count: Int64
  var thread_set_state_count: Int64
  var thread_set_state_caller_count: Int64
}
typealias vm_extmod_statistics_data_t = vm_extmod_statistics
typealias vm_extmod_statistics_t = UnsafeMutablePointer<vm_extmod_statistics>
struct vm_info_object {
  var vio_object: natural_t
  var vio_size: natural_t
  var vio_ref_count: UInt32
  var vio_resident_page_count: UInt32
  var vio_absent_count: UInt32
  var vio_copy: natural_t
  var vio_shadow: natural_t
  var vio_shadow_offset: natural_t
  var vio_paging_offset: natural_t
  var vio_copy_strategy: memory_object_copy_strategy_t
  var vio_last_alloc: vm_offset_t
  var vio_paging_in_progress: UInt32
  var vio_pager_created: boolean_t
  var vio_pager_initialized: boolean_t
  var vio_pager_ready: boolean_t
  var vio_can_persist: boolean_t
  var vio_internal: boolean_t
  var vio_temporary: boolean_t
  var vio_alive: boolean_t
  var vio_purgable: boolean_t
  var vio_purgable_volatile: boolean_t
}
typealias vm_info_object_array_t = UnsafeMutablePointer<vm_info_object_t>
typealias vm_info_object_t = vm_info_object
struct vm_info_region {
  var vir_start: natural_t
  var vir_end: natural_t
  var vir_object: natural_t
  var vir_offset: natural_t
  var vir_needs_copy: boolean_t
  var vir_protection: vm_prot_t
  var vir_max_protection: vm_prot_t
  var vir_inheritance: vm_inherit_t
  var vir_wired_count: natural_t
  var vir_user_wired_count: natural_t
}
struct vm_info_region_64 {
  var vir_start: natural_t
  var vir_end: natural_t
  var vir_object: natural_t
  var vir_offset: memory_object_offset_t
  var vir_needs_copy: boolean_t
  var vir_protection: vm_prot_t
  var vir_max_protection: vm_prot_t
  var vir_inheritance: vm_inherit_t
  var vir_wired_count: natural_t
  var vir_user_wired_count: natural_t
}
typealias vm_info_region_64_t = vm_info_region_64
typealias vm_info_region_t = vm_info_region
func vm_inherit(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_inheritance: vm_inherit_t) -> kern_return_t
typealias vm_inherit_t = UInt32
@availability(OSX, introduced=10.9) var vm_kernel_page_mask: vm_size_t
@availability(OSX, introduced=10.9) var vm_kernel_page_shift: Int32
@availability(OSX, introduced=10.9) var vm_kernel_page_size: vm_size_t
func vm_machine_attribute(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, attribute: vm_machine_attribute_t, value: UnsafeMutablePointer<vm_machine_attribute_val_t>) -> kern_return_t
typealias vm_machine_attribute_t = UInt32
typealias vm_machine_attribute_val_t = Int32
func vm_map(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: Int32, object: mem_entry_name_port_t, offset: vm_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
func vm_map_64(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: Int32, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) -> kern_return_t
typealias vm_map_address_t = UInt64
typealias vm_map_offset_t = UInt64
func vm_map_page_query(target_map: vm_map_t, offset: vm_offset_t, disposition: UnsafeMutablePointer<integer_t>, ref_count: UnsafeMutablePointer<integer_t>) -> kern_return_t
typealias vm_map_size_t = UInt64
typealias vm_map_t = mach_port_t
func vm_mapped_pages_info(task: vm_map_t, pages: UnsafeMutablePointer<page_address_array_t>, pagesCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_msync(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, sync_flags: vm_sync_t) -> kern_return_t
typealias vm_named_entry_t = mach_port_t
typealias vm_object_id_t = UInt64
typealias vm_object_offset_t = UInt64
typealias vm_object_size_t = UInt64
typealias vm_offset_t = UInt
struct vm_page_info_basic {
  var disposition: Int32
  var ref_count: Int32
  var object_id: vm_object_id_t
  var offset: memory_object_offset_t
  var depth: Int32
  var __pad: Int32
}
typealias vm_page_info_basic_data_t = vm_page_info_basic
typealias vm_page_info_basic_t = UnsafeMutablePointer<vm_page_info_basic>
typealias vm_page_info_flavor_t = Int32
typealias vm_page_info_t = UnsafeMutablePointer<Int32>
var vm_page_mask: vm_size_t
var vm_page_shift: Int32
var vm_page_size: vm_size_t
typealias vm_prot_t = Int32
func vm_protect(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) -> kern_return_t
func vm_purgable_control(target_task: vm_map_t, address: vm_address_t, control: vm_purgable_t, state: UnsafeMutablePointer<Int32>) -> kern_return_t
typealias vm_purgable_t = Int32
struct vm_purgeable_info {
  var fifo_data: (vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t)
  var obsolete_data: vm_purgeable_stat_t
  var lifo_data: (vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t, vm_purgeable_stat_t)
}
typealias vm_purgeable_info_t = UnsafeMutablePointer<vm_purgeable_info>
struct vm_purgeable_stat {
  var count: UInt64
  var size: UInt64
}
typealias vm_purgeable_stat_t = vm_purgeable_stat
typealias vm_range_recorder_t = (task_t, UnsafeMutablePointer<Void>, UInt32, UnsafeMutablePointer<vm_range_t>, UInt32) -> Void
struct vm_range_t {
  var address: vm_address_t
  var size: vm_size_t
}
func vm_read(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, data: UnsafeMutablePointer<vm_offset_t>, dataCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
struct vm_read_entry {
  var address: vm_address_t
  var size: vm_size_t
}
typealias vm_read_entry_t = (vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry, vm_read_entry)
func vm_read_list(target_task: vm_map_t, data_list: UnsafeMutablePointer<vm_read_entry>, count: natural_t) -> kern_return_t
func vm_read_overwrite(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, data: vm_address_t, outsize: UnsafeMutablePointer<vm_size_t>) -> kern_return_t
func vm_region(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: UnsafeMutablePointer<vm_size_t>, flavor: vm_region_flavor_t, info: vm_region_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>, object_name: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
func vm_region_64(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: UnsafeMutablePointer<vm_size_t>, flavor: vm_region_flavor_t, info: vm_region_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>, object_name: UnsafeMutablePointer<mach_port_t>) -> kern_return_t
struct vm_region_basic_info {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var shared: boolean_t
  var reserved: boolean_t
  var offset: UInt32
  var behavior: vm_behavior_t
  var user_wired_count: UInt16
}
struct vm_region_basic_info_64 {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var shared: boolean_t
  var reserved: boolean_t
  var offset: memory_object_offset_t
  var behavior: vm_behavior_t
  var user_wired_count: UInt16
}
typealias vm_region_basic_info_64_t = UnsafeMutablePointer<vm_region_basic_info_64>
typealias vm_region_basic_info_data_64_t = vm_region_basic_info_64
typealias vm_region_basic_info_data_t = vm_region_basic_info
typealias vm_region_basic_info_t = UnsafeMutablePointer<vm_region_basic_info>
struct vm_region_extended_info {
  var protection: vm_prot_t
  var user_tag: UInt32
  var pages_resident: UInt32
  var pages_shared_now_private: UInt32
  var pages_swapped_out: UInt32
  var pages_dirtied: UInt32
  var ref_count: UInt32
  var shadow_depth: UInt16
  var external_pager: UInt8
  var share_mode: UInt8
  var pages_reusable: UInt32
}
typealias vm_region_extended_info_data_t = vm_region_extended_info
typealias vm_region_extended_info_t = UnsafeMutablePointer<vm_region_extended_info>
typealias vm_region_flavor_t = Int32
typealias vm_region_info_64_t = UnsafeMutablePointer<Int32>
typealias vm_region_info_data_t = (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
typealias vm_region_info_t = UnsafeMutablePointer<Int32>
func vm_region_recurse(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: UnsafeMutablePointer<vm_size_t>, nesting_depth: UnsafeMutablePointer<natural_t>, info: vm_region_recurse_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
func vm_region_recurse_64(target_task: vm_map_t, address: UnsafeMutablePointer<vm_address_t>, size: UnsafeMutablePointer<vm_size_t>, nesting_depth: UnsafeMutablePointer<natural_t>, info: vm_region_recurse_info_t, infoCnt: UnsafeMutablePointer<mach_msg_type_number_t>) -> kern_return_t
typealias vm_region_recurse_info_64_t = UnsafeMutablePointer<Int32>
typealias vm_region_recurse_info_t = UnsafeMutablePointer<Int32>
struct vm_region_submap_info {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var offset: UInt32
  var user_tag: UInt32
  var pages_resident: UInt32
  var pages_shared_now_private: UInt32
  var pages_swapped_out: UInt32
  var pages_dirtied: UInt32
  var ref_count: UInt32
  var shadow_depth: UInt16
  var external_pager: UInt8
  var share_mode: UInt8
  var is_submap: boolean_t
  var behavior: vm_behavior_t
  var object_id: vm32_object_id_t
  var user_wired_count: UInt16
}
struct vm_region_submap_info_64 {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var offset: memory_object_offset_t
  var user_tag: UInt32
  var pages_resident: UInt32
  var pages_shared_now_private: UInt32
  var pages_swapped_out: UInt32
  var pages_dirtied: UInt32
  var ref_count: UInt32
  var shadow_depth: UInt16
  var external_pager: UInt8
  var share_mode: UInt8
  var is_submap: boolean_t
  var behavior: vm_behavior_t
  var object_id: vm32_object_id_t
  var user_wired_count: UInt16
  var pages_reusable: UInt32
}
typealias vm_region_submap_info_64_t = UnsafeMutablePointer<vm_region_submap_info_64>
typealias vm_region_submap_info_data_64_t = vm_region_submap_info_64
typealias vm_region_submap_info_data_t = vm_region_submap_info
typealias vm_region_submap_info_t = UnsafeMutablePointer<vm_region_submap_info>
struct vm_region_submap_short_info_64 {
  var protection: vm_prot_t
  var max_protection: vm_prot_t
  var inheritance: vm_inherit_t
  var offset: memory_object_offset_t
  var user_tag: UInt32
  var ref_count: UInt32
  var shadow_depth: UInt16
  var external_pager: UInt8
  var share_mode: UInt8
  var is_submap: boolean_t
  var behavior: vm_behavior_t
  var object_id: vm32_object_id_t
  var user_wired_count: UInt16
}
typealias vm_region_submap_short_info_64_t = UnsafeMutablePointer<vm_region_submap_short_info_64>
typealias vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64
struct vm_region_top_info {
  var obj_id: UInt32
  var ref_count: UInt32
  var private_pages_resident: UInt32
  var shared_pages_resident: UInt32
  var share_mode: UInt8
}
typealias vm_region_top_info_data_t = vm_region_top_info
typealias vm_region_top_info_t = UnsafeMutablePointer<vm_region_top_info>
func vm_remap(target_task: vm_map_t, target_address: UnsafeMutablePointer<vm_address_t>, size: vm_size_t, mask: vm_address_t, flags: Int32, src_task: vm_map_t, src_address: vm_address_t, copy: boolean_t, cur_protection: UnsafeMutablePointer<vm_prot_t>, max_protection: UnsafeMutablePointer<vm_prot_t>, inheritance: vm_inherit_t) -> kern_return_t
typealias vm_size_t = UInt
struct vm_statistics {
  var free_count: natural_t
  var active_count: natural_t
  var inactive_count: natural_t
  var wire_count: natural_t
  var zero_fill_count: natural_t
  var reactivations: natural_t
  var pageins: natural_t
  var pageouts: natural_t
  var faults: natural_t
  var cow_faults: natural_t
  var lookups: natural_t
  var hits: natural_t
  var purgeable_count: natural_t
  var purges: natural_t
  var speculative_count: natural_t
}
struct vm_statistics64 {
  var free_count: natural_t
  var active_count: natural_t
  var inactive_count: natural_t
  var wire_count: natural_t
  var zero_fill_count: UInt64
  var reactivations: UInt64
  var pageins: UInt64
  var pageouts: UInt64
  var faults: UInt64
  var cow_faults: UInt64
  var lookups: UInt64
  var hits: UInt64
  var purges: UInt64
  var purgeable_count: natural_t
  var speculative_count: natural_t
  var decompressions: UInt64
  var compressions: UInt64
  var swapins: UInt64
  var swapouts: UInt64
  var compressor_page_count: natural_t
  var throttled_count: natural_t
  var external_page_count: natural_t
  var internal_page_count: natural_t
  var total_uncompressed_pages_in_compressor: UInt64
}
typealias vm_statistics64_data_t = vm_statistics64
typealias vm_statistics64_t = UnsafeMutablePointer<vm_statistics64>
typealias vm_statistics_data_t = vm_statistics
typealias vm_statistics_t = UnsafeMutablePointer<vm_statistics>
typealias vm_sync_t = UInt32
typealias vm_task_entry_t = mach_port_t
func vm_wire(host_priv: host_priv_t, task: vm_map_t, address: vm_address_t, size: vm_size_t, desired_access: vm_prot_t) -> kern_return_t
func vm_write(target_task: vm_map_t, address: vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) -> kern_return_t
struct vmspace {
  var dummy: Int32
  var dummy2: caddr_t
  var dummy3: (Int32, Int32, Int32, Int32, Int32)
  var dummy4: (caddr_t, caddr_t, caddr_t)
}
struct vnode_fdinfo {
  var pfi: proc_fileinfo
  var pvi: vnode_info
}
struct vnode_fdinfowithpath {
  var pfi: proc_fileinfo
  var pvip: vnode_info_path
}
struct vnode_info {
  var vi_stat: vinfo_stat
  var vi_type: Int32
  var vi_pad: Int32
  var vi_fsid: fsid_t
}
struct vnode_info_path {
  var vip_vi: vnode_info
  var vip_path: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias vnode_t = COpaquePointer
struct vol_attributes_attr {
  var validattr: attribute_set_t
  var nativeattr: attribute_set_t
}
typealias vol_attributes_attr_t = vol_attributes_attr
struct vol_capabilities_attr {
  var capabilities: vol_capabilities_set_t
  var valid: vol_capabilities_set_t
}
typealias vol_capabilities_attr_t = vol_capabilities_attr
typealias vol_capabilities_set_t = (UInt32, UInt32, UInt32, UInt32)
func voucher_mach_msg_adopt(msg: UnsafeMutablePointer<mach_msg_header_t>) -> voucher_mach_msg_state_t
func voucher_mach_msg_clear(msg: UnsafeMutablePointer<mach_msg_header_t>)
func voucher_mach_msg_revert(state: voucher_mach_msg_state_t)
func voucher_mach_msg_set(msg: UnsafeMutablePointer<mach_msg_header_t>) -> boolean_t
typealias voucher_mach_msg_state_t = COpaquePointer
func vprintf(_: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
var vprintf_stderr_func: CFunctionPointer<((UnsafePointer<Int8>, CVaListPointer) -> Int32)>
func vscanf(_: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func vsnprintf(_: UnsafeMutablePointer<Int8>, _: UInt, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func vsprintf(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func vsscanf(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: CVaListPointer) -> Int32
func vswprintf(_: UnsafeMutablePointer<wchar_t>, _: UInt, _: UnsafePointer<wchar_t>, _: CVaListPointer) -> Int32
func vswscanf(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: CVaListPointer) -> Int32
func vsyslog(_: Int32, _: UnsafePointer<Int8>, _: CVaListPointer)
func vwprintf(_: UnsafePointer<wchar_t>, _: CVaListPointer) -> Int32
func vwscanf(_: UnsafePointer<wchar_t>, _: CVaListPointer) -> Int32
func wait(_: UnsafeMutablePointer<Int32>) -> pid_t
func wait3(_: UnsafeMutablePointer<Int32>, _: Int32, _: UnsafeMutablePointer<rusage>) -> pid_t
func wait4(_: pid_t, _: UnsafeMutablePointer<Int32>, _: Int32, _: UnsafeMutablePointer<rusage>) -> pid_t
func waitevent(_: er_t, _: UnsafeMutablePointer<timeval>) -> Int32
func waitid(_: idtype_t, _: id_t, _: UnsafeMutablePointer<siginfo_t>, _: Int32) -> Int32
func waitpid(_: pid_t, _: UnsafeMutablePointer<Int32>, _: Int32) -> pid_t
func watchevent(_: er_t, _: Int32) -> Int32
typealias wchar_t = Int32
@availability(OSX, introduced=10.7) func wcpcpy(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UnsafeMutablePointer<wchar_t>
@availability(OSX, introduced=10.7) func wcpncpy(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UnsafeMutablePointer<wchar_t>
func wcrtomb(_: UnsafeMutablePointer<Int8>, _: wchar_t, _: COpaquePointer) -> UInt
@availability(OSX, introduced=10.7) func wcscasecmp(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> Int32
func wcscat(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UnsafeMutablePointer<wchar_t>
func wcschr(_: UnsafePointer<wchar_t>, _: wchar_t) -> UnsafeMutablePointer<wchar_t>
func wcscmp(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> Int32
func wcscoll(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> Int32
func wcscpy(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UnsafeMutablePointer<wchar_t>
func wcscspn(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UInt
@availability(OSX, introduced=10.7) func wcsdup(_: UnsafePointer<wchar_t>) -> UnsafeMutablePointer<wchar_t>
func wcsftime(_: UnsafeMutablePointer<wchar_t>, _: UInt, _: UnsafePointer<wchar_t>, _: UnsafePointer<tm>) -> UInt
func wcslcat(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UInt
func wcslcpy(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UInt
func wcslen(_: UnsafePointer<wchar_t>) -> UInt
@availability(OSX, introduced=10.7) func wcsncasecmp(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>, n: UInt) -> Int32
func wcsncat(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UnsafeMutablePointer<wchar_t>
func wcsncmp(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> Int32
func wcsncpy(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UnsafeMutablePointer<wchar_t>
@availability(OSX, introduced=10.7) func wcsnlen(_: UnsafePointer<wchar_t>, _: UInt) -> UInt
func wcsnrtombs(_: UnsafeMutablePointer<Int8>, _: UnsafeMutablePointer<UnsafePointer<wchar_t>>, _: UInt, _: UInt, _: COpaquePointer) -> UInt
func wcspbrk(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UnsafeMutablePointer<wchar_t>
func wcsrchr(_: UnsafePointer<wchar_t>, _: wchar_t) -> UnsafeMutablePointer<wchar_t>
func wcsrtombs(_: UnsafeMutablePointer<Int8>, _: UnsafeMutablePointer<UnsafePointer<wchar_t>>, _: UInt, _: COpaquePointer) -> UInt
func wcsspn(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UInt
func wcsstr(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>) -> UnsafeMutablePointer<wchar_t>
func wcstod(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>) -> Double
func wcstof(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>) -> Float
@availability(OSX, introduced=10.4) func wcstoimax(__nptr: UnsafePointer<wchar_t>, __endptr: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>, __base: Int32) -> intmax_t
func wcstok(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>) -> UnsafeMutablePointer<wchar_t>
func wcstol(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>, _: Int32) -> Int
func wcstoll(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>, _: Int32) -> Int64
func wcstombs(_: UnsafeMutablePointer<Int8>, _: UnsafePointer<wchar_t>, _: UInt) -> UInt
func wcstoul(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>, _: Int32) -> UInt
func wcstoull(_: UnsafePointer<wchar_t>, _: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>, _: Int32) -> UInt64
@availability(OSX, introduced=10.4) func wcstoumax(__nptr: UnsafePointer<wchar_t>, __endptr: UnsafeMutablePointer<UnsafeMutablePointer<wchar_t>>, __base: Int32) -> uintmax_t
func wcswidth(_: UnsafePointer<wchar_t>, _: UInt) -> Int32
func wcsxfrm(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UInt
func wctob(_: wint_t) -> Int32
func wctomb(_: UnsafeMutablePointer<Int8>, _: wchar_t) -> Int32
func wctrans(_: UnsafePointer<Int8>) -> wctrans_t
typealias wctrans_t = __darwin_wctrans_t
func wctype(_: UnsafePointer<Int8>) -> wctype_t
typealias wctype_t = __darwin_wctype_t
func wcwidth(_: wchar_t) -> Int32
struct wide {
  var lo: UInt32
  var hi: Int32
}
struct winsize {
  var ws_row: UInt16
  var ws_col: UInt16
  var ws_xpixel: UInt16
  var ws_ypixel: UInt16
}
typealias wint_t = __darwin_wint_t
func wmemchr(_: UnsafePointer<wchar_t>, _: wchar_t, _: UInt) -> UnsafeMutablePointer<wchar_t>
func wmemcmp(_: UnsafePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> Int32
func wmemcpy(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UnsafeMutablePointer<wchar_t>
func wmemmove(_: UnsafeMutablePointer<wchar_t>, _: UnsafePointer<wchar_t>, _: UInt) -> UnsafeMutablePointer<wchar_t>
func wmemset(_: UnsafeMutablePointer<wchar_t>, _: wchar_t, _: UInt) -> UnsafeMutablePointer<wchar_t>
@availability(OSX, introduced=10.0) func wordexp(_: UnsafePointer<Int8>, _: UnsafeMutablePointer<wordexp_t>, _: Int32) -> Int32
struct wordexp_t {
  var we_wordc: UInt
  var we_wordv: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>
  var we_offs: UInt
}
@availability(OSX, introduced=10.0) func wordfree(_: UnsafeMutablePointer<wordexp_t>)
func write(_: Int32, _: UnsafePointer<Void>, _: UInt) -> Int
func write_random(buffer: UnsafeMutablePointer<Void>, numBytes: u_int) -> Int32
func writev(_: Int32, _: UnsafePointer<iovec>, _: Int32) -> Int
@availability(OSX, introduced=10.5) func wtmpxname(_: UnsafePointer<Int8>) -> Int32
struct x86_avx_state {
  var ash: x86_state_hdr_t
}
typealias x86_avx_state32_t = __darwin_i386_avx_state
typealias x86_avx_state64_t = __darwin_x86_avx_state64
typealias x86_avx_state_t = x86_avx_state
struct x86_debug_state {
  var dsh: x86_state_hdr_t
}
typealias x86_debug_state32_t = __darwin_x86_debug_state32
typealias x86_debug_state64_t = __darwin_x86_debug_state64
typealias x86_debug_state_t = x86_debug_state
struct x86_exception_state {
  var esh: x86_state_hdr_t
}
typealias x86_exception_state32_t = __darwin_i386_exception_state
typealias x86_exception_state64_t = __darwin_x86_exception_state64
typealias x86_exception_state_t = x86_exception_state
struct x86_float_state {
  var fsh: x86_state_hdr_t
}
typealias x86_float_state32_t = __darwin_i386_float_state
typealias x86_float_state64_t = __darwin_x86_float_state64
typealias x86_float_state_t = x86_float_state
struct x86_state_hdr {
  var flavor: Int32
  var count: Int32
}
typealias x86_state_hdr_t = x86_state_hdr
struct x86_thread_state {
  var tsh: x86_state_hdr_t
}
typealias x86_thread_state32_t = __darwin_i386_thread_state
typealias x86_thread_state64_t = __darwin_x86_thread_state64
typealias x86_thread_state_t = x86_thread_state
struct xsockbuf {
  var sb_cc: UInt32
  var sb_hiwat: UInt32
  var sb_mbcnt: UInt32
  var sb_mbmax: UInt32
  var sb_lowat: Int32
  var sb_flags: Int16
  var sb_timeo: Int16
}
struct xsocket {
  var xso_len: UInt32
  var xso_so: UInt32
  var so_type: Int16
  var so_options: Int16
  var so_linger: Int16
  var so_state: Int16
  var so_pcb: UInt32
  var xso_protocol: Int32
  var xso_family: Int32
  var so_qlen: Int16
  var so_incqlen: Int16
  var so_qlimit: Int16
  var so_timeo: Int16
  var so_error: u_short
  var so_pgid: pid_t
  var so_oobmark: UInt32
  var so_rcv: xsockbuf
  var so_snd: xsockbuf
  var so_uid: uid_t
}
struct xsocket64 {
  var xso_len: UInt32
  var xso_so: UInt64
  var so_type: Int16
  var so_options: Int16
  var so_linger: Int16
  var so_state: Int16
  var so_pcb: UInt64
  var xso_protocol: Int32
  var xso_family: Int32
  var so_qlen: Int16
  var so_incqlen: Int16
  var so_qlimit: Int16
  var so_timeo: Int16
  var so_error: u_short
  var so_pgid: pid_t
  var so_oobmark: UInt32
  var so_rcv: xsockbuf
  var so_snd: xsockbuf
  var so_uid: uid_t
}
struct xsw_usage {
  var xsu_total: UInt64
  var xsu_avail: UInt64
  var xsu_used: UInt64
  var xsu_pagesize: UInt32
  var xsu_encrypted: boolean_t
}
struct xucred {
  var cr_version: u_int
  var cr_uid: uid_t
  var cr_ngroups: Int16
  var cr_groups: (gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t, gid_t)
}
struct xunpgen {
  var xug_len: UInt32
  var xug_count: u_int
  var xug_gen: unp_gen_t
  var xug_sogen: so_gen_t
}
@availability(OSX, introduced=10.0) func y0(_: Double) -> Double
@availability(OSX, introduced=10.0) func y1(_: Double) -> Double
@availability(OSX, introduced=10.0) func yn(_: Int32, _: Double) -> Double
struct zone_info {
  var zi_count: integer_t
  var zi_cur_size: vm_size_t
  var zi_max_size: vm_size_t
  var zi_elem_size: vm_size_t
  var zi_alloc_size: vm_size_t
  var zi_pageable: integer_t
  var zi_sleepable: integer_t
  var zi_exhaustible: integer_t
  var zi_collectable: integer_t
}
typealias zone_info_array_t = UnsafeMutablePointer<zone_info_t>
typealias zone_info_t = zone_info
struct zone_name {
  var zn_name: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)
}
typealias zone_name_array_t = UnsafeMutablePointer<zone_name_t>
typealias zone_name_t = zone_name
func zopen(_: UnsafePointer<Int8>, _: UnsafePointer<Int8>, _: Int32) -> UnsafeMutablePointer<FILE>
var BSM_TEXTBUFSZ: Int32 {
  get {
    return
  }
}
var BUFSIZ: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_MISC: Int32 {
  get {
    return
  }
}
var BSDLY: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_DATA: Int32 {
  get {
    return
  }
}
var BUF_CLAIMED_DONE: Int32 {
  get {
    return
  }
}
var BUF_CLAIMED: Int32 {
  get {
    return
  }
}
var BS1: Int32 {
  get {
    return
  }
}
var BSD: Int32 {
  get {
    return
  }
}
var BS0: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_BACKINGSTORES: Int32 {
  get {
    return
  }
}
var BSD4_4: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREDATA_OBJECTIDS: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREDATA: Int32 {
  get {
    return
  }
}
var BSD4_3: Int32 {
  get {
    return
  }
}
var BLK_WRITE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_DYLD_MALLOC: Int32 {
  get {
    return
  }
}
var BLK_READ: Int32 {
  get {
    return
  }
}
var VM_MEMORY_DYLD: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREUIFILE: Int32 {
  get {
    return
  }
}
var BRKINT: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREUI: Int32 {
  get {
    return
  }
}
var BOOT_TIME: Int32 {
  get {
    return
  }
}
var VM_MEMORY_CORESERVICES: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREPROFILE: Int32 {
  get {
    return
  }
}
var BLKDEV_IOSIZE: Int32 {
  get {
    return
  }
}
var BLK_ONLYVALID: UInt32 {
  get {
    return
  }
}
var VM_MEMORY_COREIMAGE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_COREGRAPHICS_SHARED: Int32 {
  get {
    return
  }
}
var BLK_META: Int32 {
  get {
    return
  }
}
var VM_MEMORY_ACCELERATE: Int32 {
  get {
    return
  }
}
var BUS_OBJERR: Int32 {
  get {
    return
  }
}
var BUS_NOOP: Int32 {
  get {
    return
  }
}
var VM_MAXID: Int32 {
  get {
    return
  }
}
var BUF_WRITE_DATA: Int32 {
  get {
    return
  }
}
var BUF_WAIT: Int32 {
  get {
    return
  }
}
var VM_MAP_ENTRY_MAX: Int32 {
  get {
    return
  }
}
var BUS_ADRERR: Int32 {
  get {
    return
  }
}
var BUS_ADRALN: Int32 {
  get {
    return
  }
}
var BUF_SCAN_DIRTY: Int32 {
  get {
    return
  }
}
var VM_MEMORY_CGIMAGE: Int32 {
  get {
    return
  }
}
var BUF_SCAN_CLEAN: Int32 {
  get {
    return
  }
}
var VM_MEMORY_CARBON: Int32 {
  get {
    return
  }
}
var BUF_SKIP_NONLOCKED: Int32 {
  get {
    return
  }
}
var VM_MEMORY_ATS: Int32 {
  get {
    return
  }
}
var BUF_SKIP_META: Int32 {
  get {
    return
  }
}
var BUF_SKIP_LOCKED: Int32 {
  get {
    return
  }
}
var VM_MEMORY_ASSETSD: Int32 {
  get {
    return
  }
}
var BUF_NOTIFY_BUSY: Int32 {
  get {
    return
  }
}
var VM_MEMORY_APPLICATION_SPECIFIC_16: Int32 {
  get {
    return
  }
}
var BUF_INVALIDATE_LOCKED: Int32 {
  get {
    return
  }
}
var VM_MEMORY_APPLICATION_SPECIFIC_1: Int32 {
  get {
    return
  }
}
var VM_MEMORY_APPKIT: Int32 {
  get {
    return
  }
}
var BUF_RETURNED_DONE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_ANALYSIS_TOOL: Int32 {
  get {
    return
  }
}
var BUF_RETURNED: Int32 {
  get {
    return
  }
}
var B19200: Int32 {
  get {
    return
  }
}
var B200: Int32 {
  get {
    return
  }
}
var B230400: Int32 {
  get {
    return
  }
}
var B2400: Int32 {
  get {
    return
  }
}
var B28800: Int32 {
  get {
    return
  }
}
var B300: Int32 {
  get {
    return
  }
}
var B1200: Int32 {
  get {
    return
  }
}
var B134: Int32 {
  get {
    return
  }
}
var B14400: Int32 {
  get {
    return
  }
}
var B150: Int32 {
  get {
    return
  }
}
var B1800: Int32 {
  get {
    return
  }
}
var VM_LOADAVG: Int32 {
  get {
    return
  }
}
var VM_MACHFACTOR: Int32 {
  get {
    return
  }
}
var B0: Int32 {
  get {
    return
  }
}
var B110: Int32 {
  get {
    return
  }
}
var B115200: Int32 {
  get {
    return
  }
}
var A_SETSFLAGS: Int32 {
  get {
    return
  }
}
var A_SETSMASK: Int32 {
  get {
    return
  }
}
var A_SETSTAT: Int32 {
  get {
    return
  }
}
var A_SETUMASK: Int32 {
  get {
    return
  }
}
var BC_DIM_MAX: Int32 {
  get {
    return
  }
}
var VM_FLAGS_ALIAS_MASK: UInt32 {
  get {
    return
  }
}
var BC_SCALE_MAX: Int32 {
  get {
    return
  }
}
var VM_FLAGS_ANYWHERE: Int32 {
  get {
    return
  }
}
var BC_STRING_MAX: Int32 {
  get {
    return
  }
}
var BIG_ENDIAN: Int32 {
  get {
    return
  }
}
var BC_BASE_MAX: Int32 {
  get {
    return
  }
}
var B7200: Int32 {
  get {
    return
  }
}
var B76800: Int32 {
  get {
    return
  }
}
var B75: Int32 {
  get {
    return
  }
}
var VM_FLAGS_SUPERPAGE_SHIFT: Int32 {
  get {
    return
  }
}
var B9600: Int32 {
  get {
    return
  }
}
var VM_FLAGS_RETURN_DATA_ADDR: Int32 {
  get {
    return
  }
}
var BACKSPACE: Int32 {
  get {
    return
  }
}
var B38400: Int32 {
  get {
    return
  }
}
var VM_FLAGS_SUPERPAGE_MASK: Int32 {
  get {
    return
  }
}
var VM_FLAGS_OVERWRITE: Int32 {
  get {
    return
  }
}
var B4800: Int32 {
  get {
    return
  }
}
var VM_FLAGS_PURGABLE: Int32 {
  get {
    return
  }
}
var B57600: Int32 {
  get {
    return
  }
}
var B50: Int32 {
  get {
    return
  }
}
var VM_FLAGS_FIXED: Int32 {
  get {
    return
  }
}
var B600: Int32 {
  get {
    return
  }
}
var VM_FLAGS_NO_CACHE: Int32 {
  get {
    return
  }
}
var B_PARTITIONMASK: Int32 {
  get {
    return
  }
}
var B_PAGEIO: Int32 {
  get {
    return
  }
}
var VFS_NUMMNTOPS: Int32 {
  get {
    return
  }
}
var B_NOCACHE: Int32 {
  get {
    return
  }
}
var VLNEXT: Int32 {
  get {
    return
  }
}
var VKILL: Int32 {
  get {
    return
  }
}
var B_META: Int32 {
  get {
    return
  }
}
var VINTR: Int32 {
  get {
    return
  }
}
var B_MAGICMASK: UInt32 {
  get {
    return
  }
}
var VFS_CTL_UMOUNT: Int32 {
  get {
    return
  }
}
var B_LOCKED: Int32 {
  get {
    return
  }
}
var VFS_CTL_TIMEO: Int32 {
  get {
    return
  }
}
var B_FUA: Int32 {
  get {
    return
  }
}
var B_IOSTREAMING: Int32 {
  get {
    return
  }
}
var VFS_GENERIC: Int32 {
  get {
    return
  }
}
var B_ENCRYPTED_IO: Int32 {
  get {
    return
  }
}
var VFS_CTL_VERS1: Int32 {
  get {
    return
  }
}
var VFS_MAXTYPENUM: Int32 {
  get {
    return
  }
}
var B_DEVMAGIC: UInt32 {
  get {
    return
  }
}
var B_DELWRI: Int32 {
  get {
    return
  }
}
var B_CONTROLLERSHIFT: Int32 {
  get {
    return
  }
}
var B_CONTROLLERMASK: Int32 {
  get {
    return
  }
}
var VMIN: Int32 {
  get {
    return
  }
}
var B_CLUSTER: Int32 {
  get {
    return
  }
}
var B_ADAPTORSHIFT: Int32 {
  get {
    return
  }
}
var B_ASYNC: Int32 {
  get {
    return
  }
}
var B_ADAPTORMASK: Int32 {
  get {
    return
  }
}
var VEOF: Int32 {
  get {
    return
  }
}
var VDSUSP: Int32 {
  get {
    return
  }
}
var CALENDAR_CLOCK: Int32 {
  get {
    return
  }
}
var VERASE: Int32 {
  get {
    return
  }
}
var VEOL: Int32 {
  get {
    return
  }
}
var VEOL2: Int32 {
  get {
    return
  }
}
var B_WRITE: Int32 {
  get {
    return
  }
}
var B_UNITSHIFT: Int32 {
  get {
    return
  }
}
var UTMPX_DEAD_IF_CORRESPONDING_MASK: Int32 {
  get {
    return
  }
}
var UTMPX_FILE: String {
  get {
    return
  }
}
var B_UNITMASK: Int32 {
  get {
    return
  }
}
var VDISCARD: Int32 {
  get {
    return
  }
}
var B_TYPESHIFT: Int32 {
  get {
    return
  }
}
var B_TYPEMASK: Int32 {
  get {
    return
  }
}
var VFS_CTL_QUERY: Int32 {
  get {
    return
  }
}
var B_THROTTLED_IO: Int32 {
  get {
    return
  }
}
var VFS_CTL_STATFS: Int32 {
  get {
    return
  }
}
var B_STATICCONTENT: Int32 {
  get {
    return
  }
}
var B_READ: Int32 {
  get {
    return
  }
}
var VFS_CTL_SERVERINFO: Int32 {
  get {
    return
  }
}
var VFS_CTL_DISC: Int32 {
  get {
    return
  }
}
var VFS_CTL_SADDR: Int32 {
  get {
    return
  }
}
var B_RAW: Int32 {
  get {
    return
  }
}
var B_PHYS: Int32 {
  get {
    return
  }
}
var VFS_CONF: Int32 {
  get {
    return
  }
}
var B_PASSIVE: Int32 {
  get {
    return
  }
}
var VFS_CTL_NSTATUS: Int32 {
  get {
    return
  }
}
var VFS_CTL_NOLOCKS: Int32 {
  get {
    return
  }
}
var B_PARTITIONSHIFT: Int32 {
  get {
    return
  }
}
var VFS_CTL_NEWADDR: Int32 {
  get {
    return
  }
}
var USER_POSIX2_UPE: Int32 {
  get {
    return
  }
}
var USER_POSIX2_VERSION: Int32 {
  get {
    return
  }
}
var USER_PROCESS: Int32 {
  get {
    return
  }
}
var USER_RE_DUP_MAX: Int32 {
  get {
    return
  }
}
var USER_POSIX2_FORT_DEV: Int32 {
  get {
    return
  }
}
var USER_POSIX2_FORT_RUN: Int32 {
  get {
    return
  }
}
var USER_POSIX2_LOCALEDEF: Int32 {
  get {
    return
  }
}
var USER_POSIX2_SW_DEV: Int32 {
  get {
    return
  }
}
var UTMPX_AUTOFILL_MASK: Int32 {
  get {
    return
  }
}
var UTMPX_CHANGE_NOTIFICATION: String {
  get {
    return
  }
}
var USER_STREAM_MAX: Int32 {
  get {
    return
  }
}
var USER_TZNAME_MAX: Int32 {
  get {
    return
  }
}
var USRQUOTA: Int32 {
  get {
    return
  }
}
var USHRT_MAX: Int32 {
  get {
    return
  }
}
var BYTE_SIZE: Int32 {
  get {
    return
  }
}
var USER_BC_SCALE_MAX: Int32 {
  get {
    return
  }
}
var USER_BC_STRING_MAX: Int32 {
  get {
    return
  }
}
var USER_CODE_SELECTOR: Int32 {
  get {
    return
  }
}
var BYTE_ORDER: Int32 {
  get {
    return
  }
}
var USER_COLL_WEIGHTS_MAX: Int32 {
  get {
    return
  }
}
var USEC_PER_SEC: UInt64 {
  get {
    return
  }
}
var USER_BC_BASE_MAX: Int32 {
  get {
    return
  }
}
var USER_BC_DIM_MAX: Int32 {
  get {
    return
  }
}
var USER_MAXID: Int32 {
  get {
    return
  }
}
var USER_POSIX2_CHAR_TERM: Int32 {
  get {
    return
  }
}
var USER_POSIX2_C_BIND: Int32 {
  get {
    return
  }
}
var USER_POSIX2_C_DEV: Int32 {
  get {
    return
  }
}
var USER_CS_PATH: Int32 {
  get {
    return
  }
}
var USER_DATA_SELECTOR: Int32 {
  get {
    return
  }
}
var USER_EXPR_NEST_MAX: Int32 {
  get {
    return
  }
}
var USER_LINE_MAX: Int32 {
  get {
    return
  }
}
var AUT_XATOM: Int32 {
  get {
    return
  }
}
var ULLONG_MAX: UInt64 {
  get {
    return
  }
}
var AUT_UPRIV: Int32 {
  get {
    return
  }
}
var AUT_XCLIENT: Int32 {
  get {
    return
  }
}
var UINT_MAX: UInt32 {
  get {
    return
  }
}
var AUT_XATPATH: Int32 {
  get {
    return
  }
}
var UINT_LEAST8_MAX: Int32 {
  get {
    return
  }
}
var UINT_LEAST64_MAX: UInt64 {
  get {
    return
  }
}
var AUT_XFONT: Int32 {
  get {
    return
  }
}
var AUT_XCOLORMAP: Int32 {
  get {
    return
  }
}
var AUT_XCURSOR: Int32 {
  get {
    return
  }
}
var UL_GETFSIZE: Int32 {
  get {
    return
  }
}
var AUT_XOBJ: Int32 {
  get {
    return
  }
}
var ULONG_MAX: UInt {
  get {
    return
  }
}
var UL_SETFSIZE: Int32 {
  get {
    return
  }
}
var AUT_XGC: Int32 {
  get {
    return
  }
}
var AUT_SUBJECT32: Int32 {
  get {
    return
  }
}
var UNIVERSAL_INTERFACES_VERSION: Int32 {
  get {
    return
  }
}
var AUT_SUBJECT: Int32 {
  get {
    return
  }
}
var AUT_SUBJECT64: Int32 {
  get {
    return
  }
}
var AUT_SUBJECT32_EX: Int32 {
  get {
    return
  }
}
var UNDERFLOW: Int32 {
  get {
    return
  }
}
var UQUAD_MAX: UInt64 {
  get {
    return
  }
}
var AUT_TRAILER: Int32 {
  get {
    return
  }
}
var AUT_SUBJECT64_EX: Int32 {
  get {
    return
  }
}
var AUT_TEXT: Int32 {
  get {
    return
  }
}
var AUT_UNAUTH: Int32 {
  get {
    return
  }
}
var AUT_TRAILER_MAGIC: Int32 {
  get {
    return
  }
}
var AU_DEFAUDITSID: Int32 {
  get {
    return
  }
}
var UINT32_MAX: UInt32 {
  get {
    return
  }
}
var AU_EVENT_NAME_MAX: Int32 {
  get {
    return
  }
}
var UINT16_MAX: Int32 {
  get {
    return
  }
}
var UID_MAX: UInt32 {
  get {
    return
  }
}
var AU_EVENT_DESC_MAX: Int32 {
  get {
    return
  }
}
var AU_IPv6: Int32 {
  get {
    return
  }
}
var AU_IPv4: Int32 {
  get {
    return
  }
}
var AU_FS_MINFREE: Int32 {
  get {
    return
  }
}
var UINT8_MAX: Int32 {
  get {
    return
  }
}
var UINT64_MAX: UInt64 {
  get {
    return
  }
}
var AU_OFLAG_NONE: Int32 {
  get {
    return
  }
}
var AU_LINE_MAX: Int32 {
  get {
    return
  }
}
var UINT_FAST32_MAX: UInt32 {
  get {
    return
  }
}
var AUT_XPROPERTY: Int32 {
  get {
    return
  }
}
var UINT_FAST16_MAX: Int32 {
  get {
    return
  }
}
var AUT_XPIXMAP: Int32 {
  get {
    return
  }
}
var AUT_XWINDOW: Int32 {
  get {
    return
  }
}
var UINTPTR_MAX: UInt64 {
  get {
    return
  }
}
var AUT_XSELECT: Int32 {
  get {
    return
  }
}
var AUT_XPROTO: Int32 {
  get {
    return
  }
}
var UINTMAX_MAX: UInt64 {
  get {
    return
  }
}
var AU_ASSIGN_ASID: Int32 {
  get {
    return
  }
}
var UINT_LEAST32_MAX: UInt32 {
  get {
    return
  }
}
var AUT_ZONENAME: Int32 {
  get {
    return
  }
}
var UINT_LEAST16_MAX: Int32 {
  get {
    return
  }
}
var AU_CLASS_NAME_MAX: Int32 {
  get {
    return
  }
}
var UINT_FAST8_MAX: Int32 {
  get {
    return
  }
}
var AU_CLASS_DESC_MAX: Int32 {
  get {
    return
  }
}
var UINT_FAST64_MAX: UInt64 {
  get {
    return
  }
}
var AUT_IPC: Int32 {
  get {
    return
  }
}
var TYPE_BOOL: Int32 {
  get {
    return
  }
}
var AUT_IPC_PERM: Int32 {
  get {
    return
  }
}
var TYPE_EXTENDED: Int32 {
  get {
    return
  }
}
var AUT_IPORT: Int32 {
  get {
    return
  }
}
var AUT_LABEL: Int32 {
  get {
    return
  }
}
var TVERSLEN: Int32 {
  get {
    return
  }
}
var AUT_LIAISON: Int32 {
  get {
    return
  }
}
var T_FMT: Int32 {
  get {
    return
  }
}
var AUT_NEWGROUPS: Int32 {
  get {
    return
  }
}
var AUT_OHEADER: Int32 {
  get {
    return
  }
}
var AUT_OPAQUE: Int32 {
  get {
    return
  }
}
var TYPE_LONGDOUBLE_IS_DOUBLE: Int32 {
  get {
    return
  }
}
var T_FMT_AMPM: Int32 {
  get {
    return
  }
}
var AUT_OTHER_FILE: Int32 {
  get {
    return
  }
}
var TYPE_LONGLONG: Int32 {
  get {
    return
  }
}
var UF_HIDDEN: Int32 {
  get {
    return
  }
}
var AUT_HEADER32: Int32 {
  get {
    return
  }
}
var UF_COMPRESSED: Int32 {
  get {
    return
  }
}
var UF_IMMUTABLE: Int32 {
  get {
    return
  }
}
var AUT_HEADER32_EX: Int32 {
  get {
    return
  }
}
var AUT_HEADER64: Int32 {
  get {
    return
  }
}
var UCHAR_MAX: Int32 {
  get {
    return
  }
}
var AUT_HEADER64_EX: Int32 {
  get {
    return
  }
}
var UF_APPEND: Int32 {
  get {
    return
  }
}
var AUT_HOST: Int32 {
  get {
    return
  }
}
var UF_SETTABLE: Int32 {
  get {
    return
  }
}
var AUT_INVALID: Int32 {
  get {
    return
  }
}
var UF_TRACKED: Int32 {
  get {
    return
  }
}
var AUT_IN_ADDR: Int32 {
  get {
    return
  }
}
var UF_NODUMP: Int32 {
  get {
    return
  }
}
var AUT_IN_ADDR_EX: Int32 {
  get {
    return
  }
}
var UF_OPAQUE: Int32 {
  get {
    return
  }
}
var AUT_IP: Int32 {
  get {
    return
  }
}
var AUT_RETURN: Int32 {
  get {
    return
  }
}
var AUT_RETURN32: Int32 {
  get {
    return
  }
}
var TS_ZOMBIE: Int32 {
  get {
    return
  }
}
var AUT_RETURN64: Int32 {
  get {
    return
  }
}
var AUT_SOCKET: Int32 {
  get {
    return
  }
}
var TTCP_CLIENT_SND_WND: Int32 {
  get {
    return
  }
}
var AUT_SEQ: Int32 {
  get {
    return
  }
}
var AUT_SOCKET_EX: Int32 {
  get {
    return
  }
}
var TTYDISC: Int32 {
  get {
    return
  }
}
var AUT_SOCKINET128: Int32 {
  get {
    return
  }
}
var TTY_BI: Int32 {
  get {
    return
  }
}
var AUT_SOCKINET32: Int32 {
  get {
    return
  }
}
var AUT_SOCKUNIX: Int32 {
  get {
    return
  }
}
var TTYDEF_SPEED: Int32 {
  get {
    return
  }
}
var AUT_OTHER_FILE32: Int32 {
  get {
    return
  }
}
var TTY_PE: Int32 {
  get {
    return
  }
}
var TTY_OE: Int32 {
  get {
    return
  }
}
var AUT_OTHER_FILE64: Int32 {
  get {
    return
  }
}
var TTY_CHARMASK: Int32 {
  get {
    return
  }
}
var AUT_PATH: Int32 {
  get {
    return
  }
}
var AUT_PROCESS: Int32 {
  get {
    return
  }
}
var AUT_PRIV: Int32 {
  get {
    return
  }
}
var TTY_FE: Int32 {
  get {
    return
  }
}
var TTY_ERRORMASK: UInt32 {
  get {
    return
  }
}
var AUT_PROCESS32: Int32 {
  get {
    return
  }
}
var TUWRITE: Int32 {
  get {
    return
  }
}
var TVERSION: String {
  get {
    return
  }
}
var AUT_PROCESS32_EX: Int32 {
  get {
    return
  }
}
var AUT_PROCESS64: Int32 {
  get {
    return
  }
}
var TTY_QUOTE: Int32 {
  get {
    return
  }
}
var TUEXEC: Int32 {
  get {
    return
  }
}
var AUT_PROCESS64_EX: Int32 {
  get {
    return
  }
}
var TUREAD: Int32 {
  get {
    return
  }
}
var TS_CNTTB: Int32 {
  get {
    return
  }
}
var A_GETSINFO_ADDR: Int32 {
  get {
    return
  }
}
var TS_CAR_OFLOW: Int32 {
  get {
    return
  }
}
var A_GETSFLAGS: Int32 {
  get {
    return
  }
}
var A_GETPOLICY: Int32 {
  get {
    return
  }
}
var A_GETQCTRL: Int32 {
  get {
    return
  }
}
var TS_ERASE: Int32 {
  get {
    return
  }
}
var TS_CONNECTED: Int32 {
  get {
    return
  }
}
var A_GETPINFO_ADDR: Int32 {
  get {
    return
  }
}
var TS_IOCTL_NOT_OK: Int32 {
  get {
    return
  }
}
var TS_FLUSH: Int32 {
  get {
    return
  }
}
var TS_LNCH: Int32 {
  get {
    return
  }
}
var TS_ISOPEN: Int32 {
  get {
    return
  }
}
var A_GETSTAT: Int32 {
  get {
    return
  }
}
var TS_SNOOP: Int32 {
  get {
    return
  }
}
var A_GETCWD: Int32 {
  get {
    return
  }
}
var A_GETCLASS: Int32 {
  get {
    return
  }
}
var TS_PGRPHUP: Int32 {
  get {
    return
  }
}
var A_GETCOND: Int32 {
  get {
    return
  }
}
var A_GETCAR: Int32 {
  get {
    return
  }
}
var TS_SO_OLOWAT: Int32 {
  get {
    return
  }
}
var TS_SO_OCOMPLETE: Int32 {
  get {
    return
  }
}
var TS_TTSTOP: Int32 {
  get {
    return
  }
}
var A_GETPINFO: Int32 {
  get {
    return
  }
}
var TS_TIMEOUT: Int32 {
  get {
    return
  }
}
var A_GETKMASK: Int32 {
  get {
    return
  }
}
var TS_TBLOCK: Int32 {
  get {
    return
  }
}
var TS_XCLUDE: Int32 {
  get {
    return
  }
}
var A_GETKAUDIT: Int32 {
  get {
    return
  }
}
var TS_TYPEN: Int32 {
  get {
    return
  }
}
var A_GETFSIZE: Int32 {
  get {
    return
  }
}
var A_SETKAUDIT: Int32 {
  get {
    return
  }
}
var TSI_S_LISTEN: Int32 {
  get {
    return
  }
}
var A_SETFSIZE: Int32 {
  get {
    return
  }
}
var TSI_S_LAST_ACK: Int32 {
  get {
    return
  }
}
var A_SETCOND: Int32 {
  get {
    return
  }
}
var TSI_S_SYN_RECEIVED: Int32 {
  get {
    return
  }
}
var A_SETCLASS: Int32 {
  get {
    return
  }
}
var TSI_S_RESERVED: Int32 {
  get {
    return
  }
}
var A_SENDTRIGGER: Int32 {
  get {
    return
  }
}
var TSI_S_SYN_SENT: Int32 {
  get {
    return
  }
}
var A_SETQCTRL: Int32 {
  get {
    return
  }
}
var TSI_S__CLOSE_WAIT: Int32 {
  get {
    return
  }
}
var A_SETPOLICY: Int32 {
  get {
    return
  }
}
var TSI_S_TIME_WAIT: Int32 {
  get {
    return
  }
}
var A_SETPMASK: Int32 {
  get {
    return
  }
}
var TSI_T_KEEP: Int32 {
  get {
    return
  }
}
var A_SETKMASK: Int32 {
  get {
    return
  }
}
var TSI_T_2MSL: Int32 {
  get {
    return
  }
}
var TSI_T_PERSIST: Int32 {
  get {
    return
  }
}
var A_OLDSETCOND: Int32 {
  get {
    return
  }
}
var TSI_T_NTIMERS: Int32 {
  get {
    return
  }
}
var A_OLDGETQCTRL: Int32 {
  get {
    return
  }
}
var A_OLDGETPOLICY: Int32 {
  get {
    return
  }
}
var A_OLDGETCOND: Int32 {
  get {
    return
  }
}
var TSI_T_REXMT: Int32 {
  get {
    return
  }
}
var TSUID: Int32 {
  get {
    return
  }
}
var TS_BKSL: Int32 {
  get {
    return
  }
}
var TSVTX: Int32 {
  get {
    return
  }
}
var TS_ASYNC: Int32 {
  get {
    return
  }
}
var TS_CAN_BYPASS_L_RINT: Int32 {
  get {
    return
  }
}
var TS_CARR_ON: Int32 {
  get {
    return
  }
}
var A_OLDSETQCTRL: Int32 {
  get {
    return
  }
}
var A_OLDSETPOLICY: Int32 {
  get {
    return
  }
}
var TS_BUSY: Int32 {
  get {
    return
  }
}
var TR_RECLAIM: Int32 {
  get {
    return
  }
}
var TR_STAMP: Int32 {
  get {
    return
  }
}
var AU_USER_NAME_MAX: Int32 {
  get {
    return
  }
}
var TR_SWAPIN: Int32 {
  get {
    return
  }
}
var AU_TO_NO_WRITE: Int32 {
  get {
    return
  }
}
var TR_SWAPIO: Int32 {
  get {
    return
  }
}
var TR_VADVISE: Int32 {
  get {
    return
  }
}
var AU_TO_WRITE: Int32 {
  get {
    return
  }
}
var TR_VRFOD: Int32 {
  get {
    return
  }
}
var TR_WAITMEM: Int32 {
  get {
    return
  }
}
var TR_XFODHIT: Int32 {
  get {
    return
  }
}
var TR_XFODMISS: Int32 {
  get {
    return
  }
}
var AU_OFLAG_SHORT: Int32 {
  get {
    return
  }
}
var TR_XIFREC: Int32 {
  get {
    return
  }
}
var AU_OFLAG_XML: Int32 {
  get {
    return
  }
}
var TR_ZFOD: Int32 {
  get {
    return
  }
}
var TR_XSFREC: Int32 {
  get {
    return
  }
}
var AU_OFLAG_NORESOLVE: Int32 {
  get {
    return
  }
}
var TSGID: Int32 {
  get {
    return
  }
}
var AU_OFLAG_RAW: Int32 {
  get {
    return
  }
}
var TSI_S_CLOSED: Int32 {
  get {
    return
  }
}
var AU_PRS_SUCCESS: Int32 {
  get {
    return
  }
}
var TSI_S_CLOSING: Int32 {
  get {
    return
  }
}
var AU_PRS_USECACHE: Int32 {
  get {
    return
  }
}
var TSI_S_ESTABLISHED: Int32 {
  get {
    return
  }
}
var TSI_S_FIN_WAIT_1: Int32 {
  get {
    return
  }
}
var AU_PRS_FAILURE: Int32 {
  get {
    return
  }
}
var AU_PRS_REREAD: Int32 {
  get {
    return
  }
}
var TSI_S_FIN_WAIT_2: Int32 {
  get {
    return
  }
}
var TRY_AGAIN: Int32 {
  get {
    return
  }
}
var TR_BREADHIT: Int32 {
  get {
    return
  }
}
var TR_BREADHITRA: Int32 {
  get {
    return
  }
}
var TR_BREADMISS: Int32 {
  get {
    return
  }
}
var TR_BREADMISSRA: Int32 {
  get {
    return
  }
}
var TR_BREALLOC: Int32 {
  get {
    return
  }
}
var TR_BRELSE: Int32 {
  get {
    return
  }
}
var TR_BWRITE: Int32 {
  get {
    return
  }
}
var TR_CACHEFOD: Int32 {
  get {
    return
  }
}
var TR_EINTRANS: Int32 {
  get {
    return
  }
}
var TR_EWAITMEM: Int32 {
  get {
    return
  }
}
var TR_EXFOD: Int32 {
  get {
    return
  }
}
var TR_FRECLAIM: Int32 {
  get {
    return
  }
}
var TR_INTRANS: Int32 {
  get {
    return
  }
}
var TR_MALL: Int32 {
  get {
    return
  }
}
var TR_NFLAGS: Int32 {
  get {
    return
  }
}
var TR_PGINDONE: Int32 {
  get {
    return
  }
}
var NDR_INT_BIG_ENDIAN: Int32 {
  get {
    return
  }
}
var WRDE_NOSYS: Int32 {
  get {
    return
  }
}
var NDR_FLOAT_VAX: Int32 {
  get {
    return
  }
}
var WRDE_NOSPACE: Int32 {
  get {
    return
  }
}
var NDR_PROTOCOL_2_0: Int32 {
  get {
    return
  }
}
var WRDE_NOCMD: Int32 {
  get {
    return
  }
}
var NDR_INT_LITTLE_ENDIAN: Int32 {
  get {
    return
  }
}
var WRDE_DOOFFS: Int32 {
  get {
    return
  }
}
var WRDE_CMDSUB: Int32 {
  get {
    return
  }
}
var NDR_FLOAT_CRAY: Int32 {
  get {
    return
  }
}
var WRDE_BADVAL: Int32 {
  get {
    return
  }
}
var NDR_CHAR_EBCDIC: Int32 {
  get {
    return
  }
}
var WRDE_BADCHAR: Int32 {
  get {
    return
  }
}
var NDR_FLOAT_IEEE: Int32 {
  get {
    return
  }
}
var WRDE_APPEND: Int32 {
  get {
    return
  }
}
var NDR_FLOAT_IBM: Int32 {
  get {
    return
  }
}
var WQ_EXCEEDED_TOTAL_THREAD_LIMIT: Int32 {
  get {
    return
  }
}
var NET_RT_IFLIST: Int32 {
  get {
    return
  }
}
var WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT: Int32 {
  get {
    return
  }
}
var NET_RT_FLAGS: Int32 {
  get {
    return
  }
}
var NET_RT_MAXID: Int32 {
  get {
    return
  }
}
var NET_RT_STAT: Int32 {
  get {
    return
  }
}
var WNOWAIT: Int32 {
  get {
    return
  }
}
var WORD_BIT: Int32 {
  get {
    return
  }
}
var NET_RT_IFLIST2: Int32 {
  get {
    return
  }
}
var WNOHANG: Int32 {
  get {
    return
  }
}
var WMESGLEN: Int32 {
  get {
    return
  }
}
var NET_MAXID: Int32 {
  get {
    return
  }
}
var NETDB_INTERNAL: Int32 {
  get {
    return
  }
}
var NETDB_SUCCESS: Int32 {
  get {
    return
  }
}
var WINT_MAX: Int32 {
  get {
    return
  }
}
var NET_RT_DUMP2: Int32 {
  get {
    return
  }
}
var NET_RT_DUMP: Int32 {
  get {
    return
  }
}
var NFSV3_MAX_FH_SIZE: Int32 {
  get {
    return
  }
}
var NFSV2_MAX_FH_SIZE: Int32 {
  get {
    return
  }
}
var NGROUPS: Int32 {
  get {
    return
  }
}
var NFS_MAX_FH_SIZE: Int32 {
  get {
    return
  }
}
var NFSV4_MAX_FH_SIZE: Int32 {
  get {
    return
  }
}
var WEXITED: Int32 {
  get {
    return
  }
}
var NEWLINE: Int32 {
  get {
    return
  }
}
var NET_RT_TRASH: Int32 {
  get {
    return
  }
}
var WCOREFLAG: Int32 {
  get {
    return
  }
}
var WCONTINUED: Int32 {
  get {
    return
  }
}
var NEW_TIME: Int32 {
  get {
    return
  }
}
var NI_NOFQDN: Int32 {
  get {
    return
  }
}
var NI_NAMEREQD: Int32 {
  get {
    return
  }
}
var WCHAR_MAX: Int32 {
  get {
    return
  }
}
var NI_MAXSERV: Int32 {
  get {
    return
  }
}
var NI_NUMERICSERV: Int32 {
  get {
    return
  }
}
var NI_NUMERICHOST: Int32 {
  get {
    return
  }
}
var NGROUPS_MAX: Int32 {
  get {
    return
  }
}
var NI_MAXHOST: Int32 {
  get {
    return
  }
}
var NI_DGRAM: Int32 {
  get {
    return
  }
}
var WAKEMON_MAKE_FATAL: Int32 {
  get {
    return
  }
}
var WAKEMON_SET_DEFAULTS: Int32 {
  get {
    return
  }
}
var WAKEMON_ENABLE: Int32 {
  get {
    return
  }
}
var WAKEMON_GET_PARAMS: Int32 {
  get {
    return
  }
}
var WAIT_MYPGRP: Int32 {
  get {
    return
  }
}
var WAKEMON_DISABLE: Int32 {
  get {
    return
  }
}
var VWERASE: Int32 {
  get {
    return
  }
}
var VTR_VALUE: Int32 {
  get {
    return
  }
}
var WAIT_ANY: Int32 {
  get {
    return
  }
}
var VTR_STAMP: Int32 {
  get {
    return
  }
}
var VTR_UALARM: Int32 {
  get {
    return
  }
}
var VTR_DISABLE: Int32 {
  get {
    return
  }
}
var VTR_ENABLE: Int32 {
  get {
    return
  }
}
var VTDLY: Int32 {
  get {
    return
  }
}
var VTIME: Int32 {
  get {
    return
  }
}
var VT0: Int32 {
  get {
    return
  }
}
var VT1: Int32 {
  get {
    return
  }
}
var VTAB: Int32 {
  get {
    return
  }
}
var VSTOP: Int32 {
  get {
    return
  }
}
var VSUSP: Int32 {
  get {
    return
  }
}
var NDFILE: Int32 {
  get {
    return
  }
}
var NDEXTENT: Int32 {
  get {
    return
  }
}
var NDR_CHAR_ASCII: Int32 {
  get {
    return
  }
}
var VSTART: Int32 {
  get {
    return
  }
}
var VSTATUS: Int32 {
  get {
    return
  }
}
var VQ_VERYLOWDISK: Int32 {
  get {
    return
  }
}
var VREPRINT: Int32 {
  get {
    return
  }
}
var VQ_UNMOUNT: Int32 {
  get {
    return
  }
}
var VQ_UPDATE: Int32 {
  get {
    return
  }
}
var AUP_HEX: Int32 {
  get {
    return
  }
}
var VQ_NOTRESP: Int32 {
  get {
    return
  }
}
var AUP_OCTAL: Int32 {
  get {
    return
  }
}
var AUP_DECIMAL: Int32 {
  get {
    return
  }
}
var VQ_NEEDAUTH: Int32 {
  get {
    return
  }
}
var VQ_SYNCEVENT: Int32 {
  get {
    return
  }
}
var AUP_BINARY: Int32 {
  get {
    return
  }
}
var VQ_SERVEREVENT: Int32 {
  get {
    return
  }
}
var AUDIT_ZONENAME: Int32 {
  get {
    return
  }
}
var VQ_NOTRESPLOCK: Int32 {
  get {
    return
  }
}
var VQ_FLAG8000: Int32 {
  get {
    return
  }
}
var AUDIT_WINDATA: Int32 {
  get {
    return
  }
}
var VQ_FLAG4000: Int32 {
  get {
    return
  }
}
var AUDIT_USER_FILE: String {
  get {
    return
  }
}
var AUDIT_TRIGGER_ROTATE_USER: Int32 {
  get {
    return
  }
}
var VQ_MOUNT: Int32 {
  get {
    return
  }
}
var VQ_FLAG2000: Int32 {
  get {
    return
  }
}
var AUDIT_USER: Int32 {
  get {
    return
  }
}
var VQ_LOWDISK: Int32 {
  get {
    return
  }
}
var VQ_ASSIST: Int32 {
  get {
    return
  }
}
var AUR_INT64: Int32 {
  get {
    return
  }
}
var VQUIT: Int32 {
  get {
    return
  }
}
var AUR_INT: Int32 {
  get {
    return
  }
}
var AUR_INT32: Int32 {
  get {
    return
  }
}
var VQ_FLAG1000: Int32 {
  get {
    return
  }
}
var VQ_DEAD: Int32 {
  get {
    return
  }
}
var AUR_CHAR: Int32 {
  get {
    return
  }
}
var VOUCHER_MACH_MSG_API_VERSION: Int32 {
  get {
    return
  }
}
var VPRINTPLOT: Int32 {
  get {
    return
  }
}
var VPRINT: Int32 {
  get {
    return
  }
}
var AUR_BYTE: Int32 {
  get {
    return
  }
}
var AUP_STRING: Int32 {
  get {
    return
  }
}
var VPLOT: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_SEARCHFS: Int32 {
  get {
    return
  }
}
var AUT_ARG64: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_READDIRATTR: Int32 {
  get {
    return
  }
}
var AUT_ARG32: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_VOL_RENAME: Int32 {
  get {
    return
  }
}
var AUT_ARG: Int32 {
  get {
    return
  }
}
var AUT_ACL: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_USERACCESS: Int32 {
  get {
    return
  }
}
var AUT_ACE: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_MANLOCK: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_FLOCK: Int32 {
  get {
    return
  }
}
var AUR_SHORT: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_NFSEXPORT: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_NAMEDSTREAMS: Int32 {
  get {
    return
  }
}
var AUT_HEADER: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_EXTENDED_ATTR: Int32 {
  get {
    return
  }
}
var AUT_GROUPS: Int32 {
  get {
    return
  }
}
var AUT_EXIT: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_EXCHANGEDATA: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_EXTENDED_SECURITY: Int32 {
  get {
    return
  }
}
var AUT_EXEC_ENV: Int32 {
  get {
    return
  }
}
var AUT_EXEC_ARGS: Int32 {
  get {
    return
  }
}
var AUT_DATA: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_ALLOCATE: Int32 {
  get {
    return
  }
}
var AUT_CMD: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_ADVLOCK: Int32 {
  get {
    return
  }
}
var AUT_ATTR64: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_COPYFILE: Int32 {
  get {
    return
  }
}
var AUT_ATTR32: Int32 {
  get {
    return
  }
}
var VOL_CAP_INT_ATTRLIST: Int32 {
  get {
    return
  }
}
var AUT_ATTR: Int32 {
  get {
    return
  }
}
var NL_CAT_LOCALE: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_PERSISTENTOBJECTIDS: Int32 {
  get {
    return
  }
}
var NL_LANGMAX: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_SPARSE_FILES: Int32 {
  get {
    return
  }
}
var NL_MSGMAX: Int32 {
  get {
    return
  }
}
var NLDLY: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_SYMBOLICLINKS: Int32 {
  get {
    return
  }
}
var NL_ARGMAX: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_ZERO_RUNS: Int32 {
  get {
    return
  }
}
var NL1: Int32 {
  get {
    return
  }
}
var NL2: Int32 {
  get {
    return
  }
}
var NL3: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_NO_VOLUME_SIZES: Int32 {
  get {
    return
  }
}
var NI_WITHSCOPEID: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_OPENDENYMODES: Int32 {
  get {
    return
  }
}
var NL0: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_PATH_FROM_ID: Int32 {
  get {
    return
  }
}
var NOEXPR: Int32 {
  get {
    return
  }
}
var NOFILE: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_HIDDEN_FILES: Int32 {
  get {
    return
  }
}
var NOFLSH: UInt32 {
  get {
    return
  }
}
var VOL_CAP_FMT_JOURNAL: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_NO_ROOT_TIMES: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_JOURNAL_ACTIVE: Int32 {
  get {
    return
  }
}
var NL_SETMAX: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_CASE_SENSITIVE: Int32 {
  get {
    return
  }
}
var NL_TEXTMAX: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_DECMPFS_COMPRESSION: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_FAST_STATFS: Int32 {
  get {
    return
  }
}
var NL_NMAX: Int32 {
  get {
    return
  }
}
var NL_SETD: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_HARDLINKS: Int32 {
  get {
    return
  }
}
var NOTE_CRITICAL: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_2TB_FILESIZE: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_64BIT_OBJECT_IDS: Int32 {
  get {
    return
  }
}
var NOTE_DELETE: Int32 {
  get {
    return
  }
}
var NOTE_BACKGROUND: Int32 {
  get {
    return
  }
}
var VOL_CAP_FMT_CASE_PRESERVING: Int32 {
  get {
    return
  }
}
var NOTE_CHILD: Int32 {
  get {
    return
  }
}
var NOTE_ABSOLUTE: Int32 {
  get {
    return
  }
}
var NOSTR: Int32 {
  get {
    return
  }
}
var VOL_CAPABILITIES_FORMAT: Int32 {
  get {
    return
  }
}
var NOTE_ATTRIB: Int32 {
  get {
    return
  }
}
var VOL_CAPABILITIES_INTERFACES: Int32 {
  get {
    return
  }
}
var VOL_CAPABILITIES_RESERVED1: Int32 {
  get {
    return
  }
}
var NOGROUP: Int32 {
  get {
    return
  }
}
var NOKERNINFO: Int32 {
  get {
    return
  }
}
var NOTE_EXIT_MEMORY: Int32 {
  get {
    return
  }
}
var VOL_CAPABILITIES_RESERVED2: Int32 {
  get {
    return
  }
}
var NOTE_EXIT_DETAIL: Int32 {
  get {
    return
  }
}
var NOTE_EXIT_DETAIL_MASK: Int32 {
  get {
    return
  }
}
var VM_VOLATILE_ORDER_SHIFT: Int32 {
  get {
    return
  }
}
var NOTE_EXIT_CSERROR: Int32 {
  get {
    return
  }
}
var NOTE_EXIT_DECRYPTFAIL: Int32 {
  get {
    return
  }
}
var NOTE_EXEC: Int32 {
  get {
    return
  }
}
var NOTE_EXITSTATUS: Int32 {
  get {
    return
  }
}
var VM_VOLATILE_GROUP_SHIFT: Int32 {
  get {
    return
  }
}
var NOTE_EXIT: UInt32 {
  get {
    return
  }
}
var MNT_CPROTECT: Int32 {
  get {
    return
  }
}
var MNT_DEFWRITE: Int32 {
  get {
    return
  }
}
var DEBUG_ASSERT_COMPONENT_NAME_STRING: String {
  get {
    return
  }
}
var MNT_DOVOLFS: Int32 {
  get {
    return
  }
}
var DEAD_PROCESS: Int32 {
  get {
    return
  }
}
var DBM_SUFFIX: String {
  get {
    return
  }
}
var MNT_DONTBROWSE: Int32 {
  get {
    return
  }
}
var MNT_EXPORTED: Int32 {
  get {
    return
  }
}
var DBM_REPLACE: Int32 {
  get {
    return
  }
}
var DBM_RDONLY: Int32 {
  get {
    return
  }
}
var MNT_DWAIT: Int32 {
  get {
    return
  }
}
var DBM_INSERT: Int32 {
  get {
    return
  }
}
var MNT_IGNORE_OWNERSHIP: Int32 {
  get {
    return
  }
}
var DBL_TRUE_MIN: Double {
  get {
    return
  }
}
var MNT_FORCE: Int32 {
  get {
    return
  }
}
var DBL_MIN_EXP: Int32 {
  get {
    return
  }
}
var MNT_LOCAL: Int32 {
  get {
    return
  }
}
var MNT_MULTILABEL: Int32 {
  get {
    return
  }
}
var DBL_MIN_10_EXP: Int32 {
  get {
    return
  }
}
var DBL_MIN: Double {
  get {
    return
  }
}
var MNT_JOURNALED: Int32 {
  get {
    return
  }
}
var DBL_MAX_EXP: Int32 {
  get {
    return
  }
}
var MNT_NOBLOCK: Int32 {
  get {
    return
  }
}
var MNT_NOATIME: Int32 {
  get {
    return
  }
}
var DBL_MAX_10_EXP: Int32 {
  get {
    return
  }
}
var DBL_MAX: Double {
  get {
    return
  }
}
var MNT_NOEXEC: Int32 {
  get {
    return
  }
}
var DBL_MANT_DIG: Int32 {
  get {
    return
  }
}
var MNT_NODEV: Int32 {
  get {
    return
  }
}
var DBL_EPSILON: Double {
  get {
    return
  }
}
var DBL_DIG: Int32 {
  get {
    return
  }
}
var MNT_NOSUID: Int32 {
  get {
    return
  }
}
var DAY_7: Int32 {
  get {
    return
  }
}
var MNT_QUOTA: Int32 {
  get {
    return
  }
}
var DAY_6: Int32 {
  get {
    return
  }
}
var DAY_4: Int32 {
  get {
    return
  }
}
var DAY_5: Int32 {
  get {
    return
  }
}
var MNT_NOWAIT: Int32 {
  get {
    return
  }
}
var DAY_3: Int32 {
  get {
    return
  }
}
var MNT_RELOAD: Int32 {
  get {
    return
  }
}
var MNT_QUARANTINE: Int32 {
  get {
    return
  }
}
var MNT_RDONLY: Int32 {
  get {
    return
  }
}
var MNT_NOUSERXATTR: Int32 {
  get {
    return
  }
}
var DAY_2: Int32 {
  get {
    return
  }
}
var C_IXUSR: Int32 {
  get {
    return
  }
}
var DAY_1: Int32 {
  get {
    return
  }
}
var MNT_SYNCHRONOUS: Int32 {
  get {
    return
  }
}
var C_IXOTH: Int32 {
  get {
    return
  }
}
var VM_REGION_TOP_INFO: Int32 {
  get {
    return
  }
}
var MNT_ROOTFS: Int32 {
  get {
    return
  }
}
var MNT_UNKNOWNPERMISSIONS: Int32 {
  get {
    return
  }
}
var C_IXGRP: Int32 {
  get {
    return
  }
}
var C_IWOTH: Int32 {
  get {
    return
  }
}
var C_IWUSR: Int32 {
  get {
    return
  }
}
var MNT_UNION: Int32 {
  get {
    return
  }
}
var MNT_WAIT: Int32 {
  get {
    return
  }
}
var C_IWGRP: Int32 {
  get {
    return
  }
}
var C_ISVTX: Int32 {
  get {
    return
  }
}
var MNT_UPDATE: Int32 {
  get {
    return
  }
}
var C_ISSOCK: Int32 {
  get {
    return
  }
}
var MON_10: Int32 {
  get {
    return
  }
}
var C_ISUID: Int32 {
  get {
    return
  }
}
var C_ISREG: Int32 {
  get {
    return
  }
}
var MON_1: Int32 {
  get {
    return
  }
}
var VM_REGION_INFO_MAX: Int32 {
  get {
    return
  }
}
var C_ISLNK: Int32 {
  get {
    return
  }
}
var MON_2: Int32 {
  get {
    return
  }
}
var MON_12: Int32 {
  get {
    return
  }
}
var C_ISGID: Int32 {
  get {
    return
  }
}
var MON_11: Int32 {
  get {
    return
  }
}
var C_ISDIR: Int32 {
  get {
    return
  }
}
var MON_5: Int32 {
  get {
    return
  }
}
var C_ISFIFO: Int32 {
  get {
    return
  }
}
var MON_4: Int32 {
  get {
    return
  }
}
var C_ISCTG: Int32 {
  get {
    return
  }
}
var MON_3: Int32 {
  get {
    return
  }
}
var C_ISBLK: Int32 {
  get {
    return
  }
}
var MINCORE_MODIFIED: Int32 {
  get {
    return
  }
}
var C_IRUSR: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_VOLATILE: Int32 {
  get {
    return
  }
}
var C_ISCHR: Int32 {
  get {
    return
  }
}
var MINCORE_MODIFIED_OTHER: Int32 {
  get {
    return
  }
}
var VM_REGION_BASIC_INFO: Int32 {
  get {
    return
  }
}
var VM_SWAPUSAGE: Int32 {
  get {
    return
  }
}
var C_IRGRP: Int32 {
  get {
    return
  }
}
var MINCORE_REFERENCED: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_STATE_MAX: Int32 {
  get {
    return
  }
}
var C_IROTH: Int32 {
  get {
    return
  }
}
var MINCORE_REFERENCED_OTHER: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_STATE_MIN: Int32 {
  get {
    return
  }
}
var MINFREE_CONTROL_ENTRY: String {
  get {
    return
  }
}
var MINSIGSTKSZ: Int32 {
  get {
    return
  }
}
var VM_REGION_EXTENDED_INFO: Int32 {
  get {
    return
  }
}
var VM_REGION_BASIC_INFO_64: Int32 {
  get {
    return
  }
}
var MIXEDMODE_CALLS_ARE_FUNCTIONS: Int32 {
  get {
    return
  }
}
var CTL_VFS: Int32 {
  get {
    return
  }
}
var MM_APPL: Int32 {
  get {
    return
  }
}
var MM_CONSOLE: Int32 {
  get {
    return
  }
}
var CTL_VM: Int32 {
  get {
    return
  }
}
var CTL_USER: Int32 {
  get {
    return
  }
}
var MM_ERROR: Int32 {
  get {
    return
  }
}
var MM_FIRM: Int32 {
  get {
    return
  }
}
var MM_HALT: Int32 {
  get {
    return
  }
}
var CTL_NET: Int32 {
  get {
    return
  }
}
var MM_HARD: Int32 {
  get {
    return
  }
}
var CTL_UNSPEC: Int32 {
  get {
    return
  }
}
var MM_INFO: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_STATE_MASK: Int32 {
  get {
    return
  }
}
var MM_NOCON: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_ORDERING_SHIFT: Int32 {
  get {
    return
  }
}
var CTL_MAXID: Int32 {
  get {
    return
  }
}
var MM_NOMSG: Int32 {
  get {
    return
  }
}
var CTL_MAXNAME: Int32 {
  get {
    return
  }
}
var MM_NOSEV: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_EMPTY: Int32 {
  get {
    return
  }
}
var MM_NOTOK: Int32 {
  get {
    return
  }
}
var CTL_MACHDEP: Int32 {
  get {
    return
  }
}
var MM_NRECOV: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_DEBUG_SHIFT: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_DENY: Int32 {
  get {
    return
  }
}
var CTL_KERN: Int32 {
  get {
    return
  }
}
var CTL_DEBUG_VALUE: Int32 {
  get {
    return
  }
}
var MM_NULLMC: Int {
  get {
    return
  }
}
var CTL_HW: Int32 {
  get {
    return
  }
}
var MM_NULLSEV: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_NONVOLATILE: Int32 {
  get {
    return
  }
}
var CTL_DEBUG_MAXID: Int32 {
  get {
    return
  }
}
var CTL_DEBUG_NAME: Int32 {
  get {
    return
  }
}
var MM_OK: Int32 {
  get {
    return
  }
}
var MM_OPSYS: Int32 {
  get {
    return
  }
}
var CTLTYPE_STRUCT: Int32 {
  get {
    return
  }
}
var CTL_DEBUG: Int32 {
  get {
    return
  }
}
var MM_PRINT: Int32 {
  get {
    return
  }
}
var CTLTYPE_OPAQUE: Int32 {
  get {
    return
  }
}
var MM_RECOVER: Int32 {
  get {
    return
  }
}
var CTLTYPE_QUAD: Int32 {
  get {
    return
  }
}
var MM_UTIL: Int32 {
  get {
    return
  }
}
var CTLTYPE_STRING: Int32 {
  get {
    return
  }
}
var MM_SOFT: Int32 {
  get {
    return
  }
}
var CTLTYPE_INT: Int32 {
  get {
    return
  }
}
var MM_WARNING: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_NO_AGING_SHIFT: Int32 {
  get {
    return
  }
}
var CTLTYPE_NODE: Int32 {
  get {
    return
  }
}
var MNAMELEN: Int32 {
  get {
    return
  }
}
var VM_PURGABLE_BEHAVIOR_SHIFT: Int32 {
  get {
    return
  }
}
var MNT_ASYNC: Int32 {
  get {
    return
  }
}
var CTLTYPE: Int32 {
  get {
    return
  }
}
var MNT_AUTOMOUNTED: Int32 {
  get {
    return
  }
}
var MT_FTABLE: Int32 {
  get {
    return
  }
}
var MT_FREE: Int32 {
  get {
    return
  }
}
var CTLFLAG_RD: UInt32 {
  get {
    return
  }
}
var MT_DATA: Int32 {
  get {
    return
  }
}
var CTLFLAG_WR: Int32 {
  get {
    return
  }
}
var CTLFLAG_SECURE: Int32 {
  get {
    return
  }
}
var CTLFLAG_NOAUTO: Int32 {
  get {
    return
  }
}
var MT_OOBDATA: Int32 {
  get {
    return
  }
}
var MT_CONTROL: Int32 {
  get {
    return
  }
}
var CTLFLAG_MASKED: Int32 {
  get {
    return
  }
}
var MT_MAX: Int32 {
  get {
    return
  }
}
var CTLFLAG_LOCKED: Int32 {
  get {
    return
  }
}
var VM_PROT_SLIDE: Int32 {
  get {
    return
  }
}
var CTLFLAG_OID2: Int32 {
  get {
    return
  }
}
var MT_IFADDR: Int32 {
  get {
    return
  }
}
var MT_HEADER: Int32 {
  get {
    return
  }
}
var CTLFLAG_NOLOCK: Int32 {
  get {
    return
  }
}
var MT_HTABLE: Int32 {
  get {
    return
  }
}
var VM_PROT_ZF: Int32 {
  get {
    return
  }
}
var CTIME: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_PRESENT: Int32 {
  get {
    return
  }
}
var MT_SONAME: Int32 {
  get {
    return
  }
}
var MT_SOCKET: Int32 {
  get {
    return
  }
}
var MT_RIGHTS: Int32 {
  get {
    return
  }
}
var CTLFLAG_KERN: Int32 {
  get {
    return
  }
}
var MT_RTABLE: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_SPECULATIVE: Int32 {
  get {
    return
  }
}
var MT_PCB: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_REF: Int32 {
  get {
    return
  }
}
var CTLFLAG_ANYBODY: Int32 {
  get {
    return
  }
}
var VM_PROT_COW: Int32 {
  get {
    return
  }
}
var M_2_SQRTPI: Double {
  get {
    return
  }
}
var CSIZE: Int32 {
  get {
    return
  }
}
var CS8: Int32 {
  get {
    return
  }
}
var M_2_PI: Double {
  get {
    return
  }
}
var M_1_PI: Double {
  get {
    return
  }
}
var CSTOPB: Int32 {
  get {
    return
  }
}
var MT_TAG: Int32 {
  get {
    return
  }
}
var MT_SOOPTS: Int32 {
  get {
    return
  }
}
var CRTS_IFLOW: Int32 {
  get {
    return
  }
}
var CS5: Int32 {
  get {
    return
  }
}
var M_LOG2E: Double {
  get {
    return
  }
}
var M_LOG10E: Double {
  get {
    return
  }
}
var CS7: Int32 {
  get {
    return
  }
}
var M_LN2: Double {
  get {
    return
  }
}
var M_LN10: Double {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_CS_VALIDATED: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_CS_TAINTED: Int32 {
  get {
    return
  }
}
var CS6: Int32 {
  get {
    return
  }
}
var M_E: Double {
  get {
    return
  }
}
var CRF_NOMEMBERD: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_EXTERNAL: Int32 {
  get {
    return
  }
}
var M_SQRT2: Double {
  get {
    return
  }
}
var CRF_MAC_ENFORCE: Int32 {
  get {
    return
  }
}
var M_SQRT1_2: Double {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_DIRTY: Int32 {
  get {
    return
  }
}
var M_PI_4: Double {
  get {
    return
  }
}
var M_PI_2: Double {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_COPIED: Int32 {
  get {
    return
  }
}
var CRNCYSTR: Int32 {
  get {
    return
  }
}
var M_PI: Double {
  get {
    return
  }
}
var CR3: Int32 {
  get {
    return
  }
}
var NBBY: Int32 {
  get {
    return
  }
}
var VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: Int32 {
  get {
    return
  }
}
var CRDLY: Int32 {
  get {
    return
  }
}
var NA_CONTROL_ENTRY: String {
  get {
    return
  }
}
var CR2: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_PAGED_OUT: Int32 {
  get {
    return
  }
}
var NAME_SERVER_SLOT: Int32 {
  get {
    return
  }
}
var VM_METER: Int32 {
  get {
    return
  }
}
var VM_PAGE_QUERY_PAGE_FICTITIOUS: Int32 {
  get {
    return
  }
}
var CREAD: Int32 {
  get {
    return
  }
}
var NAME_MAX: Int32 {
  get {
    return
  }
}
var VM_MEMORY_UNSHARED_PMAP: Int32 {
  get {
    return
  }
}
var NCCS: Int32 {
  get {
    return
  }
}
var CR1: Int32 {
  get {
    return
  }
}
var CQUIT: Int32 {
  get {
    return
  }
}
var NBPG: Int32 {
  get {
    return
  }
}
var CR0: Int32 {
  get {
    return
  }
}
var MON_8: Int32 {
  get {
    return
  }
}
var VM_MEMORY_OPENCL: Int32 {
  get {
    return
  }
}
var MON_9: Int32 {
  get {
    return
  }
}
var VM_MEMORY_OS_ALLOC_ONCE: Int32 {
  get {
    return
  }
}
var MPO_CONTEXT_AS_GUARD: Int32 {
  get {
    return
  }
}
var MON_6: Int32 {
  get {
    return
  }
}
var VM_MEMORY_REALLOC: Int32 {
  get {
    return
  }
}
var MON_7: Int32 {
  get {
    return
  }
}
var VM_MEMORY_SBRK: Int32 {
  get {
    return
  }
}
var VM_PAGE_INFO_BASIC: Int32 {
  get {
    return
  }
}
var MPO_INSERT_SEND_RIGHT: Int32 {
  get {
    return
  }
}
var MPO_QLIMIT: Int32 {
  get {
    return
  }
}
var VM_MEMORY_SQLITE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_SHARED_PMAP: Int32 {
  get {
    return
  }
}
var MPO_DENAP_RECEIVER: Int32 {
  get {
    return
  }
}
var VM_MEMORY_STACK: Int32 {
  get {
    return
  }
}
var MPO_IMPORTANCE_RECEIVER: Int32 {
  get {
    return
  }
}
var MSG_CTRUNC: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_LARGE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_TCMALLOC: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_LARGE_REUSABLE: Int32 {
  get {
    return
  }
}
var MSG_DONTROUTE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_LARGE_REUSED: Int32 {
  get {
    return
  }
}
var MPO_STRICT: Int32 {
  get {
    return
  }
}
var MPO_TEMPOWNER: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_NANO: Int32 {
  get {
    return
  }
}
var MSG_FLUSH: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_SMALL: Int32 {
  get {
    return
  }
}
var MSG_HAVEMORE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_TINY: Int32 {
  get {
    return
  }
}
var MSG_DONTWAIT: Int32 {
  get {
    return
  }
}
var MSG_EOF: Int32 {
  get {
    return
  }
}
var VM_MEMORY_OBJC_DISPATCHERS: Int32 {
  get {
    return
  }
}
var MSG_EOR: Int32 {
  get {
    return
  }
}
var MSG_NOERROR: Int32 {
  get {
    return
  }
}
var MSG_OOB: Int32 {
  get {
    return
  }
}
var VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: Int32 {
  get {
    return
  }
}
var MSG_HOLD: Int32 {
  get {
    return
  }
}
var VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: Int32 {
  get {
    return
  }
}
var MSG_NEEDSA: Int32 {
  get {
    return
  }
}
var MSG_MAGIC: Int32 {
  get {
    return
  }
}
var VM_MEMORY_LAYERKIT: Int32 {
  get {
    return
  }
}
var MSG_SEND: Int32 {
  get {
    return
  }
}
var VM_MEMORY_LIBDISPATCH: Int32 {
  get {
    return
  }
}
var MSG_WAITALL: Int32 {
  get {
    return
  }
}
var MSG_TRUNC: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MACH_MSG: Int32 {
  get {
    return
  }
}
var MSG_PEEK: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC: Int32 {
  get {
    return
  }
}
var MSG_RCVMORE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_MALLOC_HUGE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_DYLIB: Int32 {
  get {
    return
  }
}
var MSIZESHIFT: Int32 {
  get {
    return
  }
}
var VM_MEMORY_FOUNDATION: Int32 {
  get {
    return
  }
}
var MS_ASYNC: Int32 {
  get {
    return
  }
}
var MSG_WAITSTREAM: Int32 {
  get {
    return
  }
}
var VM_MEMORY_GENEALOGY: Int32 {
  get {
    return
  }
}
var VM_MEMORY_GLSL: Int32 {
  get {
    return
  }
}
var VM_MEMORY_GUARD: Int32 {
  get {
    return
  }
}
var MS_SYNC: Int32 {
  get {
    return
  }
}
var VM_MEMORY_IMAGEIO: Int32 {
  get {
    return
  }
}
var MT_ATABLE: Int32 {
  get {
    return
  }
}
var VM_MEMORY_IOKIT: Int32 {
  get {
    return
  }
}
var MS_DEACTIVATE: Int32 {
  get {
    return
  }
}
var MS_KILLPAGES: Int32 {
  get {
    return
  }
}
var VM_MEMORY_JAVA: Int32 {
  get {
    return
  }
}
var MS_INVALIDATE: Int32 {
  get {
    return
  }
}
var TARGET_CPU_ARM: Int32 {
  get {
    return
  }
}
var VM_MEMORY_JAVASCRIPT_CORE: Int32 {
  get {
    return
  }
}
var TARGET_CPU_ALPHA: Int32 {
  get {
    return
  }
}
var TARGET_CPU_68K: Int32 {
  get {
    return
  }
}
var TARGET_CARBON: Int32 {
  get {
    return
  }
}
var TARGET_API_MAC_OSX: Int32 {
  get {
    return
  }
}
var TARGET_API_MAC_OS8: Int32 {
  get {
    return
  }
}
var TARGET_API_MAC_CARBON: Int32 {
  get {
    return
  }
}
var TARGET_OS_EMBEDDED: Int32 {
  get {
    return
  }
}
var TARGET_IPHONE_SIMULATOR: Int32 {
  get {
    return
  }
}
var TARGET_CPU_X86_64: Int32 {
  get {
    return
  }
}
var TARGET_CPU_X86: Int32 {
  get {
    return
  }
}
var TARGET_CPU_SPARC: Int32 {
  get {
    return
  }
}
var TARGET_CPU_PPC64: Int32 {
  get {
    return
  }
}
var TARGET_CPU_MIPS: Int32 {
  get {
    return
  }
}
var TARGET_CPU_PPC: Int32 {
  get {
    return
  }
}
var TARGET_CPU_ARM64: Int32 {
  get {
    return
  }
}
var TARGET_RT_MAC_CFM: Int32 {
  get {
    return
  }
}
var TARGET_RT_LITTLE_ENDIAN: Int32 {
  get {
    return
  }
}
var TARGET_RT_BIG_ENDIAN: Int32 {
  get {
    return
  }
}
var TARGET_RT_64_BIT: Int32 {
  get {
    return
  }
}
var TARGET_OS_WIN32: Int32 {
  get {
    return
  }
}
var TARGET_OS_UNIX: Int32 {
  get {
    return
  }
}
var TARGET_OS_MAC: Int32 {
  get {
    return
  }
}
var TARGET_OS_IPHONE: Int32 {
  get {
    return
  }
}
var TASK_AUDIT_TOKEN: Int32 {
  get {
    return
  }
}
var TASK_AFFINITY_TAG_INFO: Int32 {
  get {
    return
  }
}
var TASK_ACCESS_PORT: Int32 {
  get {
    return
  }
}
var TASK_ABSOLUTETIME_INFO: Int32 {
  get {
    return
  }
}
var TARGET_RT_MAC_MACHO: Int32 {
  get {
    return
  }
}
@availability(*, unavailable, message="use 'nil' instead of this imported macro") var __DARWIN_NULL: ()
var S_IXUSR: Int32 {
  get {
    return
  }
}
var S_IXGRP: Int32 {
  get {
    return
  }
}
var S_IXOTH: Int32 {
  get {
    return
  }
}
var S_IWOTH: Int32 {
  get {
    return
  }
}
var S_IWRITE: Int32 {
  get {
    return
  }
}
var S_IWUSR: Int32 {
  get {
    return
  }
}
var TAB3: Int32 {
  get {
    return
  }
}
var TABDLY: Int32 {
  get {
    return
  }
}
var TABLDISC: Int32 {
  get {
    return
  }
}
var TAB0: Int32 {
  get {
    return
  }
}
var TAB1: Int32 {
  get {
    return
  }
}
var TAB2: Int32 {
  get {
    return
  }
}
var TAB: Int32 {
  get {
    return
  }
}
var _USE_FORTIFY_LEVEL: Int32 {
  get {
    return
  }
}
var SYS_write_nocancel: Int32 {
  get {
    return
  }
}
var SYS_write: Int32 {
  get {
    return
  }
}
var SYS_writev_nocancel: Int32 {
  get {
    return
  }
}
var SZOMB: Int32 {
  get {
    return
  }
}
var SYS_writev: Int32 {
  get {
    return
  }
}
var SYS_watchevent: Int32 {
  get {
    return
  }
}
var SYS_waitid_nocancel: Int32 {
  get {
    return
  }
}
var SYS_workq_open: Int32 {
  get {
    return
  }
}
var SYS_workq_kernreturn: Int32 {
  get {
    return
  }
}
var S_IFLNK: Int32 {
  get {
    return
  }
}
var S_IFIFO: Int32 {
  get {
    return
  }
}
var S_IFSOCK: Int32 {
  get {
    return
  }
}
var S_IFREG: Int32 {
  get {
    return
  }
}
var S_IEXEC: Int32 {
  get {
    return
  }
}
var S_BLKSIZE: Int32 {
  get {
    return
  }
}
var S_IFDIR: Int32 {
  get {
    return
  }
}
var S_IFBLK: Int32 {
  get {
    return
  }
}
var S_IFCHR: Int32 {
  get {
    return
  }
}
var S_IRWXU: Int32 {
  get {
    return
  }
}
var S_IRWXO: Int32 {
  get {
    return
  }
}
var S_IRWXG: Int32 {
  get {
    return
  }
}
var S_IRGRP: Int32 {
  get {
    return
  }
}
var S_IREAD: Int32 {
  get {
    return
  }
}
var S_IFWHT: Int32 {
  get {
    return
  }
}
var S_IRUSR: Int32 {
  get {
    return
  }
}
var S_IROTH: Int32 {
  get {
    return
  }
}
var S_ISUID: Int32 {
  get {
    return
  }
}
var S_ISTXT: Int32 {
  get {
    return
  }
}
var S_IWGRP: Int32 {
  get {
    return
  }
}
var S_ISVTX: Int32 {
  get {
    return
  }
}
var S_ISGID: Int32 {
  get {
    return
  }
}
var SYS_stat64_extended: Int32 {
  get {
    return
  }
}
var SYS_stat_extended: Int32 {
  get {
    return
  }
}
var SYS_statfs: Int32 {
  get {
    return
  }
}
var SYS_statfs64: Int32 {
  get {
    return
  }
}
var SYS_socket_delegate: Int32 {
  get {
    return
  }
}
var SYS_socketpair: Int32 {
  get {
    return
  }
}
var SYS_stack_snapshot: Int32 {
  get {
    return
  }
}
var SYS_stat: Int32 {
  get {
    return
  }
}
var SYS_stat64: Int32 {
  get {
    return
  }
}
var SYS_syscall: Int32 {
  get {
    return
  }
}
var SYS_sysctl: Int32 {
  get {
    return
  }
}
var SYS_sysctlbyname: Int32 {
  get {
    return
  }
}
var SYS_system_override: Int32 {
  get {
    return
  }
}
var SYS_telemetry: Int32 {
  get {
    return
  }
}
var SYS_swapon: Int32 {
  get {
    return
  }
}
var SYS_symlink: Int32 {
  get {
    return
  }
}
var SYS_symlinkat: Int32 {
  get {
    return
  }
}
var SYS_sync: Int32 {
  get {
    return
  }
}
var SYS_umask_extended: Int32 {
  get {
    return
  }
}
var SYS_undelete: Int32 {
  get {
    return
  }
}
var SYS_unlink: Int32 {
  get {
    return
  }
}
var SYS_unlinkat: Int32 {
  get {
    return
  }
}
var SYS_thread_selfid: Int32 {
  get {
    return
  }
}
var SYS_thread_selfusage: Int32 {
  get {
    return
  }
}
var SYS_truncate: Int32 {
  get {
    return
  }
}
var SYS_umask: Int32 {
  get {
    return
  }
}
var SYS_wait4: Int32 {
  get {
    return
  }
}
var SYS_wait4_nocancel: Int32 {
  get {
    return
  }
}
var SYS_waitevent: Int32 {
  get {
    return
  }
}
var SYS_waitid: Int32 {
  get {
    return
  }
}
var SYS_unmount: Int32 {
  get {
    return
  }
}
var SYS_utimes: Int32 {
  get {
    return
  }
}
var SYS_vfs_purge: Int32 {
  get {
    return
  }
}
var SYS_vfork: Int32 {
  get {
    return
  }
}
var SYS_vm_pressure_monitor: Int32 {
  get {
    return
  }
}
var SYS_setregid: Int32 {
  get {
    return
  }
}
var SYS_setprivexec: Int32 {
  get {
    return
  }
}
var SYS_setpriority: Int32 {
  get {
    return
  }
}
var SYS_setpgid: Int32 {
  get {
    return
  }
}
var SYS_setsockopt: Int32 {
  get {
    return
  }
}
var SYS_setsid: Int32 {
  get {
    return
  }
}
var SYS_setsgroups: Int32 {
  get {
    return
  }
}
var SYS_setreuid: Int32 {
  get {
    return
  }
}
var SYS_setrlimit: Int32 {
  get {
    return
  }
}
var SYS_setuid: Int32 {
  get {
    return
  }
}
var SYS_settimeofday: Int32 {
  get {
    return
  }
}
var SYS_settid_with_pid: Int32 {
  get {
    return
  }
}
var SYS_settid: Int32 {
  get {
    return
  }
}
var SYS_shared_region_check_np: Int32 {
  get {
    return
  }
}
var SYS_sfi_pidctl: Int32 {
  get {
    return
  }
}
var SYS_setxattr: Int32 {
  get {
    return
  }
}
var SYS_sfi_ctl: Int32 {
  get {
    return
  }
}
var SYS_setwgroups: Int32 {
  get {
    return
  }
}
var SYS_shmat: Int32 {
  get {
    return
  }
}
var SYS_shm_unlink: Int32 {
  get {
    return
  }
}
var SYS_shm_open: Int32 {
  get {
    return
  }
}
var SYS_shared_region_map_and_slide_np: Int32 {
  get {
    return
  }
}
var SYS_shmsys: Int32 {
  get {
    return
  }
}
var SYS_shmget: Int32 {
  get {
    return
  }
}
var SYS_shmdt: Int32 {
  get {
    return
  }
}
var SYS_shmctl: Int32 {
  get {
    return
  }
}
var SYS_sigprocmask: Int32 {
  get {
    return
  }
}
var SYS_sigpending: Int32 {
  get {
    return
  }
}
var SYS_sigaltstack: Int32 {
  get {
    return
  }
}
var SYS_sigaction: Int32 {
  get {
    return
  }
}
var SYS_shutdown: Int32 {
  get {
    return
  }
}
var SYS_socket: Int32 {
  get {
    return
  }
}
var SYS_sigsuspend_nocancel: Int32 {
  get {
    return
  }
}
var SYS_sigsuspend: Int32 {
  get {
    return
  }
}
var SYS_sigreturn: Int32 {
  get {
    return
  }
}
var SYS_rename_ext: Int32 {
  get {
    return
  }
}
var SYS_renameat: Int32 {
  get {
    return
  }
}
var SYS_revoke: Int32 {
  get {
    return
  }
}
var SYS_removexattr: Int32 {
  get {
    return
  }
}
var SYS_rename: Int32 {
  get {
    return
  }
}
var SYS_select: Int32 {
  get {
    return
  }
}
var SYS_select_nocancel: Int32 {
  get {
    return
  }
}
var SYS_rmdir: Int32 {
  get {
    return
  }
}
var SYS_searchfs: Int32 {
  get {
    return
  }
}
var SYS_sem_post: Int32 {
  get {
    return
  }
}
var SYS_sem_trywait: Int32 {
  get {
    return
  }
}
var SYS_sem_unlink: Int32 {
  get {
    return
  }
}
var SYS_sem_close: Int32 {
  get {
    return
  }
}
var SYS_sem_open: Int32 {
  get {
    return
  }
}
var SYS_semctl: Int32 {
  get {
    return
  }
}
var SYS_semget: Int32 {
  get {
    return
  }
}
var SYS_sem_wait: Int32 {
  get {
    return
  }
}
var SYS_sem_wait_nocancel: Int32 {
  get {
    return
  }
}
var SYS_sendfile: Int32 {
  get {
    return
  }
}
var SYS_sendmsg: Int32 {
  get {
    return
  }
}
var SYS_semop: Int32 {
  get {
    return
  }
}
var SYS_semsys: Int32 {
  get {
    return
  }
}
var SYS_sendto_nocancel: Int32 {
  get {
    return
  }
}
var SYS_setattrlist: Int32 {
  get {
    return
  }
}
var SYS_sendmsg_x: Int32 {
  get {
    return
  }
}
var SYS_sendmsg_nocancel: Int32 {
  get {
    return
  }
}
var SYS_sendto: Int32 {
  get {
    return
  }
}
var SYS_setegid: Int32 {
  get {
    return
  }
}
var SYS_seteuid: Int32 {
  get {
    return
  }
}
var SYS_setaudit_addr: Int32 {
  get {
    return
  }
}
var SYS_setauid: Int32 {
  get {
    return
  }
}
var SYS_setlcid: Int32 {
  get {
    return
  }
}
var SYS_setlogin: Int32 {
  get {
    return
  }
}
var SYS_setgid: Int32 {
  get {
    return
  }
}
var SYS_setitimer: Int32 {
  get {
    return
  }
}
var SYS_setgroups: Int32 {
  get {
    return
  }
}
var SYS_proc_uuid_policy: Int32 {
  get {
    return
  }
}
var SYS_proc_trace_log: Int32 {
  get {
    return
  }
}
var SYS_psynch_cvbroad: Int32 {
  get {
    return
  }
}
var SYS_process_policy: Int32 {
  get {
    return
  }
}
var SYS_psynch_cvsignal: Int32 {
  get {
    return
  }
}
var SYS_psynch_cvclrprepost: Int32 {
  get {
    return
  }
}
var SYS_psynch_mutexdrop: Int32 {
  get {
    return
  }
}
var SYS_psynch_cvwait: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_downgrade: Int32 {
  get {
    return
  }
}
var SYS_psynch_mutexwait: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_rdlock: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_longrdlock: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_unlock2: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_unlock: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_wrlock: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_upgrade: Int32 {
  get {
    return
  }
}
var SYS_ptrace: Int32 {
  get {
    return
  }
}
var SYS_psynch_rw_yieldwrlock: Int32 {
  get {
    return
  }
}
var SYS_pwrite_nocancel: Int32 {
  get {
    return
  }
}
var SYS_pwrite: Int32 {
  get {
    return
  }
}
var SYS_read: Int32 {
  get {
    return
  }
}
var SYS_quotactl: Int32 {
  get {
    return
  }
}
var SYS_readlink: Int32 {
  get {
    return
  }
}
var SYS_read_nocancel: Int32 {
  get {
    return
  }
}
var SYS_readv: Int32 {
  get {
    return
  }
}
var SYS_readlinkat: Int32 {
  get {
    return
  }
}
var SYS_recvfrom: Int32 {
  get {
    return
  }
}
var SYS_reboot: Int32 {
  get {
    return
  }
}
var SYS_readv_nocancel: Int32 {
  get {
    return
  }
}
var SYS_recvmsg: Int32 {
  get {
    return
  }
}
var SYS_recvfrom_nocancel: Int32 {
  get {
    return
  }
}
var SYS_recvmsg_x: Int32 {
  get {
    return
  }
}
var SYS_recvmsg_nocancel: Int32 {
  get {
    return
  }
}
var SYS_msgrcv: Int32 {
  get {
    return
  }
}
var SYS_msgrcv_nocancel: Int32 {
  get {
    return
  }
}
var SYS_msgsnd: Int32 {
  get {
    return
  }
}
var SYS_msgsnd_nocancel: Int32 {
  get {
    return
  }
}
var SYS_msgsys: Int32 {
  get {
    return
  }
}
var SYS_msync: Int32 {
  get {
    return
  }
}
var SYS_msync_nocancel: Int32 {
  get {
    return
  }
}
var SYS_munlock: Int32 {
  get {
    return
  }
}
var SYS_munlockall: Int32 {
  get {
    return
  }
}
var SYS_munmap: Int32 {
  get {
    return
  }
}
var SYS_necp_match_policy: Int32 {
  get {
    return
  }
}
var SYS_nfsclnt: Int32 {
  get {
    return
  }
}
var SYS_nfssvc: Int32 {
  get {
    return
  }
}
var SYS_open: Int32 {
  get {
    return
  }
}
var SYS_open_dprotected_np: Int32 {
  get {
    return
  }
}
var SYS_open_extended: Int32 {
  get {
    return
  }
}
var SYS_open_nocancel: Int32 {
  get {
    return
  }
}
var SYS_openat: Int32 {
  get {
    return
  }
}
var SYS_openat_nocancel: Int32 {
  get {
    return
  }
}
var SYS_openbyid_np: Int32 {
  get {
    return
  }
}
var SYS_pathconf: Int32 {
  get {
    return
  }
}
var SYS_peeloff: Int32 {
  get {
    return
  }
}
var SYS_pid_hibernate: Int32 {
  get {
    return
  }
}
var SYS_pid_resume: Int32 {
  get {
    return
  }
}
var SYS_pid_shutdown_sockets: Int32 {
  get {
    return
  }
}
var SYS_pid_suspend: Int32 {
  get {
    return
  }
}
var SYS_pipe: Int32 {
  get {
    return
  }
}
var SYS_poll: Int32 {
  get {
    return
  }
}
var SYS_posix_spawn: Int32 {
  get {
    return
  }
}
var SYS_poll_nocancel: Int32 {
  get {
    return
  }
}
var SYS_pread: Int32 {
  get {
    return
  }
}
var SYS_pread_nocancel: Int32 {
  get {
    return
  }
}
var SYS_proc_info: Int32 {
  get {
    return
  }
}
var SYS_proc_rlimit_control: Int32 {
  get {
    return
  }
}
var TOWRITE: Int32 {
  get {
    return
  }
}
var TOREAD: Int32 {
  get {
    return
  }
}
var TOSTOP: Int32 {
  get {
    return
  }
}
var TOEXEC: Int32 {
  get {
    return
  }
}
var TMP_MAX: Int32 {
  get {
    return
  }
}
var TMAGIC: String {
  get {
    return
  }
}
var TMAGLEN: Int32 {
  get {
    return
  }
}
var TLOSS: Int32 {
  get {
    return
  }
}
var TRCSIZ: Int32 {
  get {
    return
  }
}
var TRAP_TRACE: Int32 {
  get {
    return
  }
}
var TRAP_BRKPT: Int32 {
  get {
    return
  }
}
var TIOCPKT_FLUSHREAD: Int32 {
  get {
    return
  }
}
var TIOCPKT_FLUSHWRITE: Int32 {
  get {
    return
  }
}
var TIOCPKT_DATA: Int32 {
  get {
    return
  }
}
var CPU_SUBTYPE_INTEL_MODEL_ALL: Int32 {
  get {
    return
  }
}
var TIOCPKT_DOSTOP: Int32 {
  get {
    return
  }
}
var TIOCM_ST: Int32 {
  get {
    return
  }
}
var CPU_SUBTYPE_INTEL_FAMILY_MAX: Int32 {
  get {
    return
  }
}
var TIOCM_RTS: Int32 {
  get {
    return
  }
}
var TIOCM_SR: Int32 {
  get {
    return
  }
}
var TIOCM_RI: Int32 {
  get {
    return
  }
}
var TIOCM_RNG: Int32 {
  get {
    return
  }
}
var TIOCM_DSR: Int32 {
  get {
    return
  }
}
var TIOCM_DTR: Int32 {
  get {
    return
  }
}
var CPU_SUBTYPE_LIB64: UInt32 {
  get {
    return
  }
}
var TIOCM_LE: Int32 {
  get {
    return
  }
}
var TIOCM_CD: Int32 {
  get {
    return
  }
}
var TIOCM_CTS: Int32 {
  get {
    return
  }
}
var CPU_SUBTYPE_MASK: UInt32 {
  get {
    return
  }
}
var TIOCPKT_STOP: Int32 {
  get {
    return
  }
}
var TIOCPKT_IOCTL: Int32 {
  get {
    return
  }
}
var TIOCPKT_START: Int32 {
  get {
    return
  }
}
var TIOCPKT_NOSTOP: Int32 {
  get {
    return
  }
}
var TIME_RELATIVE: Int32 {
  get {
    return
  }
}
var TIME_MICROS_MAX: Int32 {
  get {
    return
  }
}
var TIME_ABSOLUTE: Int32 {
  get {
    return
  }
}
var TH_SYN: Int32 {
  get {
    return
  }
}
var TH_STATE_WAITING: Int32 {
  get {
    return
  }
}
var TH_USAGE_SCALE: Int32 {
  get {
    return
  }
}
var TH_URG: Int32 {
  get {
    return
  }
}
var TIOCM_CAR: Int32 {
  get {
    return
  }
}
var THREAD_STATE_NONE: Int32 {
  get {
    return
  }
}
var THREAD_THROUGHPUT_QOS_POLICY: Int32 {
  get {
    return
  }
}
var THREAD_TIME_CONSTRAINT_POLICY: Int32 {
  get {
    return
  }
}
var THREAD_STATE_FLAVOR_LIST_10_9: Int32 {
  get {
    return
  }
}
var THREAD_STATE_FLAVOR_LIST_NEW: Int32 {
  get {
    return
  }
}
var THREAD_STATE_MAX: Int32 {
  get {
    return
  }
}
var THREAD_SCHED_TIMESHARE_INFO: Int32 {
  get {
    return
  }
}
var THREAD_STANDARD_POLICY: Int32 {
  get {
    return
  }
}
var THREAD_STANDARD_POLICY_COUNT: Int32 {
  get {
    return
  }
}
var THREAD_STATE_FLAVOR_LIST: Int32 {
  get {
    return
  }
}
var THREAD_PRECEDENCE_POLICY: Int32 {
  get {
    return
  }
}
var THREAD_SCHED_FIFO_INFO: Int32 {
  get {
    return
  }
}
var THREAD_SCHED_RR_INFO: Int32 {
  get {
    return
  }
}
var TH_STATE_HALTED: Int32 {
  get {
    return
  }
}
var TH_STATE_RUNNING: Int32 {
  get {
    return
  }
}
var TH_STATE_STOPPED: Int32 {
  get {
    return
  }
}
var TH_STATE_UNINTERRUPTIBLE: Int32 {
  get {
    return
  }
}
var TH_FLAGS_IDLE: Int32 {
  get {
    return
  }
}
var TH_PUSH: Int32 {
  get {
    return
  }
}
var TH_FLAGS_SWAPPED: Int32 {
  get {
    return
  }
}
var TH_RST: Int32 {
  get {
    return
  }
}
var TH_ACK: Int32 {
  get {
    return
  }
}
var TH_CWR: Int32 {
  get {
    return
  }
}
var TH_ECE: Int32 {
  get {
    return
  }
}
var TH_FIN: Int32 {
  get {
    return
  }
}
var CLOCK_ALARM_MAXRES: Int32 {
  get {
    return
  }
}
var TGEXEC: Int32 {
  get {
    return
  }
}
var TGREAD: Int32 {
  get {
    return
  }
}
var CLOCK_ALARM_CURRES: Int32 {
  get {
    return
  }
}
var CLOCK_GET_TIME_RES: Int32 {
  get {
    return
  }
}
var TCSASOFT: Int32 {
  get {
    return
  }
}
var CLOCK_ALARM_MINRES: Int32 {
  get {
    return
  }
}
var TCSANOW: Int32 {
  get {
    return
  }
}
var THREAD_AFFINITY_POLICY: Int32 {
  get {
    return
  }
}
var THOUSEP: Int32 {
  get {
    return
  }
}
var TGWRITE: Int32 {
  get {
    return
  }
}
var CMASK: Int32 {
  get {
    return
  }
}
var TCP_NOTSENT_LOWAT: Int32 {
  get {
    return
  }
}
var CLSIZELOG2: Int32 {
  get {
    return
  }
}
var TCP_NOPUSH: Int32 {
  get {
    return
  }
}
var CLSIZE: Int32 {
  get {
    return
  }
}
var TCP_NOOPT: Int32 {
  get {
    return
  }
}
var CMIN: Int32 {
  get {
    return
  }
}
var TCP_NODELAY: Int32 {
  get {
    return
  }
}
var TCSADRAIN: Int32 {
  get {
    return
  }
}
var TCSAFLUSH: Int32 {
  get {
    return
  }
}
var TCP_SENDMOREACKS: Int32 {
  get {
    return
  }
}
var TCP_RXT_FINDROP: Int32 {
  get {
    return
  }
}
var TCP_RXT_CONNDROPTIME: Int32 {
  get {
    return
  }
}
var THREAD_KERNEL_PORT: Int32 {
  get {
    return
  }
}
var THREAD_INFO_MAX: Int32 {
  get {
    return
  }
}
var THREAD_IDENTIFIER_INFO: Int32 {
  get {
    return
  }
}
var THREAD_MACHINE_STATE_MAX: Int32 {
  get {
    return
  }
}
var CLD_CONTINUED: Int32 {
  get {
    return
  }
}
var THREAD_LATENCY_QOS_POLICY: Int32 {
  get {
    return
  }
}
var CLD_EXITED: Int32 {
  get {
    return
  }
}
var CLD_KILLED: Int32 {
  get {
    return
  }
}
var THREAD_BASIC_INFO: Int32 {
  get {
    return
  }
}
var CLD_DUMPED: Int32 {
  get {
    return
  }
}
var THREAD_BACKGROUND_POLICY: Int32 {
  get {
    return
  }
}
var CLD_STOPPED: Int32 {
  get {
    return
  }
}
var THREAD_AFFINITY_TAG_NULL: Int32 {
  get {
    return
  }
}
var CLD_NOOP: Int32 {
  get {
    return
  }
}
var CLK_TCK: Int32 {
  get {
    return
  }
}
var CLD_TRAPPED: Int32 {
  get {
    return
  }
}
var THREAD_EXTENDED_POLICY: Int32 {
  get {
    return
  }
}
var CLOCKS_PER_SEC: Int32 {
  get {
    return
  }
}
var CLOCAL: Int32 {
  get {
    return
  }
}
var TCPOPT_EOL: Int32 {
  get {
    return
  }
}
var TCPOPT_MAXSEG: Int32 {
  get {
    return
  }
}
var TCPOPT_CCECHO: Int32 {
  get {
    return
  }
}
var CHARCLASS_NAME_MAX: Int32 {
  get {
    return
  }
}
var TCPOPT_CCNEW: Int32 {
  get {
    return
  }
}
var CHAR_BIT: Int32 {
  get {
    return
  }
}
var CHAR_MAX: Int32 {
  get {
    return
  }
}
var TCPOPT_SACK_PERMITTED: Int32 {
  get {
    return
  }
}
var CHILD_MAX: Int32 {
  get {
    return
  }
}
var CHAR_MIN: Int32 {
  get {
    return
  }
}
var TCPOPT_NOP: Int32 {
  get {
    return
  }
}
var TCPOPT_SACK: Int32 {
  get {
    return
  }
}
var CIGNORE: Int32 {
  get {
    return
  }
}
var TCPOLEN_SACK_PERMITTED: Int32 {
  get {
    return
  }
}
var TCPOLEN_SIGNATURE: Int32 {
  get {
    return
  }
}
var TCPOLEN_MAXSEG: Int32 {
  get {
    return
  }
}
var TCPOLEN_SACK: Int32 {
  get {
    return
  }
}
var TCPOLEN_WINDOW: Int32 {
  get {
    return
  }
}
var TCPOPT_CC: Int32 {
  get {
    return
  }
}
var TCPOLEN_TIMESTAMP: Int32 {
  get {
    return
  }
}
var TCP_MAXSEG: Int32 {
  get {
    return
  }
}
var TCP_KEEPINTVL: Int32 {
  get {
    return
  }
}
var CALL_NOT_IN_CARBON: Int32 {
  get {
    return
  }
}
var TCP_MAXHLEN: Int32 {
  get {
    return
  }
}
var TCP_MINMSS: Int32 {
  get {
    return
  }
}
var CBLOCK: Int32 {
  get {
    return
  }
}
var TCP_MAX_WINSHIFT: Int32 {
  get {
    return
  }
}
var TCP_MSS: Int32 {
  get {
    return
  }
}
var CBRK: Int32 {
  get {
    return
  }
}
var TCP_MAXWIN: Int32 {
  get {
    return
  }
}
var CCAR_OFLOW: Int32 {
  get {
    return
  }
}
var TCP_MAX_SACK: Int32 {
  get {
    return
  }
}
var CCTS_OFLOW: Int32 {
  get {
    return
  }
}
var TCPOPT_TIMESTAMP: Int32 {
  get {
    return
  }
}
var CDSR_OFLOW: Int32 {
  get {
    return
  }
}
var TCPOPT_SIGNATURE: Int32 {
  get {
    return
  }
}
var TCP_KEEPALIVE: Int32 {
  get {
    return
  }
}
var CDTR_IFLOW: Int32 {
  get {
    return
  }
}
var TCP_ENABLE_ECN: Int32 {
  get {
    return
  }
}
var TCP_KEEPCNT: Int32 {
  get {
    return
  }
}
var CEOL: Int32 {
  get {
    return
  }
}
var TCPOPT_WINDOW: Int32 {
  get {
    return
  }
}
var CERASE: Int32 {
  get {
    return
  }
}
var TCP_CONNECTIONTIMEOUT: Int32 {
  get {
    return
  }
}
var TASK_SCHED_RR_INFO: Int32 {
  get {
    return
  }
}
var CPU_STATE_NICE: Int32 {
  get {
    return
  }
}
var TASK_SCHED_INFO: Int32 {
  get {
    return
  }
}
var CPU_STATE_MAX: Int32 {
  get {
    return
  }
}
var TASK_SEATBELT_PORT: Int32 {
  get {
    return
  }
}
var CPU_STATE_IDLE: Int32 {
  get {
    return
  }
}
var TASK_SCHED_TIMESHARE_INFO: Int32 {
  get {
    return
  }
}
var CPU_ARCH_MASK: UInt32 {
  get {
    return
  }
}
var TASK_SECURITY_TOKEN: Int32 {
  get {
    return
  }
}
var TASK_THREAD_TIMES_INFO: Int32 {
  get {
    return
  }
}
var TASK_SUPPRESSION_POLICY: Int32 {
  get {
    return
  }
}
var CPU_STATE_USER: Int32 {
  get {
    return
  }
}
var CPU_STATE_SYSTEM: Int32 {
  get {
    return
  }
}
var TASK_PORT_REGISTER_MAX: Int32 {
  get {
    return
  }
}
var TASK_POLICY_STATE: Int32 {
  get {
    return
  }
}
var TASK_POWER_INFO: Int32 {
  get {
    return
  }
}
var TASK_POWER_INFO_V2: Int32 {
  get {
    return
  }
}
var TASK_SCHED_FIFO_INFO: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_IVYBRIDGE: Int32 {
  get {
    return
  }
}
var TCIOFF: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_HASWELL: Int32 {
  get {
    return
  }
}
var TCIFLUSH: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_CORE2: Int32 {
  get {
    return
  }
}
var TCOFLUSH: Int32 {
  get {
    return
  }
}
var TCION: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_CORE: Int32 {
  get {
    return
  }
}
var TCIOFLUSH: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_SANDYBRIDGE: Int32 {
  get {
    return
  }
}
var TCOON: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_PENRYN: Int32 {
  get {
    return
  }
}
var TCOOFF: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_NEHALEM: Int32 {
  get {
    return
  }
}
var TCPOLEN_CC: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_MEROM: Int32 {
  get {
    return
  }
}
var TCP6_MSS: Int32 {
  get {
    return
  }
}
var CPUFAMILY_POWERPC_G4: Int32 {
  get {
    return
  }
}
var TASK_TRACE_MEMORY_INFO: Int32 {
  get {
    return
  }
}
var CPUFAMILY_POWERPC_G3: UInt32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_YONAH: Int32 {
  get {
    return
  }
}
var TASK_VM_INFO: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_WESTMERE: Int32 {
  get {
    return
  }
}
var CPU_ARCH_ABI64: Int32 {
  get {
    return
  }
}
var TASK_VM_INFO_PURGEABLE: Int32 {
  get {
    return
  }
}
var CPUMON_MAKE_FATAL: Int32 {
  get {
    return
  }
}
var CPUFAMILY_UNKNOWN: Int32 {
  get {
    return
  }
}
var CPUFAMILY_POWERPC_G5: UInt32 {
  get {
    return
  }
}
var TASK_WAIT_STATE_INFO: Int32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_11: UInt32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_12: UInt32 {
  get {
    return
  }
}
var TASK_BOOTSTRAP_PORT: Int32 {
  get {
    return
  }
}
var CPF_OVERWRITE: Int32 {
  get {
    return
  }
}
var TASK_CATEGORY_POLICY: Int32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_15: UInt32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_9: UInt32 {
  get {
    return
  }
}
var TASK_DEBUG_CONTROL_PORT: Int32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_13: Int32 {
  get {
    return
  }
}
var TASK_DYLD_ALL_IMAGE_INFO_32: Int32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_14: UInt32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_XSCALE: Int32 {
  get {
    return
  }
}
var TASK_BASE_LATENCY_QOS_POLICY: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_13: UInt32 {
  get {
    return
  }
}
var TASK_BASE_QOS_POLICY: Int32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_CYCLONE: Int32 {
  get {
    return
  }
}
var TASK_BASE_THROUGHPUT_QOS_POLICY: Int32 {
  get {
    return
  }
}
var CPUFAMILY_ARM_SWIFT: Int32 {
  get {
    return
  }
}
var TASK_BASIC2_INFO_32: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_23: Int32 {
  get {
    return
  }
}
var TASK_BASIC_INFO: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_26: Int32 {
  get {
    return
  }
}
var TASK_BASIC_INFO_32: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_14: Int32 {
  get {
    return
  }
}
var CPUFAMILY_INTEL_6_15: Int32 {
  get {
    return
  }
}
var TASK_BASIC_INFO_64: Int32 {
  get {
    return
  }
}
var TASK_INFO_MAX: Int32 {
  get {
    return
  }
}
var TASK_KERNELMEMORY_INFO: Int32 {
  get {
    return
  }
}
var CODESET: Int32 {
  get {
    return
  }
}
var TASK_KERNEL_PORT: Int32 {
  get {
    return
  }
}
var TASK_NAME_PORT: Int32 {
  get {
    return
  }
}
var COLL_WEIGHTS_MAX: Int32 {
  get {
    return
  }
}
var TASK_OVERRIDE_QOS_POLICY: Int32 {
  get {
    return
  }
}
var TASK_DYLD_ALL_IMAGE_INFO_64: Int32 {
  get {
    return
  }
}
var TASK_DYLD_INFO: Int32 {
  get {
    return
  }
}
var TASK_EVENTS_INFO: Int32 {
  get {
    return
  }
}
var CPF_IGNORE_MODE: Int32 {
  get {
    return
  }
}
var TASK_EXTMOD_INFO: Int32 {
  get {
    return
  }
}
var COMAPT_MAXLOGNAME: Int32 {
  get {
    return
  }
}
var TASK_HOST_PORT: Int32 {
  get {
    return
  }
}
var CONTROL: Int32 {
  get {
    return
  }
}
var SOL_SOCKET: Int32 {
  get {
    return
  }
}
var SOMAXCONN: Int32 {
  get {
    return
  }
}
var SOI_S_PRIV: Int32 {
  get {
    return
  }
}
var SOL_LOCAL: Int32 {
  get {
    return
  }
}
var SOI_S_RCVATMARK: Int32 {
  get {
    return
  }
}
var SOI_S_NBIO: Int32 {
  get {
    return
  }
}
var SOI_S_NOFDREF: Int32 {
  get {
    return
  }
}
var SOI_S_ISDISCONNECTED: Int32 {
  get {
    return
  }
}
var SOI_S_ISDISCONNECTING: Int32 {
  get {
    return
  }
}
var SO_KEEPALIVE: Int32 {
  get {
    return
  }
}
var SO_LABEL: Int32 {
  get {
    return
  }
}
var SO_DONTROUTE: Int32 {
  get {
    return
  }
}
var SO_ERROR: Int32 {
  get {
    return
  }
}
var SO_DONTTRUNC: Int32 {
  get {
    return
  }
}
var SO_BROADCAST: Int32 {
  get {
    return
  }
}
var SO_DEBUG: Int32 {
  get {
    return
  }
}
var SONPX_SETOPTSHUT: Int32 {
  get {
    return
  }
}
var SO_ACCEPTCONN: Int32 {
  get {
    return
  }
}
var SOCK_RDM: Int32 {
  get {
    return
  }
}
var SOCK_SEQPACKET: Int32 {
  get {
    return
  }
}
var SOCK_MAXADDRLEN: Int32 {
  get {
    return
  }
}
var SOCK_RAW: Int32 {
  get {
    return
  }
}
var SM_TRUESHARED: Int32 {
  get {
    return
  }
}
var SOCK_DGRAM: Int32 {
  get {
    return
  }
}
var SM_PRIVATE_ALIASED: Int32 {
  get {
    return
  }
}
var SM_SHARED: Int32 {
  get {
    return
  }
}
var SM_SHARED_ALIASED: Int32 {
  get {
    return
  }
}
var SOI_S_ISCONNECTED: Int32 {
  get {
    return
  }
}
var SOI_S_ISCONNECTING: Int32 {
  get {
    return
  }
}
var SOI_S_DRAINING: Int32 {
  get {
    return
  }
}
var SOI_S_INCOMP: Int32 {
  get {
    return
  }
}
var SOI_S_CANTSENDMORE: Int32 {
  get {
    return
  }
}
var SOI_S_COMP: Int32 {
  get {
    return
  }
}
var SOCK_STREAM: Int32 {
  get {
    return
  }
}
var SOI_S_ASYNC: Int32 {
  get {
    return
  }
}
var SOI_S_CANTRCVMORE: Int32 {
  get {
    return
  }
}
var SO_USELOOPBACK: Int32 {
  get {
    return
  }
}
var SO_UPCALLCLOSEWAIT: Int32 {
  get {
    return
  }
}
var SO_TYPE: Int32 {
  get {
    return
  }
}
var SO_TIMESTAMP_MONOTONIC: Int32 {
  get {
    return
  }
}
var SO_TIMESTAMP: Int32 {
  get {
    return
  }
}
var SO_SNDTIMEO: Int32 {
  get {
    return
  }
}
var SO_SNDLOWAT: Int32 {
  get {
    return
  }
}
var SO_SNDBUF: Int32 {
  get {
    return
  }
}
var SO_REUSESHAREUID: Int32 {
  get {
    return
  }
}
var SRCHFS_SKIPINVISIBLE: Int32 {
  get {
    return
  }
}
var SRCHFS_SKIPINAPPROPRIATE: Int32 {
  get {
    return
  }
}
var SRCHFS_NEGATEPARAMS: UInt32 {
  get {
    return
  }
}
var SRCHFS_MATCHPARTIALNAMES: Int32 {
  get {
    return
  }
}
var SRCHFS_MATCHFILES: Int32 {
  get {
    return
  }
}
var SRCHFS_MATCHDIRS: Int32 {
  get {
    return
  }
}
var SO_WANTOOBFLAG: Int32 {
  get {
    return
  }
}
var SO_WANTMORE: Int32 {
  get {
    return
  }
}
var SO_NUMRCVPKT: Int32 {
  get {
    return
  }
}
var SO_NREAD: Int32 {
  get {
    return
  }
}
var SO_NP_EXTENSIONS: Int32 {
  get {
    return
  }
}
var SO_NOTIFYCONFLICT: Int32 {
  get {
    return
  }
}
var SO_NOADDRERR: Int32 {
  get {
    return
  }
}
var SO_NOSIGPIPE: Int32 {
  get {
    return
  }
}
var SO_NKE: Int32 {
  get {
    return
  }
}
var SO_LINGER_SEC: Int32 {
  get {
    return
  }
}
var SO_LINGER: Int32 {
  get {
    return
  }
}
var SO_REUSEPORT: Int32 {
  get {
    return
  }
}
var SO_REUSEADDR: Int32 {
  get {
    return
  }
}
var SO_RCVTIMEO: Int32 {
  get {
    return
  }
}
var SO_RCVBUF: Int32 {
  get {
    return
  }
}
var SO_RCVLOWAT: Int32 {
  get {
    return
  }
}
var SO_RANDOMPORT: Int32 {
  get {
    return
  }
}
var SO_PEERLABEL: Int32 {
  get {
    return
  }
}
var SO_OOBINLINE: Int32 {
  get {
    return
  }
}
var SO_NWRITE: Int32 {
  get {
    return
  }
}
var SM_EMPTY: Int32 {
  get {
    return
  }
}
var SM_COW: Int32 {
  get {
    return
  }
}
var SM_PRIVATE: Int32 {
  get {
    return
  }
}
var SM_LARGE_PAGE: Int32 {
  get {
    return
  }
}
var SMALL_PIPE_SIZE: Int32 {
  get {
    return
  }
}
var SIZE_T_MAX: UInt {
  get {
    return
  }
}
var SIZE_MAX: UInt64 {
  get {
    return
  }
}
var SLIPDISC: Int32 {
  get {
    return
  }
}
var SI_MESGQ: Int32 {
  get {
    return
  }
}
var SI_ASYNCIO: Int32 {
  get {
    return
  }
}
var SI_TIMER: Int32 {
  get {
    return
  }
}
var SI_USER: Int32 {
  get {
    return
  }
}
var SI_QUEUE: Int32 {
  get {
    return
  }
}
var SIGNATURE: Int32 {
  get {
    return
  }
}
var SIGPIPE: Int32 {
  get {
    return
  }
}
var SIGIO: Int32 {
  get {
    return
  }
}
var SIGKILL: Int32 {
  get {
    return
  }
}
var SIGIOT: Int32 {
  get {
    return
  }
}
var SIGSTKSZ: Int32 {
  get {
    return
  }
}
var SIGSTOP: Int32 {
  get {
    return
  }
}
var SIGPROF: Int32 {
  get {
    return
  }
}
var SIGSEGV: Int32 {
  get {
    return
  }
}
var SIGQUIT: Int32 {
  get {
    return
  }
}
var SIGTSTP: Int32 {
  get {
    return
  }
}
var SIGTTOU: Int32 {
  get {
    return
  }
}
var SIGTTIN: Int32 {
  get {
    return
  }
}
var SIGTERM: Int32 {
  get {
    return
  }
}
var SIGSYS: Int32 {
  get {
    return
  }
}
var SIGTRAP: Int32 {
  get {
    return
  }
}
var SIGUSR2: Int32 {
  get {
    return
  }
}
var SIGWINCH: Int32 {
  get {
    return
  }
}
var SIGVTALRM: Int32 {
  get {
    return
  }
}
var SIGURG: Int32 {
  get {
    return
  }
}
var SIGUSR1: Int32 {
  get {
    return
  }
}
var SHUT_RD: Int32 {
  get {
    return
  }
}
var SHUT_RDWR: Int32 {
  get {
    return
  }
}
var SHRT_MIN: Int32 {
  get {
    return
  }
}
var SHUTDOWN_TIME: Int32 {
  get {
    return
  }
}
var SIGALRM: Int32 {
  get {
    return
  }
}
var SIGBUS: Int32 {
  get {
    return
  }
}
var SIGCHLD: Int32 {
  get {
    return
  }
}
var SHUT_WR: Int32 {
  get {
    return
  }
}
var SIDL: Int32 {
  get {
    return
  }
}
var SIGABRT: Int32 {
  get {
    return
  }
}
var SIGEV_NONE: Int32 {
  get {
    return
  }
}
var SIGEV_SIGNAL: Int32 {
  get {
    return
  }
}
var SIGEV_THREAD: Int32 {
  get {
    return
  }
}
var SIGCONT: Int32 {
  get {
    return
  }
}
var SIGEMT: Int32 {
  get {
    return
  }
}
var SIGILL: Int32 {
  get {
    return
  }
}
var SIGINFO: Int32 {
  get {
    return
  }
}
var SIGINT: Int32 {
  get {
    return
  }
}
var SIGFPE: Int32 {
  get {
    return
  }
}
var SIGHUP: Int32 {
  get {
    return
  }
}
var SIG_ATOMIC_MAX: Int32 {
  get {
    return
  }
}
var SIGXFSZ: Int32 {
  get {
    return
  }
}
var SIGXCPU: Int32 {
  get {
    return
  }
}
var SIG_BLOCK: Int32 {
  get {
    return
  }
}
var SING: Int32 {
  get {
    return
  }
}
var SIG_SETMASK: Int32 {
  get {
    return
  }
}
var SIG_UNBLOCK: Int32 {
  get {
    return
  }
}
var SHARED_REGION_BASE_PPC: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_BASE_PPC64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_BASE_X86_64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_ARM: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_ARM64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_I386: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_PPC: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_PPC64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_BASE_X86_64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX: UInt64 {
  get {
    return
  }
}
var SEM_UNDO: Int32 {
  get {
    return
  }
}
var SEM_VALUE_MAX: Int32 {
  get {
    return
  }
}
var SERVICE_SLOT: Int32 {
  get {
    return
  }
}
var SETALL: Int32 {
  get {
    return
  }
}
var SETVAL: Int32 {
  get {
    return
  }
}
var SF_APPEND: Int32 {
  get {
    return
  }
}
var SF_ARCHIVED: Int32 {
  get {
    return
  }
}
var SF_IMMUTABLE: Int32 {
  get {
    return
  }
}
var SF_RESTRICTED: Int32 {
  get {
    return
  }
}
var SF_SETTABLE: UInt32 {
  get {
    return
  }
}
var SHARED_REGION_BASE: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_BASE_ARM: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_BASE_ARM64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_BASE_I386: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_PPC: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_I386: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_X86_64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_PPC64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_SIZE_ARM: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_SIZE: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_SIZE_I386: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_SIZE_ARM64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_SIZE_PPC: UInt64 {
  get {
    return
  }
}
var SHMLBA: Int32 {
  get {
    return
  }
}
var SHARED_REGION_SIZE_X86_64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_SIZE_PPC64: UInt64 {
  get {
    return
  }
}
var SHM_RDONLY: Int32 {
  get {
    return
  }
}
var SHM_R: Int32 {
  get {
    return
  }
}
var SHRT_MAX: Int32 {
  get {
    return
  }
}
var SHM_W: Int32 {
  get {
    return
  }
}
var SHM_RND: Int32 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_PPC: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_I386: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_X86_64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MAX_PPC64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_PPC: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_I386: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_X86_64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_MIN_PPC64: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_ARM: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE: UInt64 {
  get {
    return
  }
}
var SHARED_REGION_NESTING_SIZE_ARM64: UInt64 {
  get {
    return
  }
}
var SYS_kas_info: Int32 {
  get {
    return
  }
}
var SYS_kdebug_trace: Int32 {
  get {
    return
  }
}
var SYS_iopolicysys: Int32 {
  get {
    return
  }
}
var SYS_issetugid: Int32 {
  get {
    return
  }
}
var SYS_initgroups: Int32 {
  get {
    return
  }
}
var SYS_ioctl: Int32 {
  get {
    return
  }
}
var SYS_guarded_write_np: Int32 {
  get {
    return
  }
}
var SYS_identitysvc: Int32 {
  get {
    return
  }
}
var SYS_guarded_writev_np: Int32 {
  get {
    return
  }
}
var SYS_guarded_open_np: Int32 {
  get {
    return
  }
}
var SYS_guarded_pwrite_np: Int32 {
  get {
    return
  }
}
var SYS_guarded_open_dprotected_np: Int32 {
  get {
    return
  }
}
var SYS_guarded_close_np: Int32 {
  get {
    return
  }
}
var SYS_guarded_kqueue_np: Int32 {
  get {
    return
  }
}
var SYS_getuid: Int32 {
  get {
    return
  }
}
var SYS_getxattr: Int32 {
  get {
    return
  }
}
var SYS_getwgroups: Int32 {
  get {
    return
  }
}
var SYS_gettid: Int32 {
  get {
    return
  }
}
var SYS_gettimeofday: Int32 {
  get {
    return
  }
}
var SYS_getsockname: Int32 {
  get {
    return
  }
}
var SYS_getsockopt: Int32 {
  get {
    return
  }
}
var SYS_getsgroups: Int32 {
  get {
    return
  }
}
var SYS_getsid: Int32 {
  get {
    return
  }
}
var SYS_getpriority: Int32 {
  get {
    return
  }
}
var SYS_getrlimit: Int32 {
  get {
    return
  }
}
var SYS_getrusage: Int32 {
  get {
    return
  }
}
var SYS_getpid: Int32 {
  get {
    return
  }
}
var SYS_getppid: Int32 {
  get {
    return
  }
}
var SYS_getpgid: Int32 {
  get {
    return
  }
}
var SYS_getpgrp: Int32 {
  get {
    return
  }
}
var SYS_getlcid: Int32 {
  get {
    return
  }
}
var SYS_getlogin: Int32 {
  get {
    return
  }
}
var SYS_getpeername: Int32 {
  get {
    return
  }
}
var SYS_gethostuuid: Int32 {
  get {
    return
  }
}
var SYS_getitimer: Int32 {
  get {
    return
  }
}
var SYS_msgget: Int32 {
  get {
    return
  }
}
var SYS_msgctl: Int32 {
  get {
    return
  }
}
var SYS_mremap_encrypted: Int32 {
  get {
    return
  }
}
var SYS_mprotect: Int32 {
  get {
    return
  }
}
var SYS_mount: Int32 {
  get {
    return
  }
}
var SYS_modwatch: Int32 {
  get {
    return
  }
}
var SYS_mmap: Int32 {
  get {
    return
  }
}
var SYS_mlockall: Int32 {
  get {
    return
  }
}
var SYS_mlock: Int32 {
  get {
    return
  }
}
var SYS_mknod: Int32 {
  get {
    return
  }
}
var SYS_mkfifo_extended: Int32 {
  get {
    return
  }
}
var SYS_mkfifo: Int32 {
  get {
    return
  }
}
var SYS_mkdirat: Int32 {
  get {
    return
  }
}
var SYS_mkdir_extended: Int32 {
  get {
    return
  }
}
var SYS_mkdir: Int32 {
  get {
    return
  }
}
var SYS_minherit: Int32 {
  get {
    return
  }
}
var SYS_mincore: Int32 {
  get {
    return
  }
}
var SYS_memorystatus_get_level: Int32 {
  get {
    return
  }
}
var SYS_memorystatus_control: Int32 {
  get {
    return
  }
}
var SYS_madvise: Int32 {
  get {
    return
  }
}
var SYS_lstat_extended: Int32 {
  get {
    return
  }
}
var SYS_lstat64_extended: Int32 {
  get {
    return
  }
}
var SYS_lstat64: Int32 {
  get {
    return
  }
}
var SYS_lstat: Int32 {
  get {
    return
  }
}
var SYS_lseek: Int32 {
  get {
    return
  }
}
var SYS_listen: Int32 {
  get {
    return
  }
}
var SYS_listxattr: Int32 {
  get {
    return
  }
}
var SYS_lio_listio: Int32 {
  get {
    return
  }
}
var SYS_linkat: Int32 {
  get {
    return
  }
}
var SYS_link: Int32 {
  get {
    return
  }
}
var SYS_ledger: Int32 {
  get {
    return
  }
}
var SYS_lchown: Int32 {
  get {
    return
  }
}
var SYS_kqueue: Int32 {
  get {
    return
  }
}
var SYS_kevent64: Int32 {
  get {
    return
  }
}
var SYS_kill: Int32 {
  get {
    return
  }
}
var SYS_kevent: Int32 {
  get {
    return
  }
}
var SYS_fileport_makefd: Int32 {
  get {
    return
  }
}
var SYS_fileport_makeport: Int32 {
  get {
    return
  }
}
var SYS_flistxattr: Int32 {
  get {
    return
  }
}
var SYS_flock: Int32 {
  get {
    return
  }
}
var SYS_ffsctl: Int32 {
  get {
    return
  }
}
var SYS_fgetattrlist: Int32 {
  get {
    return
  }
}
var SYS_fgetxattr: Int32 {
  get {
    return
  }
}
var SYS_fhopen: Int32 {
  get {
    return
  }
}
var SYS_fchownat: Int32 {
  get {
    return
  }
}
var SYS_fcntl: Int32 {
  get {
    return
  }
}
var SYS_fcntl_nocancel: Int32 {
  get {
    return
  }
}
var SYS_fdatasync: Int32 {
  get {
    return
  }
}
var SYS_fchflags: Int32 {
  get {
    return
  }
}
var SYS_fchmod: Int32 {
  get {
    return
  }
}
var SYS_fchmod_extended: Int32 {
  get {
    return
  }
}
var SYS_fchown: Int32 {
  get {
    return
  }
}
var SYS_fchmodat: Int32 {
  get {
    return
  }
}
var SYS_execve: Int32 {
  get {
    return
  }
}
var SYS_exit: Int32 {
  get {
    return
  }
}
var SYS_faccessat: Int32 {
  get {
    return
  }
}
var SYS_fchdir: Int32 {
  get {
    return
  }
}
var SYS_delete: Int32 {
  get {
    return
  }
}
var SYS_disconnectx: Int32 {
  get {
    return
  }
}
var SYS_dup: Int32 {
  get {
    return
  }
}
var SYS_dup2: Int32 {
  get {
    return
  }
}
var SYS_exchangedata: Int32 {
  get {
    return
  }
}
var SYS_copyfile: Int32 {
  get {
    return
  }
}
var SYS_csops: Int32 {
  get {
    return
  }
}
var SYS_csops_audittoken: Int32 {
  get {
    return
  }
}
var SYS_csrctl: Int32 {
  get {
    return
  }
}
var SYS_coalition: Int32 {
  get {
    return
  }
}
var SYS_coalition_info: Int32 {
  get {
    return
  }
}
var SYS_connect: Int32 {
  get {
    return
  }
}
var SYS_connect_nocancel: Int32 {
  get {
    return
  }
}
var SYS_connectx: Int32 {
  get {
    return
  }
}
var SYS_getfsstat64: Int32 {
  get {
    return
  }
}
var SYS_getfsstat: Int32 {
  get {
    return
  }
}
var SYS_getgroups: Int32 {
  get {
    return
  }
}
var SYS_getgid: Int32 {
  get {
    return
  }
}
var SYS_getdtablesize: Int32 {
  get {
    return
  }
}
var SYS_getdirentriesattr: Int32 {
  get {
    return
  }
}
var SYS_getfh: Int32 {
  get {
    return
  }
}
var SYS_geteuid: Int32 {
  get {
    return
  }
}
var SYS_getegid: Int32 {
  get {
    return
  }
}
var SYS_getauid: Int32 {
  get {
    return
  }
}
var SYS_getaudit_addr: Int32 {
  get {
    return
  }
}
var SYS_getdirentries64: Int32 {
  get {
    return
  }
}
var SYS_getdirentries: Int32 {
  get {
    return
  }
}
var SYS_getattrlist: Int32 {
  get {
    return
  }
}
var SYS_futimes: Int32 {
  get {
    return
  }
}
var SYS_getattrlistbulk: Int32 {
  get {
    return
  }
}
var SYS_getattrlistat: Int32 {
  get {
    return
  }
}
var SYS_fsync: Int32 {
  get {
    return
  }
}
var SYS_fstatfs: Int32 {
  get {
    return
  }
}
var SYS_fstatfs64: Int32 {
  get {
    return
  }
}
var SYS_ftruncate: Int32 {
  get {
    return
  }
}
var SYS_fsync_nocancel: Int32 {
  get {
    return
  }
}
var SYS_fstat_extended: Int32 {
  get {
    return
  }
}
var SYS_fstat64_extended: Int32 {
  get {
    return
  }
}
var SYS_fstatat64: Int32 {
  get {
    return
  }
}
var SYS_fstatat: Int32 {
  get {
    return
  }
}
var SYS_fsgetpath: Int32 {
  get {
    return
  }
}
var SYS_fsetxattr: Int32 {
  get {
    return
  }
}
var SYS_fstat64: Int32 {
  get {
    return
  }
}
var SYS_fstat: Int32 {
  get {
    return
  }
}
var SYS_fpathconf: Int32 {
  get {
    return
  }
}
var SYS_fork: Int32 {
  get {
    return
  }
}
var SYS_fsetattrlist: Int32 {
  get {
    return
  }
}
var SYS_fremovexattr: Int32 {
  get {
    return
  }
}
var SYS_fsctl: Int32 {
  get {
    return
  }
}
var SYS___pthread_sigmask: Int32 {
  get {
    return
  }
}
var SYS___semwait_signal: Int32 {
  get {
    return
  }
}
var SYS___pthread_kill: Int32 {
  get {
    return
  }
}
var SYS___pthread_markcancel: Int32 {
  get {
    return
  }
}
var SYS___sigwait_nocancel: Int32 {
  get {
    return
  }
}
var SYS_accept: Int32 {
  get {
    return
  }
}
var SYS___sigwait: Int32 {
  get {
    return
  }
}
var SYS___semwait_signal_nocancel: Int32 {
  get {
    return
  }
}
var SYS___mac_syscall: Int32 {
  get {
    return
  }
}
var SYS___old_semwait_signal: Int32 {
  get {
    return
  }
}
var SYS___mac_set_link: Int32 {
  get {
    return
  }
}
var SYS___mac_set_proc: Int32 {
  get {
    return
  }
}
var SYS___pthread_chdir: Int32 {
  get {
    return
  }
}
var SYS___pthread_fchdir: Int32 {
  get {
    return
  }
}
var SYS___old_semwait_signal_nocancel: Int32 {
  get {
    return
  }
}
var SYS___pthread_canceled: Int32 {
  get {
    return
  }
}
var SYS___mac_get_proc: Int32 {
  get {
    return
  }
}
var SYS___mac_getfsstat: Int32 {
  get {
    return
  }
}
var SYS___mac_get_mount: Int32 {
  get {
    return
  }
}
var SYS___mac_get_pid: Int32 {
  get {
    return
  }
}
var SYS___mac_set_file: Int32 {
  get {
    return
  }
}
var SYS___mac_set_lctx: Int32 {
  get {
    return
  }
}
var SYS___mac_mount: Int32 {
  get {
    return
  }
}
var SYS___mac_set_fd: Int32 {
  get {
    return
  }
}
var SYS___mac_execve: Int32 {
  get {
    return
  }
}
var SYS___mac_get_fd: Int32 {
  get {
    return
  }
}
var SYS_MAXSYSCALL: Int32 {
  get {
    return
  }
}
var SYS___disable_threadsignal: Int32 {
  get {
    return
  }
}
var SYS___mac_get_lctx: Int32 {
  get {
    return
  }
}
var SYS___mac_get_link: Int32 {
  get {
    return
  }
}
var SYS___mac_get_file: Int32 {
  get {
    return
  }
}
var SYS___mac_get_lcid: Int32 {
  get {
    return
  }
}
var SYS_chown: Int32 {
  get {
    return
  }
}
var SYS_chmod_extended: Int32 {
  get {
    return
  }
}
var SYS_chmod: Int32 {
  get {
    return
  }
}
var SYS_chflags: Int32 {
  get {
    return
  }
}
var SYS_chdir: Int32 {
  get {
    return
  }
}
var SYS_close_nocancel: Int32 {
  get {
    return
  }
}
var SYS_close: Int32 {
  get {
    return
  }
}
var SYS_chud: Int32 {
  get {
    return
  }
}
var SYS_chroot: Int32 {
  get {
    return
  }
}
var SYS_bsdthread_create: Int32 {
  get {
    return
  }
}
var SYS_bind: Int32 {
  get {
    return
  }
}
var SYS_auditon: Int32 {
  get {
    return
  }
}
var SYS_auditctl: Int32 {
  get {
    return
  }
}
var SYS_change_fdguard_np: Int32 {
  get {
    return
  }
}
var SYS_bsdthread_terminate: Int32 {
  get {
    return
  }
}
var SYS_bsdthread_register: Int32 {
  get {
    return
  }
}
var SYS_bsdthread_ctl: Int32 {
  get {
    return
  }
}
var SYS_aio_write: Int32 {
  get {
    return
  }
}
var SYS_aio_suspend_nocancel: Int32 {
  get {
    return
  }
}
var SYS_aio_suspend: Int32 {
  get {
    return
  }
}
var SYS_aio_return: Int32 {
  get {
    return
  }
}
var SYS_audit_session_self: Int32 {
  get {
    return
  }
}
var SYS_audit_session_port: Int32 {
  get {
    return
  }
}
var SYS_audit_session_join: Int32 {
  get {
    return
  }
}
var SYS_audit: Int32 {
  get {
    return
  }
}
var SYS_acct: Int32 {
  get {
    return
  }
}
var SYS_access_extended: Int32 {
  get {
    return
  }
}
var SYS_access: Int32 {
  get {
    return
  }
}
var SYS_accept_nocancel: Int32 {
  get {
    return
  }
}
var SYS_aio_fsync: Int32 {
  get {
    return
  }
}
var SYS_aio_read: Int32 {
  get {
    return
  }
}
var SYS_aio_error: Int32 {
  get {
    return
  }
}
var SYS_aio_cancel: Int32 {
  get {
    return
  }
}
var SYS_adjtime: Int32 {
  get {
    return
  }
}
var STDERR_FILENO: Int32 {
  get {
    return
  }
}
var STDIN_FILENO: Int32 {
  get {
    return
  }
}
var STDOUT_FILENO: Int32 {
  get {
    return
  }
}
var ST_NOSUID: Int32 {
  get {
    return
  }
}
var SS_ONSTACK: Int32 {
  get {
    return
  }
}
var SRCHFS_SKIPLINKS: Int32 {
  get {
    return
  }
}
var SRCHFS_SKIPPACKAGES: Int32 {
  get {
    return
  }
}
var SRCHFS_START: Int32 {
  get {
    return
  }
}
var SRCHFS_VALIDOPTIONSMASK: UInt32 {
  get {
    return
  }
}
var SRUN: Int32 {
  get {
    return
  }
}
var SSIZE_MAX: Int {
  get {
    return
  }
}
var SSLEEP: Int32 {
  get {
    return
  }
}
var SSTOP: Int32 {
  get {
    return
  }
}
var SS_DISABLE: Int32 {
  get {
    return
  }
}
var SYNC_POLICY_REVERSED: Int32 {
  get {
    return
  }
}
var SYNC_POLICY_ORDER_MASK: Int32 {
  get {
    return
  }
}
var SYNC_VOLUME_WAIT: Int32 {
  get {
    return
  }
}
var SYNC_VOLUME_FULLSYNC: Int32 {
  get {
    return
  }
}
var SYSPROTO_CONTROL: Int32 {
  get {
    return
  }
}
var SYSTEM_CLOCK: Int32 {
  get {
    return
  }
}
var SYSPROTO_EVENT: Int32 {
  get {
    return
  }
}
var SWITCH_OPTION_DEPRESS: Int32 {
  get {
    return
  }
}
var SV_SIGINFO: Int32 {
  get {
    return
  }
}
var SWITCH_OPTION_WAIT: Int32 {
  get {
    return
  }
}
var SWITCH_OPTION_NONE: Int32 {
  get {
    return
  }
}
var SYNC_POLICY_FIXED_PRIORITY: Int32 {
  get {
    return
  }
}
var SYNC_POLICY_FIFO: Int32 {
  get {
    return
  }
}
var SYNC_POLICY_MAX: Int32 {
  get {
    return
  }
}
var SUPERUSER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: String {
  get {
    return
  }
}
var SUPERPAGE_SIZE_ANY: Int32 {
  get {
    return
  }
}
var SV_INTERRUPT: Int32 {
  get {
    return
  }
}
var SUPERUSER_SET_SFLAGS_MASK_CONTROL_ENTRY: String {
  get {
    return
  }
}
var SV_NODEFER: Int32 {
  get {
    return
  }
}
var SV_NOCLDSTOP: Int32 {
  get {
    return
  }
}
var SV_RESETHAND: Int32 {
  get {
    return
  }
}
var SV_ONSTACK: Int32 {
  get {
    return
  }
}
var SUBCMDMASK: Int32 {
  get {
    return
  }
}
var SUBCMDSHIFT: Int32 {
  get {
    return
  }
}
var ST_RDONLY: Int32 {
  get {
    return
  }
}
var SUPERPAGE_SIZE_2MB: Int32 {
  get {
    return
  }
}
var SUPERPAGE_NONE: Int32 {
  get {
    return
  }
}
var MAXFRAG: Int32 {
  get {
    return
  }
}
var P_DIRTY_DEFER: Int32 {
  get {
    return
  }
}
var MAXHOSTNAMELEN: Int32 {
  get {
    return
  }
}
var P_DIRTY_DEFER_IN_PROGRESS: Int32 {
  get {
    return
  }
}
var P_DIRTY: Int32 {
  get {
    return
  }
}
var MAXINTERP: Int32 {
  get {
    return
  }
}
var P_DIRTY_ALLOW_IDLE_EXIT: Int32 {
  get {
    return
  }
}
var MAXLOGNAME: Int32 {
  get {
    return
  }
}
var P_DIRTY_BUSY: Int32 {
  get {
    return
  }
}
var MAXCOMLEN: Int32 {
  get {
    return
  }
}
var P_DELAYIDLESLEEP: Int32 {
  get {
    return
  }
}
var P_DEPENDENCY_CAPABLE: Int32 {
  get {
    return
  }
}
var P_CONTINUED: Int32 {
  get {
    return
  }
}
var MAXDOMNAMELEN: Int32 {
  get {
    return
  }
}
var MAXFLOAT: Float {
  get {
    return
  }
}
var P_CONTROLT: Int32 {
  get {
    return
  }
}
var P_DIRTY_TERMINATED: Int32 {
  get {
    return
  }
}
var P_DIRTY_TRACK: Int32 {
  get {
    return
  }
}
var P_DISABLE_ASLR: Int32 {
  get {
    return
  }
}
var P_DIRTY_MARKED: Int32 {
  get {
    return
  }
}
var P_DIRTY_SHUTDOWN: Int32 {
  get {
    return
  }
}
var MATTR_VAL_GET_INFO: Int32 {
  get {
    return
  }
}
var MATTR_VAL_ICACHE_FLUSH: Int32 {
  get {
    return
  }
}
var P_DIRTY_LAUNCH_IN_PROGRESS: Int32 {
  get {
    return
  }
}
var MATTR_VAL_OFF: Int32 {
  get {
    return
  }
}
var MATTR_VAL_ON: Int32 {
  get {
    return
  }
}
var MATTR_REPLICATE: Int32 {
  get {
    return
  }
}
var P_NOREMOTEHANG: UInt32 {
  get {
    return
  }
}
var MATTR_VAL_CACHE_FLUSH: Int32 {
  get {
    return
  }
}
var P_NOSHLIB: Int32 {
  get {
    return
  }
}
var P_NOCLDSTOP: Int32 {
  get {
    return
  }
}
var MATTR_VAL_CACHE_SYNC: Int32 {
  get {
    return
  }
}
var P_NOCLDWAIT: Int32 {
  get {
    return
  }
}
var MATTR_VAL_DCACHE_FLUSH: Int32 {
  get {
    return
  }
}
var MATTR_VAL_GET: Int32 {
  get {
    return
  }
}
var MATH_ERREXCEPT: Int32 {
  get {
    return
  }
}
var MATH_ERRNO: Int32 {
  get {
    return
  }
}
var P_LP64: Int32 {
  get {
    return
  }
}
var P_INMEM: Int32 {
  get {
    return
  }
}
var MATTR_CACHE: Int32 {
  get {
    return
  }
}
var P_EXEC: Int32 {
  get {
    return
  }
}
var MATTR_MIGRATE: Int32 {
  get {
    return
  }
}
var P_FORCEQUOTA: Int32 {
  get {
    return
  }
}
var MAP_NORESERVE: Int32 {
  get {
    return
  }
}
var P_FSTRACE: Int32 {
  get {
    return
  }
}
var MAP_PRIVATE: Int32 {
  get {
    return
  }
}
var P_RESV7: Int32 {
  get {
    return
  }
}
var P_RESV11: Int32 {
  get {
    return
  }
}
var MAP_RENAME: Int32 {
  get {
    return
  }
}
var P_RESV6: Int32 {
  get {
    return
  }
}
var P_REBOOT: Int32 {
  get {
    return
  }
}
var MAP_RESERVED0080: Int32 {
  get {
    return
  }
}
var MAP_SHARED: Int32 {
  get {
    return
  }
}
var P_RESV10: Int32 {
  get {
    return
  }
}
var P_PPWAIT: Int32 {
  get {
    return
  }
}
var MAP_MEM_WCOMB: Int32 {
  get {
    return
  }
}
var MAP_MEM_WTHRU: Int32 {
  get {
    return
  }
}
var P_PROFIL: Int32 {
  get {
    return
  }
}
var MAP_NOCACHE: Int32 {
  get {
    return
  }
}
var P_NOSWAP: Int32 {
  get {
    return
  }
}
var MAP_NOEXTEND: Int32 {
  get {
    return
  }
}
var P_PHYSIO: Int32 {
  get {
    return
  }
}
var P_OWEUPC: Int32 {
  get {
    return
  }
}
var P_TRANSLATED: Int32 {
  get {
    return
  }
}
var MCAST_LEAVE_GROUP: Int32 {
  get {
    return
  }
}
var P_WEXIT: Int32 {
  get {
    return
  }
}
var MCAST_JOIN_SOURCE_GROUP: Int32 {
  get {
    return
  }
}
var P_TRACED: Int32 {
  get {
    return
  }
}
var MCAST_UNBLOCK_SOURCE: Int32 {
  get {
    return
  }
}
var P_TIMEOUT: Int32 {
  get {
    return
  }
}
var MCAST_LEAVE_SOURCE_GROUP: Int32 {
  get {
    return
  }
}
var P_THCWD: Int32 {
  get {
    return
  }
}
var MCAST_EXCLUDE: Int32 {
  get {
    return
  }
}
var P_SYSTEM: Int32 {
  get {
    return
  }
}
var MCAST_BLOCK_SOURCE: Int32 {
  get {
    return
  }
}
var P_SSTEP: Int32 {
  get {
    return
  }
}
var P_SUGID: Int32 {
  get {
    return
  }
}
var MCAST_JOIN_GROUP: Int32 {
  get {
    return
  }
}
var P_SELECT: Int32 {
  get {
    return
  }
}
var MCAST_INCLUDE: Int32 {
  get {
    return
  }
}
var P_RESV9: Int32 {
  get {
    return
  }
}
var QF_USERS_PER_GB: Int32 {
  get {
    return
  }
}
var QF_MIN_USERS: Int32 {
  get {
    return
  }
}
var QF_STRING_TAG: String {
  get {
    return
  }
}
var MB_LEN_MAX: Int32 {
  get {
    return
  }
}
var MBIGCLSHIFT: Int32 {
  get {
    return
  }
}
var QF_MIN_GROUPS: Int32 {
  get {
    return
  }
}
var MAX_MBUF_CNAME: Int32 {
  get {
    return
  }
}
var QF_GROUPS_PER_GB: Int32 {
  get {
    return
  }
}
var MAX_TCPOPTLEN: Int32 {
  get {
    return
  }
}
var MAX_SACK_BLKS: Int32 {
  get {
    return
  }
}
var P_tmpdir: String {
  get {
    return
  }
}
var QUAD_MAX: Int64 {
  get {
    return
  }
}
var MAX_CANON: Int32 {
  get {
    return
  }
}
var QOS_MIN_RELATIVE_PRIORITY: Int32 {
  get {
    return
  }
}
var MAX_KCTL_NAME: Int32 {
  get {
    return
  }
}
var MAX_INPUT: Int32 {
  get {
    return
  }
}
var MAX_AUDITSTRING_LEN: Int32 {
  get {
    return
  }
}
var MAXUPRC: Int32 {
  get {
    return
  }
}
var QF_VERSION: Int32 {
  get {
    return
  }
}
var MAX_AUDIT_RECORDS: Int32 {
  get {
    return
  }
}
var MAXQUOTAS: Int32 {
  get {
    return
  }
}
var Q_SETQUOTA: Int32 {
  get {
    return
  }
}
var MAXPRI: Int32 {
  get {
    return
  }
}
var Q_QUOTASTAT: Int32 {
  get {
    return
  }
}
var Q_QUOTAON: Int32 {
  get {
    return
  }
}
var MAXTHREADNAMESIZE: Int32 {
  get {
    return
  }
}
var Q_QUOTAOFF: Int32 {
  get {
    return
  }
}
var MAXSYMLINKS: Int32 {
  get {
    return
  }
}
var MAXPATHLEN: Int32 {
  get {
    return
  }
}
var Q_GETQUOTA: Int32 {
  get {
    return
  }
}
var MAXNAMLEN: Int32 {
  get {
    return
  }
}
var QUOTAOPSNAME: String {
  get {
    return
  }
}
var QUOTAGROUP: String {
  get {
    return
  }
}
var QUOTAFILENAME: String {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_SYNC: Int32 {
  get {
    return
  }
}
var PSEM_ALLOCATED: Int32 {
  get {
    return
  }
}
var PSEM_DEFINED: Int32 {
  get {
    return
  }
}
var PSEM_INCREATE: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_NO_CHANGE: Int32 {
  get {
    return
  }
}
var PSEM_INDELETE: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_PURGE: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_PSHM: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_FLUSH: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_SOCKET: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_DATA_FLUSH_ALL: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_TEMPORARY: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_VNODE: Int32 {
  get {
    return
  }
}
var PSEMNAMLEN: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_SYMMETRIC: Int32 {
  get {
    return
  }
}
var PSHMNAMLEN: Int32 {
  get {
    return
  }
}
var PSHM_ALLOCATED: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_SYNC: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_INVALID: Int32 {
  get {
    return
  }
}
var PSHM_DEFINED: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_NONE: Int32 {
  get {
    return
  }
}
var PSHM_INCREATE: Int32 {
  get {
    return
  }
}
var PSEM_INUSE: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_CALL: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_COPY_DELAY: Int32 {
  get {
    return
  }
}
var PSEM_MAPPED: Int32 {
  get {
    return
  }
}
var PSEM_NONE: Int32 {
  get {
    return
  }
}
var PSEM_REMOVED: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_BEHAVIOR_INFO: Int32 {
  get {
    return
  }
}
var PSOCK: Int32 {
  get {
    return
  }
}
var PSPIN: Int32 {
  get {
    return
  }
}
var PSWP: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_ATTRIBUTE_INFO: Int32 {
  get {
    return
  }
}
var PSHM_INUSE: Int32 {
  get {
    return
  }
}
var PSHM_INDELETE: Int32 {
  get {
    return
  }
}
var MEMBER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: String {
  get {
    return
  }
}
var PSHM_MAPPED: Int32 {
  get {
    return
  }
}
var MEMBER_SET_SFLAGS_MASK_CONTROL_ENTRY: String {
  get {
    return
  }
}
var PSHM_NONE: Int32 {
  get {
    return
  }
}
var MCS_PURGING: Int32 {
  get {
    return
  }
}
var MDMBUF: Int32 {
  get {
    return
  }
}
var PSHM_REMOVED: Int32 {
  get {
    return
  }
}
var MCS_OFFLINE: Int32 {
  get {
    return
  }
}
var MCS_ONLINE: Int32 {
  get {
    return
  }
}
var PTHREAD_CREATE_DETACHED: Int32 {
  get {
    return
  }
}
var MCL_CURRENT: Int32 {
  get {
    return
  }
}
var PTHREAD_CREATE_JOINABLE: Int32 {
  get {
    return
  }
}
var MCL_FUTURE: Int32 {
  get {
    return
  }
}
var PTHREAD_DESTRUCTOR_ITERATIONS: Int32 {
  get {
    return
  }
}
var MCS_DISABLED: Int32 {
  get {
    return
  }
}
var PTHREAD_CANCEL_ASYNCHRONOUS: Int32 {
  get {
    return
  }
}
var MCLSHIFT: Int32 {
  get {
    return
  }
}
var PTHREAD_CANCEL_DEFERRED: Int32 {
  get {
    return
  }
}
var MCAST_UNDEFINED: Int32 {
  get {
    return
  }
}
var PTHREAD_CANCEL_DISABLE: Int32 {
  get {
    return
  }
}
var PTHREAD_CANCEL_ENABLE: Int32 {
  get {
    return
  }
}
var PTHREAD_KEYS_MAX: Int32 {
  get {
    return
  }
}
var MINCORE_INCORE: Int32 {
  get {
    return
  }
}
var MINBUCKET: Int32 {
  get {
    return
  }
}
var PTHREAD_INHERIT_SCHED: Int32 {
  get {
    return
  }
}
var MINARCS: Int32 {
  get {
    return
  }
}
var PTHREAD_MUTEX_ERRORCHECK: Int32 {
  get {
    return
  }
}
var PTHREAD_MUTEX_DEFAULT: Int32 {
  get {
    return
  }
}
var MIG_TYPE_ERROR: Int32 {
  get {
    return
  }
}
var MIG_TRAILER_ERROR: Int32 {
  get {
    return
  }
}
var PTHREAD_EXPLICIT_SCHED: Int32 {
  get {
    return
  }
}
var MIG_SERVER_DIED: Int32 {
  get {
    return
  }
}
var PTHREAD_PRIO_NONE: Int32 {
  get {
    return
  }
}
var PTHREAD_PRIO_INHERIT: Int32 {
  get {
    return
  }
}
var MIG_REPLY_MISMATCH: Int32 {
  get {
    return
  }
}
var PTHREAD_PROCESS_PRIVATE: Int32 {
  get {
    return
  }
}
var MIG_REMOTE_ERROR: Int32 {
  get {
    return
  }
}
var PTHREAD_PRIO_PROTECT: Int32 {
  get {
    return
  }
}
var MIG_NO_REPLY: Int32 {
  get {
    return
  }
}
var MIG_EXCEPTION: Int32 {
  get {
    return
  }
}
var PTHREAD_MUTEX_NORMAL: Int32 {
  get {
    return
  }
}
var MIG_BAD_ID: Int32 {
  get {
    return
  }
}
var MIG_BAD_ARGUMENTS: Int32 {
  get {
    return
  }
}
var PTHREAD_MUTEX_RECURSIVE: Int32 {
  get {
    return
  }
}
var MIG_ARRAY_TOO_LARGE: Int32 {
  get {
    return
  }
}
var PTHREAD_STACK_MIN: Int32 {
  get {
    return
  }
}
var MFSTYPENAMELEN: Int32 {
  get {
    return
  }
}
var PTHREAD_SCOPE_SYSTEM: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_TERMINATE_IDLE: Int32 {
  get {
    return
  }
}
var MFSNAMELEN: Int32 {
  get {
    return
  }
}
var PTRDIFF_MAX: Int64 {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_NONE: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_DIRTY: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_ANYTHING: Int32 {
  get {
    return
  }
}
var PTHREAD_PROCESS_SHARED: Int32 {
  get {
    return
  }
}
var PTHREAD_SCOPE_PROCESS: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_RETURN_ALL: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_RESPECT_CACHE: Int32 {
  get {
    return
  }
}
var P_AFFINITY: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_RELEASE_NO_OP: Int32 {
  get {
    return
  }
}
var P_ADVLOCK: Int32 {
  get {
    return
  }
}
var PZERO: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_PERFORMANCE_INFO: Int32 {
  get {
    return
  }
}
var P_CLASSIC: Int32 {
  get {
    return
  }
}
var P_CHECKOPENEVT: Int32 {
  get {
    return
  }
}
var PVFS: Int32 {
  get {
    return
  }
}
var PUSER: Int32 {
  get {
    return
  }
}
var PTTYBLOCK: Int32 {
  get {
    return
  }
}
var PWAIT: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_IO_SYNC: Int32 {
  get {
    return
  }
}
var PVM: Int32 {
  get {
    return
  }
}
var MEMORY_OBJECT_INFO_MAX: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_MEMORY: Int32 {
  get {
    return
  }
}
var PROC_PIDFILEPORTPSHMINFO: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_NOTIFY: Int32 {
  get {
    return
  }
}
var PROC_PIDFILEPORTPIPEINFO: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_REPLY: Int32 {
  get {
    return
  }
}
var PROC_PIDFILEPORTSOCKETINFO: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_RIGHT: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_RT_OOL_SIZE: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_TRAILER: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_TYPE: Int32 {
  get {
    return
  }
}
var MACH_RCV_VOUCHER: Int32 {
  get {
    return
  }
}
var PROC_PIDLISTFDS: Int32 {
  get {
    return
  }
}
var MACH_SEND_ALWAYS: Int32 {
  get {
    return
  }
}
var PROC_PIDFILEPORTVNODEPATHINFO: Int32 {
  get {
    return
  }
}
var MACH_SEND_IMPORTANCE: Int32 {
  get {
    return
  }
}
var MACH_SEND_INTERRUPT: Int32 {
  get {
    return
  }
}
var MACH_SEND_INTERRUPTED: Int32 {
  get {
    return
  }
}
var PROC_PIDLISTTHREADS: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_DATA: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_DEST: Int32 {
  get {
    return
  }
}
var PROC_PIDLISTFILEPORTS: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_HEADER: Int32 {
  get {
    return
  }
}
var PROC_PIDPATHINFO_SIZE: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_CTX: Int32 {
  get {
    return
  }
}
var PROC_PIDREGIONINFO: Int32 {
  get {
    return
  }
}
var PROC_PIDPATHINFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_LABELS: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_NULL: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_SENDER: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_SEQNO: Int32 {
  get {
    return
  }
}
var PROC_PIDREGIONPATHINFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_PORT_CHANGED: Int32 {
  get {
    return
  }
}
var PROC_PIDTASKINFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_PORT_DIED: Int32 {
  get {
    return
  }
}
var MACH_RCV_SCATTER_SMALL: Int32 {
  get {
    return
  }
}
var PROC_PIDTASKALLINFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_TIMED_OUT: Int32 {
  get {
    return
  }
}
var MACH_RCV_TIMEOUT: Int32 {
  get {
    return
  }
}
var PROC_PIDTHREADID64INFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_TOO_LARGE: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_AUDIT: Int32 {
  get {
    return
  }
}
var PROC_PIDTBSDINFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_TRAILER_AV: Int32 {
  get {
    return
  }
}
var PROC_PIDTHREADPATHINFO: Int32 {
  get {
    return
  }
}
var PROC_PIDTHREADINFO: Int32 {
  get {
    return
  }
}
var PROC_PIDVNODEPATHINFO: Int32 {
  get {
    return
  }
}
var PROC_PIDT_SHORTBSDINFO: Int32 {
  get {
    return
  }
}
var PROC_PID_RUSAGE_SIZE: Int32 {
  get {
    return
  }
}
var PROC_PID_RUSAGE: Int32 {
  get {
    return
  }
}
var PROC_PIDWORKQUEUEINFO: Int32 {
  get {
    return
  }
}
var PROC_RUID_ONLY: Int32 {
  get {
    return
  }
}
var PROC_REGION_SUBMAP: Int32 {
  get {
    return
  }
}
var PROC_REGION_SHARED: Int32 {
  get {
    return
  }
}
var MACH_SEND_TIMEOUT: Int32 {
  get {
    return
  }
}
var PROC_PPID_ONLY: Int32 {
  get {
    return
  }
}
var MACH_SEND_TIMED_OUT: Int32 {
  get {
    return
  }
}
var PROC_SELFSET_THREADNAME: Int32 {
  get {
    return
  }
}
var MACH_SEND_TRAILER: Int32 {
  get {
    return
  }
}
var PROC_SELFSET_PCONTROL: Int32 {
  get {
    return
  }
}
var MACH_SEND_TOO_LARGE: Int32 {
  get {
    return
  }
}
var PROC_SELFSET_DELAYIDLESLEEP: Int32 {
  get {
    return
  }
}
var MACH_TASK_BASIC_INFO: Int32 {
  get {
    return
  }
}
var PROC_UID_ONLY: Int32 {
  get {
    return
  }
}
var PROT_EXEC: Int32 {
  get {
    return
  }
}
var PROC_TTY_ONLY: Int32 {
  get {
    return
  }
}
var PROC_SELFSET_VMRSRCOWNER: Int32 {
  get {
    return
  }
}
var MACH_SEND_IN_PROGRESS: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_ATALK: Int32 {
  get {
    return
  }
}
var MACH_SEND_INVALID_VOUCHER: Int32 {
  get {
    return
  }
}
var PROT_WRITE: Int32 {
  get {
    return
  }
}
var MACH_SEND_MSG_TOO_SMALL: Int32 {
  get {
    return
  }
}
var PROT_READ: Int32 {
  get {
    return
  }
}
var MACH_SEND_MSG: Int32 {
  get {
    return
  }
}
var PROT_NONE: Int32 {
  get {
    return
  }
}
var MACH_SEND_NOIMPORTANCE: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_PSEM: Int32 {
  get {
    return
  }
}
var MACH_SEND_NODENAP: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_PIPE: Int32 {
  get {
    return
  }
}
var MACH_SEND_NO_BUFFER: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_KQUEUE: Int32 {
  get {
    return
  }
}
var MACH_SEND_NOTIFY: Int32 {
  get {
    return
  }
}
var PROX_FDTYPE_FSEVENTS: Int32 {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_GET: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_6: Int32 {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_SET: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_7: Int32 {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_TRACK: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_4: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_ALLOWS_IDLE_EXIT: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_5: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_ALLOW_IDLE_EXIT: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_MAX_ALLOWED: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_DEFER: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_MIN_REQUIRED: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_IS_DIRTY: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_8: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_LAUNCH_IN_PROGRESS: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_9: Int32 {
  get {
    return
  }
}
var MACH_ZONE_NAME_MAX_LEN: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_LAUNCH_IS_IN_PROGRESS: Int32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_0: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_TRACK: Int32 {
  get {
    return
  }
}
var PROC_DIRTY_TRACKED: Int32 {
  get {
    return
  }
}
var PROC_FI_GUARD_CLOSE: UInt32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_2: Int32 {
  get {
    return
  }
}
var PROC_FI_GUARD_DUP: UInt32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_3: Int32 {
  get {
    return
  }
}
var PROC_FI_GUARD_FILEPORT: UInt32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_1: Int32 {
  get {
    return
  }
}
var PROC_FI_GUARD_SOCKET_IPC: UInt32 {
  get {
    return
  }
}
var MAC_OS_X_VERSION_10_10: Int32 {
  get {
    return
  }
}
var PROC_FLAG_ADAPTIVE: Int32 {
  get {
    return
  }
}
var MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: Int32 {
  get {
    return
  }
}
var PROC_FLAG_ADAPTIVE_IMPORTANT: Int32 {
  get {
    return
  }
}
var MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: Int32 {
  get {
    return
  }
}
var PROC_FLAG_APPLICATION: Int32 {
  get {
    return
  }
}
var PROC_FLAG_CTTY: Int32 {
  get {
    return
  }
}
var PROC_FLAG_CONTROLT: Int32 {
  get {
    return
  }
}
var PROC_FLAG_DARWINBG: Int32 {
  get {
    return
  }
}
var PROC_FLAG_EXEC: Int32 {
  get {
    return
  }
}
var PROC_FLAG_EXT_DARWINBG: Int32 {
  get {
    return
  }
}
var PROC_FLAG_IMPORTANCE_DONOR: Int32 {
  get {
    return
  }
}
var PROC_FLAG_INEXIT: Int32 {
  get {
    return
  }
}
var PROC_FLAG_IOS_APPLEDAEMON: Int32 {
  get {
    return
  }
}
var PROC_FLAG_IOS_APPLICATION: Int32 {
  get {
    return
  }
}
var PROC_FLAG_IOS_IMPPROMOTION: Int32 {
  get {
    return
  }
}
var PROC_FLAG_LP64: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PA_SUSP: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PA_THROTTLE: Int32 {
  get {
    return
  }
}
var MAP_MEM_ONLY: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PC_MASK: Int32 {
  get {
    return
  }
}
var MAP_MEM_NOOP: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PC_KILL: Int32 {
  get {
    return
  }
}
var MAP_MEM_NAMED_REUSE: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PC_THROTTLE: Int32 {
  get {
    return
  }
}
var MAP_MEM_NAMED_CREATE: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PC_SUSP: Int32 {
  get {
    return
  }
}
var MAP_MEM_IO: Int32 {
  get {
    return
  }
}
var MAP_MEM_VM_SHARE: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PSUGID: Int32 {
  get {
    return
  }
}
var MAP_MEM_VM_COPY: Int32 {
  get {
    return
  }
}
var PROC_FLAG_PPWAIT: Int32 {
  get {
    return
  }
}
var MAP_MEM_USE_DATA_ADDR: Int32 {
  get {
    return
  }
}
var PROC_FLAG_SUPPRESSED: Int32 {
  get {
    return
  }
}
var MAP_MEM_PURGABLE: Int32 {
  get {
    return
  }
}
var PROC_FLAG_SLEADER: Int32 {
  get {
    return
  }
}
var PROC_FLAG_THCWD: Int32 {
  get {
    return
  }
}
var MAP_FIXED: Int32 {
  get {
    return
  }
}
var MAP_FILE: Int32 {
  get {
    return
  }
}
var PROC_FLAG_SYSTEM: Int32 {
  get {
    return
  }
}
var PROC_FP_CLEXEC: Int32 {
  get {
    return
  }
}
var PROC_FLAG_TRACED: Int32 {
  get {
    return
  }
}
var MAP_COPY: Int32 {
  get {
    return
  }
}
var PROC_FP_SHARED: Int32 {
  get {
    return
  }
}
var MAP_MEM_INNERWBACK: Int32 {
  get {
    return
  }
}
var PROC_FP_GUARDED: Int32 {
  get {
    return
  }
}
var MAP_MEM_COPYBACK: Int32 {
  get {
    return
  }
}
var PROC_KQUEUE_SLEEP: Int32 {
  get {
    return
  }
}
var MAP_JIT: Int32 {
  get {
    return
  }
}
var PROC_PGRP_ONLY: Int32 {
  get {
    return
  }
}
var PROC_KQUEUE_SELECT: Int32 {
  get {
    return
  }
}
var MAP_HASSEMAPHORE: Int32 {
  get {
    return
  }
}
var MALLOC_ADMIN_REGION_RANGE_TYPE: Int32 {
  get {
    return
  }
}
var PROC_PIDFDATALKINFO: Int32 {
  get {
    return
  }
}
var PROC_PIDFDKQUEUEINFO: Int32 {
  get {
    return
  }
}
var MAGIC: String {
  get {
    return
  }
}
var MADV_ZERO_WIRED_PAGES: Int32 {
  get {
    return
  }
}
var MALLOC_ZONE_SPECIFIC_FLAGS: Int32 {
  get {
    return
  }
}
var MAP_ANON: Int32 {
  get {
    return
  }
}
var PROC_PIDFDPIPEINFO: Int32 {
  get {
    return
  }
}
var MALLOC_PTR_REGION_RANGE_TYPE: Int32 {
  get {
    return
  }
}
var PROC_PIDFDPSEMINFO: Int32 {
  get {
    return
  }
}
var MALLOC_PTR_IN_USE_RANGE_TYPE: Int32 {
  get {
    return
  }
}
var MADV_FREE_REUSABLE: Int32 {
  get {
    return
  }
}
var PROC_PIDFDPSHMINFO: Int32 {
  get {
    return
  }
}
var MADV_FREE: Int32 {
  get {
    return
  }
}
var MADV_DONTNEED: Int32 {
  get {
    return
  }
}
var PROC_PIDFDSOCKETINFO: Int32 {
  get {
    return
  }
}
var MADV_CAN_REUSE: Int32 {
  get {
    return
  }
}
var MADV_SEQUENTIAL: Int32 {
  get {
    return
  }
}
var MADV_WILLNEED: Int32 {
  get {
    return
  }
}
var MADV_RANDOM: Int32 {
  get {
    return
  }
}
var PROC_PIDFDVNODEINFO: Int32 {
  get {
    return
  }
}
var MADV_NORMAL: Int32 {
  get {
    return
  }
}
var PROC_PIDFDVNODEPATHINFO: Int32 {
  get {
    return
  }
}
var MADV_FREE_REUSE: Int32 {
  get {
    return
  }
}
var SCNiLEAST16: String {
  get {
    return
  }
}
var SCNiLEAST32: String {
  get {
    return
  }
}
var SCNiFAST16: String {
  get {
    return
  }
}
var SCNiFAST32: String {
  get {
    return
  }
}
var SCNi32: String {
  get {
    return
  }
}
var SCNdPTR: String {
  get {
    return
  }
}
var SCNi16: String {
  get {
    return
  }
}
var SCNdLEAST16: String {
  get {
    return
  }
}
var SCNdLEAST32: String {
  get {
    return
  }
}
var SCNdFAST32: String {
  get {
    return
  }
}
var SCNu16: String {
  get {
    return
  }
}
var SCNu32: String {
  get {
    return
  }
}
var SCNoPTR: String {
  get {
    return
  }
}
var SCNoLEAST32: String {
  get {
    return
  }
}
var SCNoLEAST16: String {
  get {
    return
  }
}
var SCNoFAST16: String {
  get {
    return
  }
}
var SCNoFAST32: String {
  get {
    return
  }
}
var SCNiPTR: String {
  get {
    return
  }
}
var SCNo32: String {
  get {
    return
  }
}
var SCNo16: String {
  get {
    return
  }
}
var SCNxFAST32: String {
  get {
    return
  }
}
var SCNxFAST16: String {
  get {
    return
  }
}
var SCNx16: String {
  get {
    return
  }
}
var SCNx32: String {
  get {
    return
  }
}
var SCNuPTR: String {
  get {
    return
  }
}
var SCNuLEAST32: String {
  get {
    return
  }
}
var SCNuLEAST16: String {
  get {
    return
  }
}
var SCNuFAST32: String {
  get {
    return
  }
}
var SCNuFAST16: String {
  get {
    return
  }
}
var SEM_R: Int32 {
  get {
    return
  }
}
var SEM_A: Int32 {
  get {
    return
  }
}
var SEGV_NOOP: Int32 {
  get {
    return
  }
}
var SEGV_MAPERR: Int32 {
  get {
    return
  }
}
var SEGV_ACCERR: Int32 {
  get {
    return
  }
}
var SEEK_SET: Int32 {
  get {
    return
  }
}
var SEEK_END: Int32 {
  get {
    return
  }
}
var SEEK_CUR: Int32 {
  get {
    return
  }
}
var SEARCHFS_MAX_SEARCHPARMS: Int32 {
  get {
    return
  }
}
var SCNxPTR: String {
  get {
    return
  }
}
var SCNxLEAST32: String {
  get {
    return
  }
}
var SCNxLEAST16: String {
  get {
    return
  }
}
var RTM_LOSING: Int32 {
  get {
    return
  }
}
var RTM_MISS: Int32 {
  get {
    return
  }
}
var RTM_NEWADDR: Int32 {
  get {
    return
  }
}
var RTM_NEWMADDR: Int32 {
  get {
    return
  }
}
var RTM_GET: Int32 {
  get {
    return
  }
}
var RTM_GET2: Int32 {
  get {
    return
  }
}
var RTM_IFINFO: Int32 {
  get {
    return
  }
}
var RTM_IFINFO2: Int32 {
  get {
    return
  }
}
var RTM_LOCK: Int32 {
  get {
    return
  }
}
var RTM_CHANGE: Int32 {
  get {
    return
  }
}
var RTM_DELADDR: Int32 {
  get {
    return
  }
}
var RTM_DELETE: Int32 {
  get {
    return
  }
}
var RTM_DELMADDR: Int32 {
  get {
    return
  }
}
var RTLD_NODELETE: Int32 {
  get {
    return
  }
}
var RTLD_NOLOAD: Int32 {
  get {
    return
  }
}
var RTLD_NOW: Int32 {
  get {
    return
  }
}
var RTM_ADD: Int32 {
  get {
    return
  }
}
var RTV_SSTHRESH: Int32 {
  get {
    return
  }
}
var RUN_LVL: Int32 {
  get {
    return
  }
}
var RUSAGE_CHILDREN: Int32 {
  get {
    return
  }
}
var RUSAGE_INFO_CURRENT: Int32 {
  get {
    return
  }
}
var RTV_MTU: Int32 {
  get {
    return
  }
}
var RTV_RTT: Int32 {
  get {
    return
  }
}
var RTV_RPIPE: Int32 {
  get {
    return
  }
}
var RTV_RTTVAR: Int32 {
  get {
    return
  }
}
var RTV_SPIPE: Int32 {
  get {
    return
  }
}
var RTM_RTTUNIT: Int32 {
  get {
    return
  }
}
var RTM_VERSION: Int32 {
  get {
    return
  }
}
var RTV_EXPIRE: Int32 {
  get {
    return
  }
}
var RTV_HOPCOUNT: Int32 {
  get {
    return
  }
}
var RTM_OLDADD: Int32 {
  get {
    return
  }
}
var RTM_NEWMADDR2: Int32 {
  get {
    return
  }
}
var RTM_OLDDEL: Int32 {
  get {
    return
  }
}
var RTM_REDIRECT: Int32 {
  get {
    return
  }
}
var RTM_RESOLVE: Int32 {
  get {
    return
  }
}
var SA_USERTRAMP: Int32 {
  get {
    return
  }
}
var MACH_RCV_INVALID_TRAILER: Int32 {
  get {
    return
  }
}
var MACH_RCV_INVALID_NOTIFY: Int32 {
  get {
    return
  }
}
var SBUF_DYNSTRUCT: Int32 {
  get {
    return
  }
}
var MACH_RCV_INVALID_NAME: Int32 {
  get {
    return
  }
}
var SBUF_DYNAMIC: Int32 {
  get {
    return
  }
}
var SBUF_AUTOEXTEND: Int32 {
  get {
    return
  }
}
var MACH_RCV_INVALID_DATA: Int32 {
  get {
    return
  }
}
var SA_RESETHAND: Int32 {
  get {
    return
  }
}
var MACH_RCV_INTERRUPTED: Int32 {
  get {
    return
  }
}
var SA_ONSTACK: Int32 {
  get {
    return
  }
}
var SA_SIGINFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_INTERRUPT: Int32 {
  get {
    return
  }
}
var SA_RESTART: Int32 {
  get {
    return
  }
}
var MACH_RCV_HEADER_ERROR: Int32 {
  get {
    return
  }
}
var SA_64REGSET: Int32 {
  get {
    return
  }
}
var MACH_RCV_OVERWRITE: Int32 {
  get {
    return
  }
}
var MACH_RCV_NOTIFY: Int32 {
  get {
    return
  }
}
var R_OK: Int32 {
  get {
    return
  }
}
var MACH_RCV_MSG: Int32 {
  get {
    return
  }
}
var SA_NODEFER: Int32 {
  get {
    return
  }
}
var MACH_RCV_LARGE_IDENTITY: Int32 {
  get {
    return
  }
}
var SA_NOCLDSTOP: Int32 {
  get {
    return
  }
}
var SA_NOCLDWAIT: Int32 {
  get {
    return
  }
}
var MACH_RCV_LARGE: Int32 {
  get {
    return
  }
}
var MACH_RCV_IN_SET: Int32 {
  get {
    return
  }
}
var RUSAGE_INFO_V0: Int32 {
  get {
    return
  }
}
var RUSAGE_INFO_V2: Int32 {
  get {
    return
  }
}
var MACH_RCV_IN_PROGRESS_TIMED: Int32 {
  get {
    return
  }
}
var RUSAGE_INFO_V1: Int32 {
  get {
    return
  }
}
var RUSAGE_SELF: Int32 {
  get {
    return
  }
}
var MACH_RCV_IN_PROGRESS: Int32 {
  get {
    return
  }
}
var RUSAGE_INFO_V3: Int32 {
  get {
    return
  }
}
var MACH_RCV_INVALID_TYPE: Int32 {
  get {
    return
  }
}
var SCNd32: String {
  get {
    return
  }
}
var SCNd16: String {
  get {
    return
  }
}
var SCNdFAST16: String {
  get {
    return
  }
}
var SCM_RIGHTS: Int32 {
  get {
    return
  }
}
var SCM_CREDS: Int32 {
  get {
    return
  }
}
var MACH_PORT_TYPE_DNREQUEST: UInt32 {
  get {
    return
  }
}
var SCM_TIMESTAMP_MONOTONIC: Int32 {
  get {
    return
  }
}
var SCM_TIMESTAMP: Int32 {
  get {
    return
  }
}
var SCHED_FIFO: Int32 {
  get {
    return
  }
}
var MACH_RCV_BODY_ERROR: Int32 {
  get {
    return
  }
}
var SCHAR_MIN: Int32 {
  get {
    return
  }
}
var MACH_PORT_TYPE_SPREQUEST_DELAYED: Int32 {
  get {
    return
  }
}
var SCHAR_MAX: Int32 {
  get {
    return
  }
}
var SCHED_RR: Int32 {
  get {
    return
  }
}
var SCHED_OTHER: Int32 {
  get {
    return
  }
}
var MACH_PORT_TYPE_SPREQUEST: Int32 {
  get {
    return
  }
}
var SBUF_FIXEDLEN: Int32 {
  get {
    return
  }
}
var SBUF_FINISHED: Int32 {
  get {
    return
  }
}
var SBUF_USRFLAGMSK: Int32 {
  get {
    return
  }
}
var SBUF_OVERFLOWED: Int32 {
  get {
    return
  }
}
var RLIM_NLIMITS: Int32 {
  get {
    return
  }
}
var RLIMIT_THREAD_CPULIMITS: Int32 {
  get {
    return
  }
}
var RLIMIT_WAKEUPS_MONITOR: Int32 {
  get {
    return
  }
}
var RLIMIT_FSIZE: Int32 {
  get {
    return
  }
}
var RLIMIT_MEMLOCK: Int32 {
  get {
    return
  }
}
var RLIMIT_CPU_USAGE_MONITOR: Int32 {
  get {
    return
  }
}
var RLIMIT_DATA: Int32 {
  get {
    return
  }
}
var RLIMIT_RSS: Int32 {
  get {
    return
  }
}
var RLIMIT_STACK: Int32 {
  get {
    return
  }
}
var RLIMIT_NOFILE: Int32 {
  get {
    return
  }
}
var RLIMIT_NPROC: Int32 {
  get {
    return
  }
}
var RTA_AUTHOR: Int32 {
  get {
    return
  }
}
var RTA_BRD: Int32 {
  get {
    return
  }
}
var RTAX_MAX: Int32 {
  get {
    return
  }
}
var RTAX_IFP: Int32 {
  get {
    return
  }
}
var RTAX_NETMASK: Int32 {
  get {
    return
  }
}
var RTA_IFA: Int32 {
  get {
    return
  }
}
var RTA_IFP: Int32 {
  get {
    return
  }
}
var RTA_DST: Int32 {
  get {
    return
  }
}
var RTA_GENMASK: Int32 {
  get {
    return
  }
}
var RTA_GATEWAY: Int32 {
  get {
    return
  }
}
var RTAX_AUTHOR: Int32 {
  get {
    return
  }
}
var RTAX_BRD: Int32 {
  get {
    return
  }
}
var RPC_SIGBUF_SIZE: Int32 {
  get {
    return
  }
}
var RTAX_GENMASK: Int32 {
  get {
    return
  }
}
var RTAX_IFA: Int32 {
  get {
    return
  }
}
var RTAX_DST: Int32 {
  get {
    return
  }
}
var RTAX_GATEWAY: Int32 {
  get {
    return
  }
}
var RTF_LLINFO: Int32 {
  get {
    return
  }
}
var RTF_IFSCOPE: Int32 {
  get {
    return
  }
}
var RTF_HOST: Int32 {
  get {
    return
  }
}
var RTF_IFREF: Int32 {
  get {
    return
  }
}
var RTF_GATEWAY: Int32 {
  get {
    return
  }
}
var RTF_NOIFREF: Int32 {
  get {
    return
  }
}
var RTF_MULTICAST: Int32 {
  get {
    return
  }
}
var RTF_MODIFIED: Int32 {
  get {
    return
  }
}
var RTF_LOCAL: Int32 {
  get {
    return
  }
}
var RTF_CLONING: Int32 {
  get {
    return
  }
}
var RTF_BLACKHOLE: Int32 {
  get {
    return
  }
}
var RTF_BROADCAST: Int32 {
  get {
    return
  }
}
var RTA_NETMASK: Int32 {
  get {
    return
  }
}
var RTF_DYNAMIC: Int32 {
  get {
    return
  }
}
var RTF_DONE: Int32 {
  get {
    return
  }
}
var RTF_DELCLONE: Int32 {
  get {
    return
  }
}
var RTF_CONDEMNED: Int32 {
  get {
    return
  }
}
var RTLD_FIRST: Int32 {
  get {
    return
  }
}
var RTF_XRESOLVE: Int32 {
  get {
    return
  }
}
var RTF_WASCLONED: Int32 {
  get {
    return
  }
}
var RTLD_LOCAL: Int32 {
  get {
    return
  }
}
var RTLD_LAZY: Int32 {
  get {
    return
  }
}
var RTLD_GLOBAL: Int32 {
  get {
    return
  }
}
var RTF_PROTO3: Int32 {
  get {
    return
  }
}
var RTF_PROTO2: Int32 {
  get {
    return
  }
}
var RTF_PROTO1: Int32 {
  get {
    return
  }
}
var RTF_PRCLONING: Int32 {
  get {
    return
  }
}
var RTF_PINNED: Int32 {
  get {
    return
  }
}
var RTF_UP: Int32 {
  get {
    return
  }
}
var RTF_STATIC: Int32 {
  get {
    return
  }
}
var RTF_ROUTER: Int32 {
  get {
    return
  }
}
var RTF_REJECT: Int32 {
  get {
    return
  }
}
var RTF_PROXY: Int32 {
  get {
    return
  }
}
var RB_DIR_RIGHT: Int32 {
  get {
    return
  }
}
var RB_HALT: Int32 {
  get {
    return
  }
}
var RB_INITNAME: Int32 {
  get {
    return
  }
}
var RB_NOSYNC: Int32 {
  get {
    return
  }
}
var RB_PANIC: Int32 {
  get {
    return
  }
}
var RB_QUICK: Int32 {
  get {
    return
  }
}
var RB_SAFEBOOT: Int32 {
  get {
    return
  }
}
var RB_SINGLE: Int32 {
  get {
    return
  }
}
var Q_SETUSE: Int32 {
  get {
    return
  }
}
var Q_SYNC: Int32 {
  get {
    return
  }
}
var RADIXCHAR: Int32 {
  get {
    return
  }
}
var RAND_MAX: Int32 {
  get {
    return
  }
}
var RB_ALTBOOT: Int32 {
  get {
    return
  }
}
var RB_ASKNAME: Int32 {
  get {
    return
  }
}
var RB_AUTOBOOT: Int32 {
  get {
    return
  }
}
var RB_BOOT: Int32 {
  get {
    return
  }
}
var RB_DFLTROOT: Int32 {
  get {
    return
  }
}
var RB_DIR_LEFT: Int32 {
  get {
    return
  }
}
var REG_BACKR: Int32 {
  get {
    return
  }
}
var REG_BACKTRACKING_MATCHER: Int32 {
  get {
    return
  }
}
var REG_BADBR: Int32 {
  get {
    return
  }
}
var REG_BADPAT: Int32 {
  get {
    return
  }
}
var REG_BADRPT: Int32 {
  get {
    return
  }
}
var REG_BASIC: Int32 {
  get {
    return
  }
}
var REG_DUMP: Int32 {
  get {
    return
  }
}
var REG_EBRACE: Int32 {
  get {
    return
  }
}
var RB_UNIPROC: Int32 {
  get {
    return
  }
}
var REALTIME_CLOCK: Int32 {
  get {
    return
  }
}
var RB_UPSDELAY: Int32 {
  get {
    return
  }
}
var REG_ASSERT: Int32 {
  get {
    return
  }
}
var REG_ATOI: Int32 {
  get {
    return
  }
}
var REG_EXTENDED: Int32 {
  get {
    return
  }
}
var REG_ESUBREG: Int32 {
  get {
    return
  }
}
var REG_ILLSEQ: Int32 {
  get {
    return
  }
}
var REG_ICASE: Int32 {
  get {
    return
  }
}
var REG_ITOA: Int32 {
  get {
    return
  }
}
var REG_INVARG: Int32 {
  get {
    return
  }
}
var REG_MINIMAL: Int32 {
  get {
    return
  }
}
var REG_LARGE: Int32 {
  get {
    return
  }
}
var REG_LITERAL: Int32 {
  get {
    return
  }
}
var REG_ECTYPE: Int32 {
  get {
    return
  }
}
var REG_EBRACK: Int32 {
  get {
    return
  }
}
var REG_ECOLLATE: Int32 {
  get {
    return
  }
}
var REG_EMPTY: Int32 {
  get {
    return
  }
}
var REG_EESCAPE: Int32 {
  get {
    return
  }
}
var REG_ENOSYS: Int32 {
  get {
    return
  }
}
var REG_ENHANCED: Int32 {
  get {
    return
  }
}
var REG_ERANGE: Int32 {
  get {
    return
  }
}
var REG_ESPACE: Int32 {
  get {
    return
  }
}
var REG_EPAREN: Int32 {
  get {
    return
  }
}
var REG_UNGREEDY: Int32 {
  get {
    return
  }
}
var RE_DUP_MAX: Int32 {
  get {
    return
  }
}
var RETURN: Int32 {
  get {
    return
  }
}
var RLIMIT_CPU: Int32 {
  get {
    return
  }
}
var RLIMIT_CORE: Int32 {
  get {
    return
  }
}
var RLIMIT_AS: Int32 {
  get {
    return
  }
}
var REG_NOMATCH: Int32 {
  get {
    return
  }
}
var REG_NEWLINE: Int32 {
  get {
    return
  }
}
var REG_NOSUB: Int32 {
  get {
    return
  }
}
var REG_NOSPEC: Int32 {
  get {
    return
  }
}
var REG_PEND: Int32 {
  get {
    return
  }
}
var REG_NOTEOL: Int32 {
  get {
    return
  }
}
var REG_NOTBOL: Int32 {
  get {
    return
  }
}
var REG_TRACE: Int32 {
  get {
    return
  }
}
var REG_STARTEND: Int32 {
  get {
    return
  }
}
var NSEC_PER_MSEC: UInt64 {
  get {
    return
  }
}
var NO_RECOVERY: Int32 {
  get {
    return
  }
}
var NO_DATA: Int32 {
  get {
    return
  }
}
var NSEC_PER_USEC: UInt64 {
  get {
    return
  }
}
var NSEC_PER_SEC: UInt64 {
  get {
    return
  }
}
var NOTE_VM_PRESSURE_TERMINATE: Int32 {
  get {
    return
  }
}
var NOTE_VM_PRESSURE_SUDDEN_TERMINATE: Int32 {
  get {
    return
  }
}
var NO_ADDRESS: Int32 {
  get {
    return
  }
}
var NOTE_WRITE: Int32 {
  get {
    return
  }
}
var OCRNL: Int32 {
  get {
    return
  }
}
var x86_THREAD_STATE64: Int32 {
  get {
    return
  }
}
var NeXTBSD4_0: Int32 {
  get {
    return
  }
}
var NeXTBSD: Int32 {
  get {
    return
  }
}
var OFF_MAX: Int64 {
  get {
    return
  }
}
var OFDEL: Int32 {
  get {
    return
  }
}
var NSIG: Int32 {
  get {
    return
  }
}
var NZERO: Int32 {
  get {
    return
  }
}
var x86_FLOAT_STATE32: Int32 {
  get {
    return
  }
}
var NOTE_PDATAMASK: Int32 {
  get {
    return
  }
}
var x86_FLOAT_STATE: Int32 {
  get {
    return
  }
}
var NOTE_RENAME: Int32 {
  get {
    return
  }
}
var x86_FLOAT_STATE64: Int32 {
  get {
    return
  }
}
var NOTE_LINK: Int32 {
  get {
    return
  }
}
var NOTE_LOWAT: Int32 {
  get {
    return
  }
}
var NOTE_LEEWAY: Int32 {
  get {
    return
  }
}
var x86_THREAD_STATE32: Int32 {
  get {
    return
  }
}
var NOTE_NSECONDS: Int32 {
  get {
    return
  }
}
var x86_THREAD_STATE: Int32 {
  get {
    return
  }
}
var NOTE_NONE: Int32 {
  get {
    return
  }
}
var NOTE_USECONDS: Int32 {
  get {
    return
  }
}
var NOTE_TRIGGER: Int32 {
  get {
    return
  }
}
var x86_EXCEPTION_STATE32: Int32 {
  get {
    return
  }
}
var NOTE_VM_PRESSURE: UInt32 {
  get {
    return
  }
}
var x86_EXCEPTION_STATE: Int32 {
  get {
    return
  }
}
var NOTE_VM_ERROR: Int32 {
  get {
    return
  }
}
var x86_EXCEPTION_STATE64: Int32 {
  get {
    return
  }
}
var NOTE_SIGNAL: Int32 {
  get {
    return
  }
}
var NOTE_REVOKE: Int32 {
  get {
    return
  }
}
var NOTE_SECONDS: Int32 {
  get {
    return
  }
}
var NOTE_TRACKERR: Int32 {
  get {
    return
  }
}
var NOTE_TRACK: Int32 {
  get {
    return
  }
}
var MACH_PORT_TEMPOWNER: Int32 {
  get {
    return
  }
}
var x86_AVX_STATE64: Int32 {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_REVIVE: Int32 {
  get {
    return
  }
}
var x86_DEBUG_STATE: Int32 {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_STRICT_GUARD: Int32 {
  get {
    return
  }
}
var x86_DEBUG_STATE32: Int32 {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_TASKPTR: Int32 {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_TEMPOWNER: Int32 {
  get {
    return
  }
}
var x86_DEBUG_STATE64: Int32 {
  get {
    return
  }
}
var vm_map_MSG_COUNT: Int32 {
  get {
    return
  }
}
var NOTE_FFLAGSMASK: Int32 {
  get {
    return
  }
}
var NOTE_FFNOP: Int32 {
  get {
    return
  }
}
var NOTE_FFOR: UInt32 {
  get {
    return
  }
}
var NOTE_FORK: Int32 {
  get {
    return
  }
}
var x86_AVX_STATE: Int32 {
  get {
    return
  }
}
var NOTE_EXTEND: Int32 {
  get {
    return
  }
}
var NOTE_FFCOPY: UInt32 {
  get {
    return
  }
}
var x86_AVX_STATE32: Int32 {
  get {
    return
  }
}
var NOTE_FFAND: Int32 {
  get {
    return
  }
}
var NOTE_FFCTRLMASK: UInt32 {
  get {
    return
  }
}
var MACH_PORT_RECEIVE_STATUS: Int32 {
  get {
    return
  }
}
var MACH_PORT_SRIGHTS_PRESENT: Int32 {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_GUARDED: Int32 {
  get {
    return
  }
}
var MACH_PORT_STATUS_FLAG_IMP_DONATION: Int32 {
  get {
    return
  }
}
var MACH_PORT_SRIGHTS_NONE: Int32 {
  get {
    return
  }
}
var ONLCR: Int32 {
  get {
    return
  }
}
var ONLRET: Int32 {
  get {
    return
  }
}
var OLDROUTINENAMES: Int32 {
  get {
    return
  }
}
var OLD_TIME: Int32 {
  get {
    return
  }
}
var OID_AUTO_START: Int32 {
  get {
    return
  }
}
var OFILL: Int32 {
  get {
    return
  }
}
var OID_AUTO: Int32 {
  get {
    return
  }
}
var OPOST: Int32 {
  get {
    return
  }
}
var ORDINARY: Int32 {
  get {
    return
  }
}
var OPAQUE_UPP_TYPES: Int32 {
  get {
    return
  }
}
var OPEN_MAX: Int32 {
  get {
    return
  }
}
var ONOCR: Int32 {
  get {
    return
  }
}
var ONOEOT: Int32 {
  get {
    return
  }
}
var OPAQUE_TOOLBOX_STRUCTS: Int32 {
  get {
    return
  }
}
var MACH_MSGH_KIND_NOTIFICATION: Int32 {
  get {
    return
  }
}
var MACH_MSGH_KIND_NORMAL: Int32 {
  get {
    return
  }
}
var MACH_MSG_ALLOCATE: Int32 {
  get {
    return
  }
}
var MACH_MSG_MASK: Int32 {
  get {
    return
  }
}
var MACH_MSG_IPC_SPACE: Int32 {
  get {
    return
  }
}
var MACH_MSG_IPC_KERNEL: Int32 {
  get {
    return
  }
}
var MACH_MSG_OOL_DESCRIPTOR: Int32 {
  get {
    return
  }
}
var MACH_MSG_OOL_PORTS_DESCRIPTOR: Int32 {
  get {
    return
  }
}
var MACH_MSG_OPTION_NONE: Int32 {
  get {
    return
  }
}
var MACH_MSG_OOL_VOLATILE_DESCRIPTOR: Int32 {
  get {
    return
  }
}
var MACH_MSG_PHYSICAL_COPY: Int32 {
  get {
    return
  }
}
var MACH_MSG_OVERWRITE: Int32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_LOCAL_MASK: Int32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_RAISEIMP: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_REMOTE_MASK: Int32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_USED: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_USER: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_ZERO: Int32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_VOUCHER_MASK: Int32 {
  get {
    return
  }
}
var MACH_EXCEPTION_CODES: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_CIRCULAR: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_COMPLEX: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_DENAP: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_DENAPHOLDASRT: UInt32 {
  get {
    return
  }
}
var MACH_MSGH_BITS_IMPHOLDASRT: UInt32 {
  get {
    return
  }
}
var LOG_USER: Int32 {
  get {
    return
  }
}
var LOG_UUCP: Int32 {
  get {
    return
  }
}
var LOG_WARNING: Int32 {
  get {
    return
  }
}
var LONG_BIT: Int32 {
  get {
    return
  }
}
var LONG_LONG_MAX: Int64 {
  get {
    return
  }
}
var LONG_MAX: Int {
  get {
    return
  }
}
var LSCALE: Int32 {
  get {
    return
  }
}
var L_INCR: Int32 {
  get {
    return
  }
}
var L_SET: Int32 {
  get {
    return
  }
}
var L_XTND: Int32 {
  get {
    return
  }
}
var L_ctermid: Int32 {
  get {
    return
  }
}
var L_tmpnam: Int32 {
  get {
    return
  }
}
var M16KCLSHIFT: Int32 {
  get {
    return
  }
}
var MACHINE_THREAD_STATE: Int32 {
  get {
    return
  }
}
var MACH_PORT_INFO_EXT: Int32 {
  get {
    return
  }
}
var MACH_PORT_IMPORTANCE_RECEIVER: Int32 {
  get {
    return
  }
}
var MACH_PORT_LIMITS_INFO: Int32 {
  get {
    return
  }
}
var MACH_PORT_NULL: Int32 {
  get {
    return
  }
}
var MACH_MSG_VM_SPACE: Int32 {
  get {
    return
  }
}
var MACH_MSG_VM_KERNEL: Int32 {
  get {
    return
  }
}
var MACH_MSG_VIRTUAL_COPY: Int32 {
  get {
    return
  }
}
var MACH_NOTIFY_FIRST: Int32 {
  get {
    return
  }
}
var MACH_PORTS_SLOTS_USED: Int32 {
  get {
    return
  }
}
var MACH_PORT_DNREQUESTS_SIZE_COUNT: Int32 {
  get {
    return
  }
}
var MACH_PORT_DNREQUESTS_SIZE: Int32 {
  get {
    return
  }
}
var MACH_PORT_DENAP_RECEIVER: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_MAKE_SEND_ONCE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_MOVE_RECEIVE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_LAST: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_MAKE_SEND: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_MOVE_SEND: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_MOVE_SEND_ONCE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_NAME: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_NONE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_SEND: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_SEND_ONCE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_PORT_RECEIVE: Int32 {
  get {
    return
  }
}
var MACH_MSG_PORT_DESCRIPTOR: Int32 {
  get {
    return
  }
}
var MACH_MSG_TRAILER_FORMAT_0: Int32 {
  get {
    return
  }
}
var MACH_MSG_SUCCESS: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_COPY_SEND: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_DISPOSE_RECEIVE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_COPY_RECEIVE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_DISPOSE_SEND_ONCE: Int32 {
  get {
    return
  }
}
var MACH_MSG_TYPE_DISPOSE_SEND: Int32 {
  get {
    return
  }
}
var PRIdLEAST32: String {
  get {
    return
  }
}
var PRIdLEAST16: String {
  get {
    return
  }
}
var PRIdFAST16: String {
  get {
    return
  }
}
var PRIdFAST32: String {
  get {
    return
  }
}
var PRIXPTR: String {
  get {
    return
  }
}
var PRId32: String {
  get {
    return
  }
}
var PRId16: String {
  get {
    return
  }
}
var PRIXLEAST16: String {
  get {
    return
  }
}
var PRIXLEAST32: String {
  get {
    return
  }
}
var PRIXFAST16: String {
  get {
    return
  }
}
var PRIXFAST32: String {
  get {
    return
  }
}
var PRIO_USER: Int32 {
  get {
    return
  }
}
var PRIO_PGRP: Int32 {
  get {
    return
  }
}
var PRIO_PROCESS: Int32 {
  get {
    return
  }
}
var PRIX32: String {
  get {
    return
  }
}
var PRIX16: String {
  get {
    return
  }
}
var PRIO_DARWIN_THREAD: Int32 {
  get {
    return
  }
}
var PRIO_DARWIN_PROCESS: Int32 {
  get {
    return
  }
}
var PRIO_MIN: Int32 {
  get {
    return
  }
}
var PRIO_MAX: Int32 {
  get {
    return
  }
}
var PRIMASK: Int32 {
  get {
    return
  }
}
var PRAGMA_STRUCT_PACKPUSH: Int32 {
  get {
    return
  }
}
var PRIBIO: Int32 {
  get {
    return
  }
}
var PRIO_DARWIN_NONUI: Int32 {
  get {
    return
  }
}
var PRIO_DARWIN_BG: Int32 {
  get {
    return
  }
}
var PRAGMA_IMPORT: Int32 {
  get {
    return
  }
}
var PRAGMA_ONCE: Int32 {
  get {
    return
  }
}
var PRAGMA_STRUCT_ALIGN: Int32 {
  get {
    return
  }
}
var PRAGMA_STRUCT_PACK: Int32 {
  get {
    return
  }
}
var err_max_system: Int32 {
  get {
    return
  }
}
var PRAGMA_ENUM_ALWAYSINT: Int32 {
  get {
    return
  }
}
var PRAGMA_ENUM_OPTIONS: Int32 {
  get {
    return
  }
}
var PRAGMA_ENUM_PACK: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_START_SUSPENDED: Int32 {
  get {
    return
  }
}
var PPAUSE: Int32 {
  get {
    return
  }
}
var PPNUM_MAX: UInt32 {
  get {
    return
  }
}
var exc_MSG_COUNT: Int32 {
  get {
    return
  }
}
var PPPDISC: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_SETEXEC: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_SETPGROUP: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_SETSIGDEF: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_SETSIGMASK: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_NONE: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_SUSPEND: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_THROTTLE: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_RESETIDS: Int32 {
  get {
    return
  }
}
var POSIX_MADV_WILLNEED: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_CLOEXEC_DEFAULT: Int32 {
  get {
    return
  }
}
var POSIX_SPAWN_PCONTROL_KILL: Int32 {
  get {
    return
  }
}
var POSIX_MADV_DONTNEED: Int32 {
  get {
    return
  }
}
var POSIX_MADV_NORMAL: Int32 {
  get {
    return
  }
}
var POSIX_MADV_RANDOM: Int32 {
  get {
    return
  }
}
var POSIX_MADV_SEQUENTIAL: Int32 {
  get {
    return
  }
}
var POLL_IN: Int32 {
  get {
    return
  }
}
var POLL_MSG: Int32 {
  get {
    return
  }
}
var POLL_OUT: Int32 {
  get {
    return
  }
}
var POLL_PRI: Int32 {
  get {
    return
  }
}
var PROC_DIRTYCONTROL_CLEAR: Int32 {
  get {
    return
  }
}
var PROC_ALL_PIDS: Int32 {
  get {
    return
  }
}
var PROCESSOR_TEMPERATURE: Int32 {
  get {
    return
  }
}
var PROCESSOR_SET_LOAD_INFO: Int32 {
  get {
    return
  }
}
var PROCESSOR_SET_INFO_MAX: Int32 {
  get {
    return
  }
}
var PROCESSOR_SET_BASIC_INFO: Int32 {
  get {
    return
  }
}
var PROCESSOR_PM_REGS_INFO: Int32 {
  get {
    return
  }
}
var PROCESSOR_INFO_MAX: Int32 {
  get {
    return
  }
}
var PROCESSOR_CPU_LOAD_INFO: Int32 {
  get {
    return
  }
}
var EV_RCLOSED: Int32 {
  get {
    return
  }
}
var PROCESSOR_BASIC_INFO: Int32 {
  get {
    return
  }
}
var EV_RCONN: Int32 {
  get {
    return
  }
}
var PRIxPTR: String {
  get {
    return
  }
}
var EV_RE: Int32 {
  get {
    return
  }
}
var EV_RECEIPT: Int32 {
  get {
    return
  }
}
var i386_EXCEPTION_STATE: Int32 {
  get {
    return
  }
}
var EV_RESET: Int32 {
  get {
    return
  }
}
var EV_ONESHOT: Int32 {
  get {
    return
  }
}
var PRIxLEAST32: String {
  get {
    return
  }
}
var EV_OOB: Int32 {
  get {
    return
  }
}
var EV_OOBAND: Int32 {
  get {
    return
  }
}
var PRIxLEAST16: String {
  get {
    return
  }
}
var EV_POLL: Int32 {
  get {
    return
  }
}
var PRIxFAST32: String {
  get {
    return
  }
}
var EV_RBYTES: Int32 {
  get {
    return
  }
}
var PRIxFAST16: String {
  get {
    return
  }
}
var i386_FLOAT_STATE: Int32 {
  get {
    return
  }
}
var EV_TIMEOUT: Int32 {
  get {
    return
  }
}
var EV_WBYTES: Int32 {
  get {
    return
  }
}
var EV_WCONN: Int32 {
  get {
    return
  }
}
var PRIx16: String {
  get {
    return
  }
}
var EV_WCLOSED: Int32 {
  get {
    return
  }
}
var PRIx32: String {
  get {
    return
  }
}
var PRIuPTR: String {
  get {
    return
  }
}
var i386_THREAD_STATE: Int32 {
  get {
    return
  }
}
var EV_RM: Int32 {
  get {
    return
  }
}
var PRIuLEAST32: String {
  get {
    return
  }
}
var EV_SYSFLAGS: Int32 {
  get {
    return
  }
}
var PRIuLEAST16: String {
  get {
    return
  }
}
var PRIuFAST32: String {
  get {
    return
  }
}
var PRIuFAST16: String {
  get {
    return
  }
}
var PRIu16: String {
  get {
    return
  }
}
var PRIu32: String {
  get {
    return
  }
}
var PRIoPTR: String {
  get {
    return
  }
}
var PRIoLEAST32: String {
  get {
    return
  }
}
var PRIoLEAST16: String {
  get {
    return
  }
}
var PRIoFAST16: String {
  get {
    return
  }
}
var PRIoFAST32: String {
  get {
    return
  }
}
var PRIiPTR: String {
  get {
    return
  }
}
var PRIo16: String {
  get {
    return
  }
}
var PRIo32: String {
  get {
    return
  }
}
var PRIiLEAST16: String {
  get {
    return
  }
}
var PRIiLEAST32: String {
  get {
    return
  }
}
var host_priv_MSG_COUNT: Int32 {
  get {
    return
  }
}
var host_security_MSG_COUNT: Int32 {
  get {
    return
  }
}
var PRIiFAST16: String {
  get {
    return
  }
}
var PRIiFAST32: String {
  get {
    return
  }
}
var PRIi32: String {
  get {
    return
  }
}
var PRIdPTR: String {
  get {
    return
  }
}
var PRIi16: String {
  get {
    return
  }
}
var PF_ISDN: Int32 {
  get {
    return
  }
}
var EPROTO: Int32 {
  get {
    return
  }
}
var PF_IPX: Int32 {
  get {
    return
  }
}
var EPROTONOSUPPORT: Int32 {
  get {
    return
  }
}
var PF_INET6: Int32 {
  get {
    return
  }
}
var EPROGMISMATCH: Int32 {
  get {
    return
  }
}
var pseudo_AF_XTP: Int32 {
  get {
    return
  }
}
var PF_KEY: Int32 {
  get {
    return
  }
}
var EPROGUNAVAIL: Int32 {
  get {
    return
  }
}
var PF_ISO: Int32 {
  get {
    return
  }
}
var PF_LOCAL: Int32 {
  get {
    return
  }
}
var EQUIV_CLASS_MAX: Int32 {
  get {
    return
  }
}
var PF_LINK: Int32 {
  get {
    return
  }
}
var ERANGE: Int32 {
  get {
    return
  }
}
var ERA: Int32 {
  get {
    return
  }
}
var PF_LAT: Int32 {
  get {
    return
  }
}
var PF_NDRV: Int32 {
  get {
    return
  }
}
var EPWROFF: Int32 {
  get {
    return
  }
}
var EPROTOTYPE: Int32 {
  get {
    return
  }
}
var PF_NATM: Int32 {
  get {
    return
  }
}
var EQFULL: Int32 {
  get {
    return
  }
}
var pseudo_AF_KEY: Int32 {
  get {
    return
  }
}
var PF_MAX: Int32 {
  get {
    return
  }
}
var pseudo_AF_PIP: Int32 {
  get {
    return
  }
}
var PF_COIP: Int32 {
  get {
    return
  }
}
var ERA_T_FMT: Int32 {
  get {
    return
  }
}
var pseudo_AF_HDRCMPLT: Int32 {
  get {
    return
  }
}
var pseudo_AF_RTIP: Int32 {
  get {
    return
  }
}
var PF_CNT: Int32 {
  get {
    return
  }
}
var EREMOTE: Int32 {
  get {
    return
  }
}
var PF_CHAOS: Int32 {
  get {
    return
  }
}
var ERA_D_FMT: Int32 {
  get {
    return
  }
}
var PF_DECnet: Int32 {
  get {
    return
  }
}
var PF_DATAKIT: Int32 {
  get {
    return
  }
}
var ERA_D_T_FMT: Int32 {
  get {
    return
  }
}
var PF_HYLINK: Int32 {
  get {
    return
  }
}
var ESHLIBVERS: Int32 {
  get {
    return
  }
}
var PF_DLI: Int32 {
  get {
    return
  }
}
var ERPCMISMATCH: Int32 {
  get {
    return
  }
}
var EROFS: Int32 {
  get {
    return
  }
}
var PF_IMPLINK: Int32 {
  get {
    return
  }
}
var PF_INET: Int32 {
  get {
    return
  }
}
var PF_ECMA: Int32 {
  get {
    return
  }
}
var ENOTRECOVERABLE: Int32 {
  get {
    return
  }
}
var PCATCH: Int32 {
  get {
    return
  }
}
var ENOTSOCK: Int32 {
  get {
    return
  }
}
var PATH_MAX: Int32 {
  get {
    return
  }
}
var PDROP: Int32 {
  get {
    return
  }
}
var ENOTDIR: Int32 {
  get {
    return
  }
}
var PENDIN: Int32 {
  get {
    return
  }
}
var PDP_ENDIAN: Int32 {
  get {
    return
  }
}
var ENOTEMPTY: Int32 {
  get {
    return
  }
}
var optional_argument: Int32 {
  get {
    return
  }
}
var ENXIO: Int32 {
  get {
    return
  }
}
var PF_APPLETALK: Int32 {
  get {
    return
  }
}
var EOF: Int32 {
  get {
    return
  }
}
var PERSIST_TIMEOUT: Int32 {
  get {
    return
  }
}
var ENOTSUP: Int32 {
  get {
    return
  }
}
var PF_CCITT: Int32 {
  get {
    return
  }
}
var ENOTTY: Int32 {
  get {
    return
  }
}
var ENVIRONMENT_SLOT: Int32 {
  get {
    return
  }
}
var EPERM: Int32 {
  get {
    return
  }
}
var PAGE_MAX_SIZE: Int32 {
  get {
    return
  }
}
var EPFNOSUPPORT: Int32 {
  get {
    return
  }
}
var PAGE_MIN_SIZE: Int32 {
  get {
    return
  }
}
var EOPNOTSUPP: Int32 {
  get {
    return
  }
}
var PAGE_SHIFT: Int32 {
  get {
    return
  }
}
var PAGE_MIN_SHIFT: Int32 {
  get {
    return
  }
}
var EOVERFLOW: Int32 {
  get {
    return
  }
}
var EOWNERDEAD: Int32 {
  get {
    return
  }
}
var processor_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EPROCUNAVAIL: Int32 {
  get {
    return
  }
}
var EPROC_CTTY: Int32 {
  get {
    return
  }
}
var PARENB: Int32 {
  get {
    return
  }
}
var EPROC_SLEADER: Int32 {
  get {
    return
  }
}
var PAGE_SIZE: Int32 {
  get {
    return
  }
}
var EPIPE: Int32 {
  get {
    return
  }
}
var PARODD: Int32 {
  get {
    return
  }
}
var processor_set_MSG_COUNT: Int32 {
  get {
    return
  }
}
var PASS_MAX: Int32 {
  get {
    return
  }
}
var EPROCLIM: Int32 {
  get {
    return
  }
}
var PARMRK: Int32 {
  get {
    return
  }
}
var O_SYMLINK: Int32 {
  get {
    return
  }
}
var EV_ADD: Int32 {
  get {
    return
  }
}
var EVFILT_WRITE: Int32 {
  get {
    return
  }
}
var EVFILT_VNODE: Int32 {
  get {
    return
  }
}
var O_TRUNC: Int32 {
  get {
    return
  }
}
var EVFILT_VM: Int32 {
  get {
    return
  }
}
var EVFILT_USER: Int32 {
  get {
    return
  }
}
var PAD_NOTATTR: Int32 {
  get {
    return
  }
}
var O_WRONLY: Int32 {
  get {
    return
  }
}
var EV_DISPATCH: Int32 {
  get {
    return
  }
}
var PAD_FAILURE: Int32 {
  get {
    return
  }
}
var EV_DISABLE: Int32 {
  get {
    return
  }
}
var EV_DELETE: Int32 {
  get {
    return
  }
}
var EV_CLEAR: Int32 {
  get {
    return
  }
}
var PAGE_MAX_SHIFT: Int32 {
  get {
    return
  }
}
var EV_EX: Int32 {
  get {
    return
  }
}
var O_EXLOCK: Int32 {
  get {
    return
  }
}
var O_NDELAY: Int32 {
  get {
    return
  }
}
var EV_ERROR: Int32 {
  get {
    return
  }
}
var EV_EOF: Int32 {
  get {
    return
  }
}
var O_NOCTTY: Int32 {
  get {
    return
  }
}
var EV_ENABLE: Int32 {
  get {
    return
  }
}
var EV_DMASK: UInt32 {
  get {
    return
  }
}
var O_NOFOLLOW: Int32 {
  get {
    return
  }
}
var EV_MASK: Int32 {
  get {
    return
  }
}
var O_NONBLOCK: Int32 {
  get {
    return
  }
}
var EV_FLAG1: Int32 {
  get {
    return
  }
}
var O_RDONLY: Int32 {
  get {
    return
  }
}
var O_POPUP: UInt32 {
  get {
    return
  }
}
var EV_FLAG0: Int32 {
  get {
    return
  }
}
var O_RDWR: Int32 {
  get {
    return
  }
}
var no_argument: Int32 {
  get {
    return
  }
}
var EV_FIN: Int32 {
  get {
    return
  }
}
var O_SHLOCK: Int32 {
  get {
    return
  }
}
var EV_FD: Int32 {
  get {
    return
  }
}
var ESTALE: Int32 {
  get {
    return
  }
}
var O_APPEND: Int32 {
  get {
    return
  }
}
var ESPIPE: Int32 {
  get {
    return
  }
}
var O_ASYNC: Int32 {
  get {
    return
  }
}
var ESRCH: Int32 {
  get {
    return
  }
}
var ESOCKTNOSUPPORT: Int32 {
  get {
    return
  }
}
var O_CLOEXEC: Int32 {
  get {
    return
  }
}
var O_CREAT: Int32 {
  get {
    return
  }
}
var ESHUTDOWN: Int32 {
  get {
    return
  }
}
var O_DIRECTORY: Int32 {
  get {
    return
  }
}
var kInvalidID: Int32 {
  get {
    return
  }
}
var EUSERS: Int32 {
  get {
    return
  }
}
var O_DP_GETRAWENCRYPTED: Int32 {
  get {
    return
  }
}
var ETOOMANYREFS: Int32 {
  get {
    return
  }
}
var ETXTBSY: Int32 {
  get {
    return
  }
}
var ETIMEDOUT: Int32 {
  get {
    return
  }
}
var O_EVTONLY: Int32 {
  get {
    return
  }
}
var ETIME: Int32 {
  get {
    return
  }
}
var O_EXCL: Int32 {
  get {
    return
  }
}
var EVFILT_PROC: Int32 {
  get {
    return
  }
}
var EVFILT_READ: Int32 {
  get {
    return
  }
}
var mach_vm_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EVFILT_MACHPORT: Int32 {
  get {
    return
  }
}
var EVFILT_FS: Int32 {
  get {
    return
  }
}
var EVFILT_AIO: Int32 {
  get {
    return
  }
}
var OS_SPINLOCK_INIT: Int32 {
  get {
    return
  }
}
var OVERFLOW: Int32 {
  get {
    return
  }
}
var lock_set_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EVFILT_TIMER: Int32 {
  get {
    return
  }
}
var OVERRIDE_UNKNOWN_PERMISSIONS: Int32 {
  get {
    return
  }
}
var mach_host_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EVFILT_THREADMARKER: Int32 {
  get {
    return
  }
}
var OXTABS: Int32 {
  get {
    return
  }
}
var EVFILT_SYSCOUNT: Int32 {
  get {
    return
  }
}
var O_ACCMODE: Int32 {
  get {
    return
  }
}
var mach_port_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EVFILT_SIGNAL: Int32 {
  get {
    return
  }
}
var O_ALERT: Int32 {
  get {
    return
  }
}
var EFL_IF: Int32 {
  get {
    return
  }
}
var EFL_IOPL: Int32 {
  get {
    return
  }
}
var POLLRDNORM: Int32 {
  get {
    return
  }
}
var EFL_IOPL_USER: Int32 {
  get {
    return
  }
}
var EFL_IOPL_KERNEL: Int32 {
  get {
    return
  }
}
var EFL_NT: Int32 {
  get {
    return
  }
}
var POLLPRI: Int32 {
  get {
    return
  }
}
var POLLRDBAND: Int32 {
  get {
    return
  }
}
var POLL_HUP: Int32 {
  get {
    return
  }
}
var EFL_OF: Int32 {
  get {
    return
  }
}
var POLL_ERR: Int32 {
  get {
    return
  }
}
var EFL_RF: Int32 {
  get {
    return
  }
}
var EFL_PF: Int32 {
  get {
    return
  }
}
var EFL_SET: Int32 {
  get {
    return
  }
}
var POLLWRNORM: Int32 {
  get {
    return
  }
}
var POLLWRITE: Int32 {
  get {
    return
  }
}
var EFL_SF: Int32 {
  get {
    return
  }
}
var POLLWRBAND: Int32 {
  get {
    return
  }
}
var POLLEXTEND: Int32 {
  get {
    return
  }
}
var POLLERR: Int32 {
  get {
    return
  }
}
var EFL_TF: Int32 {
  get {
    return
  }
}
var EFL_USER_SET: Int32 {
  get {
    return
  }
}
var POLLATTRIB: Int32 {
  get {
    return
  }
}
var EFL_VIF: Int32 {
  get {
    return
  }
}
var EFL_VIP: Int32 {
  get {
    return
  }
}
var EFL_ZF: Int32 {
  get {
    return
  }
}
var POLLOUT: Int32 {
  get {
    return
  }
}
var POLLNVAL: Int32 {
  get {
    return
  }
}
var EFL_VM: Int32 {
  get {
    return
  }
}
var EFTYPE: Int32 {
  get {
    return
  }
}
var POLLNLINK: Int32 {
  get {
    return
  }
}
var EHOSTDOWN: Int32 {
  get {
    return
  }
}
var POLLIN: Int32 {
  get {
    return
  }
}
var POLLHUP: Int32 {
  get {
    return
  }
}
var thread_act_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EHOSTUNREACH: Int32 {
  get {
    return
  }
}
var ECHOKE: Int32 {
  get {
    return
  }
}
var ECHONL: Int32 {
  get {
    return
  }
}
var POLICY_RR: Int32 {
  get {
    return
  }
}
var ECHOPRT: Int32 {
  get {
    return
  }
}
var POLICY_NULL: Int32 {
  get {
    return
  }
}
var ECONNABORTED: Int32 {
  get {
    return
  }
}
var ECONNREFUSED: Int32 {
  get {
    return
  }
}
var ECONNRESET: Int32 {
  get {
    return
  }
}
var EDEADLK: Int32 {
  get {
    return
  }
}
var POLICY_TIMESHARE: Int32 {
  get {
    return
  }
}
var EDESTADDRREQ: Int32 {
  get {
    return
  }
}
var EDEVERR: Int32 {
  get {
    return
  }
}
var EDOM: Int32 {
  get {
    return
  }
}
var EDQUOT: Int32 {
  get {
    return
  }
}
var EEXIST: Int32 {
  get {
    return
  }
}
var EFAULT: Int32 {
  get {
    return
  }
}
var PM_STR: Int32 {
  get {
    return
  }
}
var PLOSS: Int32 {
  get {
    return
  }
}
var EFBIG: Int32 {
  get {
    return
  }
}
var EFL_AC: Int32 {
  get {
    return
  }
}
var PIPE_WSELECT: Int32 {
  get {
    return
  }
}
var PLOCK: Int32 {
  get {
    return
  }
}
var task_MSG_COUNT: Int32 {
  get {
    return
  }
}
var EFL_AF: Int32 {
  get {
    return
  }
}
var EFL_CF: Int32 {
  get {
    return
  }
}
var EFL_CLR: UInt32 {
  get {
    return
  }
}
var EFL_DF: Int32 {
  get {
    return
  }
}
var POLICY_FIFO: Int32 {
  get {
    return
  }
}
var EFL_ID: Int32 {
  get {
    return
  }
}
var POLICY_CONTROL_ENTRY: String {
  get {
    return
  }
}
var PIPE_MINDIRECT: Int32 {
  get {
    return
  }
}
var ENETUNREACH: Int32 {
  get {
    return
  }
}
var PIPE_SEL: Int32 {
  get {
    return
  }
}
var PIPE_LWANT: Int32 {
  get {
    return
  }
}
var ENETRESET: Int32 {
  get {
    return
  }
}
var ENOBUFS: Int32 {
  get {
    return
  }
}
var ENOATTR: Int32 {
  get {
    return
  }
}
var ENFILE: Int32 {
  get {
    return
  }
}
var PIPE_LOCKFL: Int32 {
  get {
    return
  }
}
var ENOENT: Int32 {
  get {
    return
  }
}
var ENODEV: Int32 {
  get {
    return
  }
}
var PIPE_WANTR: Int32 {
  get {
    return
  }
}
var PIPE_WANTW: Int32 {
  get {
    return
  }
}
var ENODATA: Int32 {
  get {
    return
  }
}
var PIPE_SIZE: Int32 {
  get {
    return
  }
}
var ENOLCK: Int32 {
  get {
    return
  }
}
var ENOEXEC: Int32 {
  get {
    return
  }
}
var PIPE_WANT: Int32 {
  get {
    return
  }
}
var ENOMSG: Int32 {
  get {
    return
  }
}
var PIPE_BUF: Int32 {
  get {
    return
  }
}
var ENOMEM: Int32 {
  get {
    return
  }
}
var PIPE_DIRECTOK: Int32 {
  get {
    return
  }
}
var PIPE_DEAD: Int32 {
  get {
    return
  }
}
var ENOLINK: Int32 {
  get {
    return
  }
}
var ENOPROTOOPT: Int32 {
  get {
    return
  }
}
var ENOPOLICY: Int32 {
  get {
    return
  }
}
var PIPE_ASYNC: Int32 {
  get {
    return
  }
}
var PIPE_EOF: Int32 {
  get {
    return
  }
}
var ENOSTR: Int32 {
  get {
    return
  }
}
var ENOSR: Int32 {
  get {
    return
  }
}
var ENOSPC: Int32 {
  get {
    return
  }
}
var ENOTCONN: Int32 {
  get {
    return
  }
}
var PIPE_DIRECTW: Int32 {
  get {
    return
  }
}
var PIPE_KNOTE: Int32 {
  get {
    return
  }
}
var ENOTBLK: Int32 {
  get {
    return
  }
}
var PIPE_DRAIN: Int32 {
  get {
    return
  }
}
var ENOSYS: Int32 {
  get {
    return
  }
}
var PF_UNIX: Int32 {
  get {
    return
  }
}
var EILSEQ: Int32 {
  get {
    return
  }
}
var EIDRM: Int32 {
  get {
    return
  }
}
var PF_UNSPEC: Int32 {
  get {
    return
  }
}
var PF_UTUN: Int32 {
  get {
    return
  }
}
var EINTR: Int32 {
  get {
    return
  }
}
var PF_SNA: Int32 {
  get {
    return
  }
}
var PF_SYSTEM: Int32 {
  get {
    return
  }
}
var EINPROGRESS: Int32 {
  get {
    return
  }
}
var EISCONN: Int32 {
  get {
    return
  }
}
var PGSHIFT: Int32 {
  get {
    return
  }
}
var EINVAL: Int32 {
  get {
    return
  }
}
var required_argument: Int32 {
  get {
    return
  }
}
var EIO: Int32 {
  get {
    return
  }
}
var ELAST: Int32 {
  get {
    return
  }
}
var PINOD: Int32 {
  get {
    return
  }
}
var PF_XTP: Int32 {
  get {
    return
  }
}
var EISDIR: Int32 {
  get {
    return
  }
}
var PF_OSI: Int32 {
  get {
    return
  }
}
var EMFILE: Int32 {
  get {
    return
  }
}
var PF_PIP: Int32 {
  get {
    return
  }
}
var ELOOP: Int32 {
  get {
    return
  }
}
var PF_PPP: Int32 {
  get {
    return
  }
}
var EMPTY: Int32 {
  get {
    return
  }
}
var PF_NETBIOS: Int32 {
  get {
    return
  }
}
var EMLINK: Int32 {
  get {
    return
  }
}
var PF_NS: Int32 {
  get {
    return
  }
}
var PF_ROUTE: Int32 {
  get {
    return
  }
}
var ENAMETOOLONG: Int32 {
  get {
    return
  }
}
var PF_RTIP: Int32 {
  get {
    return
  }
}
var EMSGSIZE: Int32 {
  get {
    return
  }
}
var EMULTIHOP: Int32 {
  get {
    return
  }
}
var PF_SIP: Int32 {
  get {
    return
  }
}
var PF_PUP: Int32 {
  get {
    return
  }
}
var ENETDOWN: Int32 {
  get {
    return
  }
}
var PF_RESERVED_36: Int32 {
  get {
    return
  }
}
var ENEEDAUTH: Int32 {
  get {
    return
  }
}
var __PTHREAD_ATTR_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_INVALID_POLICY: Int32 {
  get {
    return
  }
}
var KERN_INVALID_OBJECT: Int32 {
  get {
    return
  }
}
var __PTHREAD_COND_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_INVALID_RIGHT: Int32 {
  get {
    return
  }
}
var __PTHREAD_CONDATTR_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_INVALID_PROCESSOR_SET: Int32 {
  get {
    return
  }
}
var __PTHREAD_MUTEX_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_INVALID_LEDGER: Int32 {
  get {
    return
  }
}
var KERN_INVALID_HOST: Int32 {
  get {
    return
  }
}
var __PTHREAD_MUTEXATTR_SIZE__: Int32 {
  get {
    return
  }
}
var DTF_REWIND: Int32 {
  get {
    return
  }
}
var KERN_INVALID_NAME: Int32 {
  get {
    return
  }
}
var __PTHREAD_RWLOCKATTR_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_INVALID_MEMORY_CONTROL: Int32 {
  get {
    return
  }
}
var __PTHREAD_ONCE_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_KDBUFWAIT: Int32 {
  get {
    return
  }
}
var DTF_HIDEW: Int32 {
  get {
    return
  }
}
var KERN_JOB_CONTROL: Int32 {
  get {
    return
  }
}
var DTF_NODUP: Int32 {
  get {
    return
  }
}
var DST_NONE: Int32 {
  get {
    return
  }
}
var KERN_KDDFLAGS: Int32 {
  get {
    return
  }
}
var DST_USA: Int32 {
  get {
    return
  }
}
var KERN_KDCPUMAP: Int32 {
  get {
    return
  }
}
var DST_WET: Int32 {
  get {
    return
  }
}
var __PRI_64_LENGTH_MODIFIER__: String {
  get {
    return
  }
}
var DST_EET: Int32 {
  get {
    return
  }
}
var KERN_INVALID_TASK: Int32 {
  get {
    return
  }
}
var DST_MET: Int32 {
  get {
    return
  }
}
var KERN_INVALID_SECURITY: Int32 {
  get {
    return
  }
}
var DOMAIN: Int32 {
  get {
    return
  }
}
var KERN_IPC: Int32 {
  get {
    return
  }
}
var __PRI_MAX_LENGTH_MODIFIER__: String {
  get {
    return
  }
}
var DST_AUST: Int32 {
  get {
    return
  }
}
var __PRI_8_LENGTH_MODIFIER__: String {
  get {
    return
  }
}
var DST_CAN: Int32 {
  get {
    return
  }
}
var KERN_INVALID_VALUE: Int32 {
  get {
    return
  }
}
var KERN_KDGETENTROPY: Int32 {
  get {
    return
  }
}
var D_FMT: Int32 {
  get {
    return
  }
}
var KERN_KDGETBUF: Int32 {
  get {
    return
  }
}
var D_MD_ORDER: Int32 {
  get {
    return
  }
}
var DT_UNKNOWN: Int32 {
  get {
    return
  }
}
var KERN_KDPIDEX: Int32 {
  get {
    return
  }
}
var D_DISK: Int32 {
  get {
    return
  }
}
var DT_WHT: Int32 {
  get {
    return
  }
}
var DT_REG: Int32 {
  get {
    return
  }
}
var KERN_KDEFLAGS: Int32 {
  get {
    return
  }
}
var KERN_KDGETREG: Int32 {
  get {
    return
  }
}
var DT_LNK: Int32 {
  get {
    return
  }
}
var DT_SOCK: Int32 {
  get {
    return
  }
}
var KERN_KDEBUG: Int32 {
  get {
    return
  }
}
var KERN_KDDISABLE_BG_TRACE: Int32 {
  get {
    return
  }
}
var KERN_KDENABLE_BG_TRACE: Int32 {
  get {
    return
  }
}
var DT_DIR: Int32 {
  get {
    return
  }
}
var KERN_KDENABLE: Int32 {
  get {
    return
  }
}
var DT_FIFO: Int32 {
  get {
    return
  }
}
var __PTHREAD_SIZE__: Int32 {
  get {
    return
  }
}
var KERN_KDSETRTCDEC: Int32 {
  get {
    return
  }
}
var __PTHREAD_RWLOCK_SIZE__: Int32 {
  get {
    return
  }
}
var DT_CHR: Int32 {
  get {
    return
  }
}
var DT_BLK: Int32 {
  get {
    return
  }
}
var KERN_KDSET_TYPEFILTER: Int32 {
  get {
    return
  }
}
var KERN_KDSETREG: Int32 {
  get {
    return
  }
}
var KERN_KDSETUP: Int32 {
  get {
    return
  }
}
var KERN_KDREADCURTHRMAP: Int32 {
  get {
    return
  }
}
var KERN_KDPIDTR: Int32 {
  get {
    return
  }
}
var KERN_KDSETBUF: Int32 {
  get {
    return
  }
}
var KERN_KDREMOVE: Int32 {
  get {
    return
  }
}
var KERN_KDREADTR: Int32 {
  get {
    return
  }
}
var EAI_NONAME: Int32 {
  get {
    return
  }
}
var __MAC_10_8: Int32 {
  get {
    return
  }
}
var KERN_AIOPROCMAX: Int32 {
  get {
    return
  }
}
var EAI_NODATA: Int32 {
  get {
    return
  }
}
var __MAC_10_9: Int32 {
  get {
    return
  }
}
var KERN_AIOTHREADS: Int32 {
  get {
    return
  }
}
var __MAC_OS_X_VERSION_MAX_ALLOWED: Int32 {
  get {
    return
  }
}
var KERN_ALREADY_IN_SET: Int32 {
  get {
    return
  }
}
var EAI_MEMORY: Int32 {
  get {
    return
  }
}
var __MAC_OS_X_VERSION_MIN_REQUIRED: Int32 {
  get {
    return
  }
}
var KERN_ALREADY_WAITING: Int32 {
  get {
    return
  }
}
var EAI_MAX: Int32 {
  get {
    return
  }
}
var EAI_FAIL: Int32 {
  get {
    return
  }
}
var EAI_FAMILY: Int32 {
  get {
    return
  }
}
var KERNEL_VERSION_MAX: Int32 {
  get {
    return
  }
}
var EAI_BADHINTS: Int32 {
  get {
    return
  }
}
var EAI_BADFLAGS: Int32 {
  get {
    return
  }
}
var KERN_ABORTED: Int32 {
  get {
    return
  }
}
var KERN_AFFINITY: Int32 {
  get {
    return
  }
}
var EAI_AGAIN: Int32 {
  get {
    return
  }
}
var KERN_AIOMAX: Int32 {
  get {
    return
  }
}
var KERN_CLASSIC: Int32 {
  get {
    return
  }
}
var EAI_ADDRFAMILY: Int32 {
  get {
    return
  }
}
var __MAC_10_0: Int32 {
  get {
    return
  }
}
var KERN_CLASSICHANDLER: Int32 {
  get {
    return
  }
}
var EAGAIN: Int32 {
  get {
    return
  }
}
var KERN_CLOCKRATE: Int32 {
  get {
    return
  }
}
var EADDRNOTAVAIL: Int32 {
  get {
    return
  }
}
var __MAC_10_10: Int32 {
  get {
    return
  }
}
var KERN_CODESIGN_ERROR: Int32 {
  get {
    return
  }
}
var EAFNOSUPPORT: Int32 {
  get {
    return
  }
}
var EADDRINUSE: Int32 {
  get {
    return
  }
}
var __MAC_10_2: Int32 {
  get {
    return
  }
}
var KERN_CODE_SELECTOR: Int32 {
  get {
    return
  }
}
var __MAC_10_1: Int32 {
  get {
    return
  }
}
var KERN_ARGMAX: Int32 {
  get {
    return
  }
}
var EACCES: Int32 {
  get {
    return
  }
}
var __MAC_10_3: Int32 {
  get {
    return
  }
}
var __MAC_10_4: Int32 {
  get {
    return
  }
}
var KERN_BOOTFILE: Int32 {
  get {
    return
  }
}
var E2BIG: Int32 {
  get {
    return
  }
}
var __MAC_10_5: Int32 {
  get {
    return
  }
}
var D_TTY: Int32 {
  get {
    return
  }
}
var KERN_BOOTTIME: Int32 {
  get {
    return
  }
}
var __MAC_10_6: Int32 {
  get {
    return
  }
}
var D_T_FMT: Int32 {
  get {
    return
  }
}
var D_TAPE: Int32 {
  get {
    return
  }
}
var KERN_CHECKOPENEVT: Int32 {
  get {
    return
  }
}
var KERN_DOMAINNAME: Int32 {
  get {
    return
  }
}
var ECHOK: Int32 {
  get {
    return
  }
}
var __MAC_10_7: Int32 {
  get {
    return
  }
}
var ECHOE: Int32 {
  get {
    return
  }
}
var ECHOCTL: Int32 {
  get {
    return
  }
}
var KERN_DUMMY: Int32 {
  get {
    return
  }
}
var ECHO: Int32 {
  get {
    return
  }
}
var KERN_DUMPDEV: Int32 {
  get {
    return
  }
}
var ECHILD: Int32 {
  get {
    return
  }
}
var KERN_EXCEPTION_PROTECTED: Int32 {
  get {
    return
  }
}
var ECANCELED: Int32 {
  get {
    return
  }
}
var KERN_COREDUMP: Int32 {
  get {
    return
  }
}
var EBUSY: Int32 {
  get {
    return
  }
}
var KERN_COREFILE: Int32 {
  get {
    return
  }
}
var EBADRPC: Int32 {
  get {
    return
  }
}
var KERN_DATA_SELECTOR: Int32 {
  get {
    return
  }
}
var EBADMSG: Int32 {
  get {
    return
  }
}
var KERN_DEFAULT_SET: Int32 {
  get {
    return
  }
}
var EBADMACHO: Int32 {
  get {
    return
  }
}
var EBADF: Int32 {
  get {
    return
  }
}
var EBADEXEC: Int32 {
  get {
    return
  }
}
var KERN_HOSTNAME: Int32 {
  get {
    return
  }
}
var EBADARCH: Int32 {
  get {
    return
  }
}
var KERN_INVALID_ADDRESS: Int32 {
  get {
    return
  }
}
var __MigPackStructs: Int32 {
  get {
    return
  }
}
var KERN_INVALID_ARGUMENT: Int32 {
  get {
    return
  }
}
var EAUTH: Int32 {
  get {
    return
  }
}
var EALREADY: Int32 {
  get {
    return
  }
}
var __MigTypeCheck: Int32 {
  get {
    return
  }
}
var KERN_INVALID_CAPABILITY: Int32 {
  get {
    return
  }
}
var EAI_SYSTEM: Int32 {
  get {
    return
  }
}
var KERN_EXEC: Int32 {
  get {
    return
  }
}
var __NDR_convert__char_rep__: Int32 {
  get {
    return
  }
}
var __NDR_convert__: Int32 {
  get {
    return
  }
}
var EAI_SOCKTYPE: Int32 {
  get {
    return
  }
}
var KERN_FAILURE: Int32 {
  get {
    return
  }
}
var EAI_SERVICE: Int32 {
  get {
    return
  }
}
var EAI_PROTOCOL: Int32 {
  get {
    return
  }
}
var __NDR_convert__float_rep__: Int32 {
  get {
    return
  }
}
var KERN_FILE: Int32 {
  get {
    return
  }
}
var EAI_OVERFLOW: Int32 {
  get {
    return
  }
}
var KERN_HOSTID: Int32 {
  get {
    return
  }
}
var KERN_OSRELDATE: Int32 {
  get {
    return
  }
}
var KERN_OPERATION_TIMED_OUT: Int32 {
  get {
    return
  }
}
var __NDR_convert__int_rep__: Int32 {
  get {
    return
  }
}
var KERN_OPENEVT_PROC: Int32 {
  get {
    return
  }
}
var KERN_NX_PROTECTION: Int32 {
  get {
    return
  }
}
var KERN_NTP_PLL: Int32 {
  get {
    return
  }
}
var KERN_NO_SPACE: Int32 {
  get {
    return
  }
}
var KERN_NO_ACCESS: Int32 {
  get {
    return
  }
}
var KERN_NOT_WAITING: Int32 {
  get {
    return
  }
}
var KERN_PROC: Int32 {
  get {
    return
  }
}
var ATTR_VOL_SETMASK: UInt32 {
  get {
    return
  }
}
var ATTR_VOL_SIGNATURE: Int32 {
  get {
    return
  }
}
var KERN_POSIX1: Int32 {
  get {
    return
  }
}
var ATTR_VOL_NAME: Int32 {
  get {
    return
  }
}
var KERN_POSIX: Int32 {
  get {
    return
  }
}
var ATTR_VOL_OBJCOUNT: Int32 {
  get {
    return
  }
}
var KERN_POLICY_STATIC: Int32 {
  get {
    return
  }
}
var ATTR_VOL_MOUNTFLAGS: Int32 {
  get {
    return
  }
}
var KERN_POLICY_LIMIT: Int32 {
  get {
    return
  }
}
var ATTR_VOL_MOUNTPOINT: Int32 {
  get {
    return
  }
}
var KERN_OSVERSION: Int32 {
  get {
    return
  }
}
var ATTR_VOL_MINALLOCATION: Int32 {
  get {
    return
  }
}
var KERN_OSREV: Int32 {
  get {
    return
  }
}
var KERN_OSTYPE: Int32 {
  get {
    return
  }
}
var ATTR_VOL_MOUNTEDDEVICE: Int32 {
  get {
    return
  }
}
var KERN_OSRELEASE: Int32 {
  get {
    return
  }
}
var AT_FDCWD: Int32 {
  get {
    return
  }
}
var DIRBLKSIZ: Int32 {
  get {
    return
  }
}
var ATTR_VOL_VALIDMASK: UInt32 {
  get {
    return
  }
}
var DIR_CONTROL_ENTRY: String {
  get {
    return
  }
}
var DIR_MNTSTATUS_MNTPOINT: Int32 {
  get {
    return
  }
}
var KERN_PROC_LCID: Int32 {
  get {
    return
  }
}
var KERN_PROC_PGRP: Int32 {
  get {
    return
  }
}
var AT_EACCESS: Int32 {
  get {
    return
  }
}
var ATTR_VOL_SPACEFREE: Int32 {
  get {
    return
  }
}
var KERN_PROC_ALL: Int32 {
  get {
    return
  }
}
var DEV_BSHIFT: Int32 {
  get {
    return
  }
}
var ATTR_VOL_UUID: Int32 {
  get {
    return
  }
}
var KERN_PROCNAME: Int32 {
  get {
    return
  }
}
var DEV_BSIZE: Int32 {
  get {
    return
  }
}
var KERN_PROCDELAYTERM: Int32 {
  get {
    return
  }
}
var ATTR_VOL_SIZE: Int32 {
  get {
    return
  }
}
var DFLCSIZ: Int32 {
  get {
    return
  }
}
var ATTR_VOL_SPACEAVAIL: Int32 {
  get {
    return
  }
}
var KERN_PROCARGS: Int32 {
  get {
    return
  }
}
var KERN_PROCARGS2: Int32 {
  get {
    return
  }
}
var KERN_RAGE_THREAD: Int32 {
  get {
    return
  }
}
var AUC_NOAUDIT: Int32 {
  get {
    return
  }
}
var DEVICE_PAGER_NOPHYSCACHE: Int32 {
  get {
    return
  }
}
var KERN_RAGE_PROC: Int32 {
  get {
    return
  }
}
var AUC_UNSET: Int32 {
  get {
    return
  }
}
var AUC_AUDITING: Int32 {
  get {
    return
  }
}
var DEVICE_PAGER_WRITE_THROUGH: Int32 {
  get {
    return
  }
}
var AUC_DISABLED: Int32 {
  get {
    return
  }
}
var KERN_RAGEVNODE: Int32 {
  get {
    return
  }
}
var AT_SYMLINK_FOLLOW: Int32 {
  get {
    return
  }
}
var AT_SYMLINK_NOFOLLOW: Int32 {
  get {
    return
  }
}
var KERN_PROTECTION_FAILURE: Int32 {
  get {
    return
  }
}
var DEVICE_PAGER_CACHE_INHIB: Int32 {
  get {
    return
  }
}
var KERN_PROF: Int32 {
  get {
    return
  }
}
var AT_REMOVEDIR: Int32 {
  get {
    return
  }
}
var KERN_PROC_UID: Int32 {
  get {
    return
  }
}
var DEVICE_PAGER_CONTIGUOUS: Int32 {
  get {
    return
  }
}
var DEVICE_PAGER_COHERENT: Int32 {
  get {
    return
  }
}
var AUDIT_GROUP: Int32 {
  get {
    return
  }
}
var KERN_LOCK_OWNED_SELF: Int32 {
  get {
    return
  }
}
var KERN_PROC_SESSION: Int32 {
  get {
    return
  }
}
var KERN_LOCK_SET_DESTROYED: Int32 {
  get {
    return
  }
}
var AUDIT_EVENT_FILE: String {
  get {
    return
  }
}
var KERN_PS_STRINGS: Int32 {
  get {
    return
  }
}
var KERN_PROC_TTY: Int32 {
  get {
    return
  }
}
var AUDIT_CONTROL_FILE: String {
  get {
    return
  }
}
var KERN_LCTX_LCID: Int32 {
  get {
    return
  }
}
var AUDIT_CNT: Int32 {
  get {
    return
  }
}
var DEVICE_PAGER_GUARDED: Int32 {
  get {
    return
  }
}
var KERN_KDWRITETR: Int32 {
  get {
    return
  }
}
var AUDIT_CLASS_FILE: String {
  get {
    return
  }
}
var AUDIT_ARGE: Int32 {
  get {
    return
  }
}
var AUDIT_ARGV: Int32 {
  get {
    return
  }
}
var AUDIT_AHLT: Int32 {
  get {
    return
  }
}
var KERN_LCTX_ALL: Int32 {
  get {
    return
  }
}
var KERN_KDTHRMAP: Int32 {
  get {
    return
  }
}
var AUDITDEV_FILENAME: String {
  get {
    return
  }
}
var KERN_KDWRITEMAP: Int32 {
  get {
    return
  }
}
var KERN_PROC_PID: Int32 {
  get {
    return
  }
}
var KERN_MAXID: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_TSOL: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_SOLARIS: Int32 {
  get {
    return
  }
}
var KERN_MAXPARTITIONS: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OPENBSM11: Int32 {
  get {
    return
  }
}
var KERN_MAXFILES: Int32 {
  get {
    return
  }
}
var KERN_MAXFILESPERPROC: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OPENBSM10: Int32 {
  get {
    return
  }
}
var KERN_LCTX: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OPENBSM: Int32 {
  get {
    return
  }
}
var KERN_LOCK_OWNED: Int32 {
  get {
    return
  }
}
var KERN_LOW_PRI_DELAY: Int32 {
  get {
    return
  }
}
var DIR_MNTSTATUS_TRIGGER: Int32 {
  get {
    return
  }
}
var KERN_LOW_PRI_WINDOW: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_OLDDARWIN: Int32 {
  get {
    return
  }
}
var KERN_LOCK_UNSTABLE: Int32 {
  get {
    return
  }
}
var AUDIT_HARD_LIMIT_FREE_BLOCKS: Int32 {
  get {
    return
  }
}
var DMBIS: Int32 {
  get {
    return
  }
}
var AUDIT_PATH: Int32 {
  get {
    return
  }
}
var DMBIC: Int32 {
  get {
    return
  }
}
var KERN_LOGSIGEXIT: Int32 {
  get {
    return
  }
}
var DK_FEATURE_UNMAP: Int32 {
  get {
    return
  }
}
var AUDIT_ON: Int32 {
  get {
    return
  }
}
var KERN_MEMORY_RESTART_COPY: Int32 {
  get {
    return
  }
}
var DMSET: Int32 {
  get {
    return
  }
}
var AUDIT_OFF: Int32 {
  get {
    return
  }
}
var AUDIT_MAX_GROUPS: Int32 {
  get {
    return
  }
}
var DMGET: Int32 {
  get {
    return
  }
}
var KERN_MEMORY_FAILURE: Int32 {
  get {
    return
  }
}
var AUDIT_MAX_ENV: Int32 {
  get {
    return
  }
}
var KERN_MAXVNODES: Int32 {
  get {
    return
  }
}
var AUDIT_MAX_ARGS: Int32 {
  get {
    return
  }
}
var KERN_MEMORY_PRESENT: Int32 {
  get {
    return
  }
}
var AUDIT_HOST_CONTROL_ENTRY: String {
  get {
    return
  }
}
var DK_FEATURE_PRIORITY: Int32 {
  get {
    return
  }
}
var KERN_MAXPROC: Int32 {
  get {
    return
  }
}
var AUDIT_HEADER_VERSION_TSOL25: Int32 {
  get {
    return
  }
}
var KERN_MEMORY_ERROR: Int32 {
  get {
    return
  }
}
var KERN_NOT_RECEIVER: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_EXPIRE_TRAILS: Int32 {
  get {
    return
  }
}
var KERN_NOT_SUPPORTED: Int32 {
  get {
    return
  }
}
var KERN_NOT_DEPRESSED: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_CLOSE_AND_DIE: Int32 {
  get {
    return
  }
}
var AUDIT_TRAIL: Int32 {
  get {
    return
  }
}
var KERN_NOT_IN_SET: Int32 {
  get {
    return
  }
}
var KERN_NISDOMAINNAME: Int32 {
  get {
    return
  }
}
var AUDIT_SEQ: Int32 {
  get {
    return
  }
}
var KERN_MEMORY_DATA_MOVED: Int32 {
  get {
    return
  }
}
var KERN_MAXPROCPERUID: Int32 {
  get {
    return
  }
}
var AUDIT_SCNT: Int32 {
  get {
    return
  }
}
var KERN_NODE_DOWN: Int32 {
  get {
    return
  }
}
var AUDIT_RECORD_MAGIC: UInt32 {
  get {
    return
  }
}
var KERN_NAME_EXISTS: Int32 {
  get {
    return
  }
}
var AUDIT_PUBLIC: Int32 {
  get {
    return
  }
}
var KERN_NGROUPS: Int32 {
  get {
    return
  }
}
var AUDIT_PERZONE: Int32 {
  get {
    return
  }
}
var KERN_NETBOOT: Int32 {
  get {
    return
  }
}
var KAUTH_ACL_FLAGS_PRIVATE: Int32 {
  get {
    return
  }
}
var KAUTH_ACL_DEFER_INHERIT: Int32 {
  get {
    return
  }
}
var KAUTH_ACL_NO_INHERIT: Int32 {
  get {
    return
  }
}
var KAUTH_ACL_MAX_ENTRIES: Int32 {
  get {
    return
  }
}
var KAUTH_CLEAR_CACHES: Int32 {
  get {
    return
  }
}
var KAUTH_ENDIAN_HOST: Int32 {
  get {
    return
  }
}
var KAUTH_ENDIAN_DISK: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_DEREGISTER: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_BADRQ: Int32 {
  get {
    return
  }
}
var __SWR: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_FATAL: Int32 {
  get {
    return
  }
}
var KERN_PROC_RUID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_FAILURE: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_ISMEMBER: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_INPROG: Int32 {
  get {
    return
  }
}
var __STDC_WANT_LIB_EXT1__: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_RESULT: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_REGISTER: Int32 {
  get {
    return
  }
}
var __bool_true_false_are_defined: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GGUID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_SUCCESS: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GSID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_GRNAM: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_PWNAM: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_UGUID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_SUPGRPS: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_UID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GGUID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_VALID_USID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GRNAM: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GID: Int32 {
  get {
    return
  }
}
var __WORDSIZE: Int32 {
  get {
    return
  }
}
var IP_TOS: Int32 {
  get {
    return
  }
}
var IP_TRAFFIC_MGT_BACKGROUND: Int32 {
  get {
    return
  }
}
var IP_TTL: Int32 {
  get {
    return
  }
}
var IP_UNBLOCK_SOURCE: Int32 {
  get {
    return
  }
}
var ISIG: Int32 {
  get {
    return
  }
}
var ISTRIP: Int32 {
  get {
    return
  }
}
var ITIMER_PROF: Int32 {
  get {
    return
  }
}
var ITIMER_REAL: Int32 {
  get {
    return
  }
}
var ITIMER_VIRTUAL: Int32 {
  get {
    return
  }
}
var IUTF8: Int32 {
  get {
    return
  }
}
var IXANY: Int32 {
  get {
    return
  }
}
var IXOFF: Int32 {
  get {
    return
  }
}
var IXON: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_ALARM: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_AUDIT: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_DENY: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_DIRECTORY_INHERIT: Int32 {
  get {
    return
  }
}
var __SOFF: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_FAILURE: Int32 {
  get {
    return
  }
}
var __SOPT: Int32 {
  get {
    return
  }
}
var __SRD: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_FILE_INHERIT: Int32 {
  get {
    return
  }
}
var __SRW: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_ALL: Int32 {
  get {
    return
  }
}
var __SSTR: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_EXECUTE: Int32 {
  get {
    return
  }
}
var __SLBF: Int32 {
  get {
    return
  }
}
var __SMOD: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_READ: Int32 {
  get {
    return
  }
}
var __SMBF: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_GENERIC_WRITE: Int32 {
  get {
    return
  }
}
var __SNBF: Int32 {
  get {
    return
  }
}
var __SNPT: Int32 {
  get {
    return
  }
}
var __SCN_MAX_LENGTH_MODIFIER__: String {
  get {
    return
  }
}
var KAUTH_ACE_INHERITED: Int32 {
  get {
    return
  }
}
var __SEOF: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_KINDMASK: Int32 {
  get {
    return
  }
}
var __SERR: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_LIMIT_INHERIT: Int32 {
  get {
    return
  }
}
var __SIGN: Int32 {
  get {
    return
  }
}
var __SAPP: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_ONLY_INHERIT: Int32 {
  get {
    return
  }
}
var __SALC: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_PERMIT: Int32 {
  get {
    return
  }
}
var __SCHED_PARAM_SIZE__: Int32 {
  get {
    return
  }
}
var KAUTH_ACE_SUCCESS: Int32 {
  get {
    return
  }
}
var __SCN_64_LENGTH_MODIFIER__: String {
  get {
    return
  }
}
var KAUTH_VNODE_CHECKIMMUTABLE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_CHANGE_OWNER: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_APPEND_DATA: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_ADD_SUBDIRECTORY: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_EXECUTE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_DELETE_CHILD: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_DELETE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_GENERIC_EXECUTE_BITS: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_READ_ATTRIBUTES: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_NOIMMUTABLE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_LIST_DIRECTORY: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_LINKTARGET: Int32 {
  get {
    return
  }
}
var code_emask: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_READ_SECURITY: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_READ_EXTATTRIBUTES: Int32 {
  get {
    return
  }
}
var clock_reply_MSG_COUNT: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_READ_DATA: Int32 {
  get {
    return
  }
}
var clock_priv_MSG_COUNT: Int32 {
  get {
    return
  }
}
var clock_MSG_COUNT: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_TAKE_OWNERSHIP: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_SYNCHRONIZE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_SEARCHBYANYONE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_SEARCH: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_EXTATTRIBUTES: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_DATA: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_ATTRIBUTES: Int32 {
  get {
    return
  }
}
var KERNEL_BOOT_INFO_MAX: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_WRITE_SECURITY: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_PWNAM: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_SUPGRPS: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_GSID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_UID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_USID: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WANT_UGUID: Int32 {
  get {
    return
  }
}
var KAUTH_FILESEC_DEFER_INHERIT: Int32 {
  get {
    return
  }
}
var KAUTH_EXTLOOKUP_WORKER: Int32 {
  get {
    return
  }
}
var KAUTH_FILESEC_FLAGS_PRIVATE: Int32 {
  get {
    return
  }
}
var KAUTH_FILESEC_MAGIC: Int32 {
  get {
    return
  }
}
var KAUTH_FILESEC_NO_INHERIT: Int32 {
  get {
    return
  }
}
var KAUTH_GUID_SIZE: Int32 {
  get {
    return
  }
}
var KAUTH_FILESEC_XATTR: String {
  get {
    return
  }
}
var KAUTH_GET_CACHE_SIZES: Int32 {
  get {
    return
  }
}
var KAUTH_NTSID_MAX_AUTHORITIES: Int32 {
  get {
    return
  }
}
var KAUTH_NTSID_HDRSIZE: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_ACCESS: Int32 {
  get {
    return
  }
}
var KAUTH_VNODE_ADD_FILE: Int32 {
  get {
    return
  }
}
var KAUTH_SET_CACHE_SIZES: Int32 {
  get {
    return
  }
}
var LC_TIME: Int32 {
  get {
    return
  }
}
var LDBL_DIG: Int32 {
  get {
    return
  }
}
var LDBL_MANT_DIG: Int32 {
  get {
    return
  }
}
var LC_MESSAGES: Int32 {
  get {
    return
  }
}
var LC_CTYPE: Int32 {
  get {
    return
  }
}
var LC_NUMERIC: Int32 {
  get {
    return
  }
}
var LC_MONETARY: Int32 {
  get {
    return
  }
}
var LCID_PROC_SELF: Int32 {
  get {
    return
  }
}
var LCID_CREATE: Int32 {
  get {
    return
  }
}
var LC_COLLATE: Int32 {
  get {
    return
  }
}
var LCID_REMOVE: Int32 {
  get {
    return
  }
}
var LC_ALL: Int32 {
  get {
    return
  }
}
var KMOD_RETURN_SUCCESS: Int32 {
  get {
    return
  }
}
var KMOD_RETURN_FAILURE: Int32 {
  get {
    return
  }
}
var LIO_WRITE: Int32 {
  get {
    return
  }
}
var LIO_WAIT: Int32 {
  get {
    return
  }
}
var LINK_MAX: Int32 {
  get {
    return
  }
}
var LIO_READ: Int32 {
  get {
    return
  }
}
var LIO_NOWAIT: Int32 {
  get {
    return
  }
}
var LIO_NOP: Int32 {
  get {
    return
  }
}
var LINE_MAX: Int32 {
  get {
    return
  }
}
var __AVAILABILITY_MACROS_USES_AVAILABILITY: Int32 {
  get {
    return
  }
}
var LDBL_MAX_EXP: Int32 {
  get {
    return
  }
}
var LDBL_MAX_10_EXP: Int32 {
  get {
    return
  }
}
var LDBL_MIN_EXP: Int32 {
  get {
    return
  }
}
var LDBL_MIN_10_EXP: Int32 {
  get {
    return
  }
}
var __BSM_INTERNAL_NOTIFY_KEY: String {
  get {
    return
  }
}
var KMOD_INFO_VERSION: Int32 {
  get {
    return
  }
}
var KMOD_MAX_NAME: Int32 {
  get {
    return
  }
}
var KIPC_SOCKBUF_WASTE: Int32 {
  get {
    return
  }
}
var KIPC_SOMAXCONN: Int32 {
  get {
    return
  }
}
var KIPC_SOQLIMITCOMPAT: Int32 {
  get {
    return
  }
}
var KIPC_MAX_LINKHDR: Int32 {
  get {
    return
  }
}
var KIPC_MAX_PROTOHDR: Int32 {
  get {
    return
  }
}
var KIPC_MBSTAT: Int32 {
  get {
    return
  }
}
var KIPC_NMBCLUSTERS: Int32 {
  get {
    return
  }
}
var KIPC_MAXSOCKBUF: Int32 {
  get {
    return
  }
}
var KIPC_MAX_DATALEN: Int32 {
  get {
    return
  }
}
var KIPC_MAX_HDR: Int32 {
  get {
    return
  }
}
var LOG_LOCAL7: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_READ_DATA: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_READ_ATTRIBUTES: Int32 {
  get {
    return
  }
}
var LOG_LOCAL6: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_LIST_DIRECTORY: Int32 {
  get {
    return
  }
}
var LOG_LOCAL5: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_FLAG_NO_INHERIT: Int32 {
  get {
    return
  }
}
var LOG_LOCAL4: Int32 {
  get {
    return
  }
}
var LOG_LOCAL2: Int32 {
  get {
    return
  }
}
var LOG_LOCAL3: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_SYNCHRONIZE: Int32 {
  get {
    return
  }
}
var LOG_LOCAL1: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_SEARCH: Int32 {
  get {
    return
  }
}
var LOG_LOCAL0: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_READ_SECURITY: Int32 {
  get {
    return
  }
}
var LOG_LAUNCHD: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_READ_EXTATTRIBUTES: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_EXTATTRIBUTES: Int32 {
  get {
    return
  }
}
var LOG_KERN: Int32 {
  get {
    return
  }
}
var LOG_INSTALL: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_DATA: Int32 {
  get {
    return
  }
}
var LOG_INFO: Int32 {
  get {
    return
  }
}
var LOG_FACMASK: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_ATTRIBUTES: Int32 {
  get {
    return
  }
}
var LOG_FTP: Int32 {
  get {
    return
  }
}
var LOG_ERR: Int32 {
  get {
    return
  }
}
var LOG_EMERG: Int32 {
  get {
    return
  }
}
var LOG_DAEMON: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_WRITE_SECURITY: Int32 {
  get {
    return
  }
}
var LOG_DEBUG: Int32 {
  get {
    return
  }
}
var LOG_SYSLOG: Int32 {
  get {
    return
  }
}
var LOG_REMOTEAUTH: Int32 {
  get {
    return
  }
}
var LOG_RAS: Int32 {
  get {
    return
  }
}
var LOG_PRIMASK: Int32 {
  get {
    return
  }
}
var LOG_PID: Int32 {
  get {
    return
  }
}
var LOG_PERROR: Int32 {
  get {
    return
  }
}
var LOG_ODELAY: Int32 {
  get {
    return
  }
}
var LOG_NOWAIT: Int32 {
  get {
    return
  }
}
var LOG_NOTICE: Int32 {
  get {
    return
  }
}
var LOG_NFACILITIES: Int32 {
  get {
    return
  }
}
var LOG_NEWS: Int32 {
  get {
    return
  }
}
var LOG_NETINFO: Int32 {
  get {
    return
  }
}
var LOG_NDELAY: Int32 {
  get {
    return
  }
}
var LOG_MAIL: Int32 {
  get {
    return
  }
}
var LOG_LPR: Int32 {
  get {
    return
  }
}
var LOAD_SCALE: Int32 {
  get {
    return
  }
}
var LOCAL_PEERCRED: Int32 {
  get {
    return
  }
}
var LLONG_MAX: Int64 {
  get {
    return
  }
}
var LITTLE_ENDIAN: Int32 {
  get {
    return
  }
}
var __CTERMID_DEFINED: Int32 {
  get {
    return
  }
}
var __DARWIN_64_BIT_INO_T: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_APPEND_DATA: Int32 {
  get {
    return
  }
}
var LOG_CRIT: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_CHANGE_OWNER: Int32 {
  get {
    return
  }
}
var LOG_CRON: Int32 {
  get {
    return
  }
}
var LOG_AUTHPRIV: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_ADD_FILE: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_ADD_SUBDIRECTORY: Int32 {
  get {
    return
  }
}
var LOG_CONS: Int32 {
  get {
    return
  }
}
var LOG_ALERT: Int32 {
  get {
    return
  }
}
var LOG_AUTH: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_DELETE: Int32 {
  get {
    return
  }
}
var LOCK_SH: Int32 {
  get {
    return
  }
}
var LOGIN_PROCESS: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_DELETE_CHILD: Int32 {
  get {
    return
  }
}
var LOCK_UN: Int32 {
  get {
    return
  }
}
var LOCK_NB: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_LIMIT_INHERIT: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_ONLY_INHERIT: Int32 {
  get {
    return
  }
}
var LOCKGROUP_ATTR_STAT: UInt64 {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_FILE_INHERIT: Int32 {
  get {
    return
  }
}
var LOCK_EX: Int32 {
  get {
    return
  }
}
var LOCKGROUP_MAX_NAME: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_ENTRY_INHERITED: Int32 {
  get {
    return
  }
}
var LOCAL_PEERPID: Int32 {
  get {
    return
  }
}
var LOCAL_PEERUUID: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_EXTENDED_DENY: Int32 {
  get {
    return
  }
}
var LOCAL_PEEREPID: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_EXECUTE: Int32 {
  get {
    return
  }
}
var __DARWIN_ACL_EXTENDED_ALLOW: Int32 {
  get {
    return
  }
}
var LOCAL_PEEREUUID: Int32 {
  get {
    return
  }
}
var KEV_DL_IFCAP_CHANGED: Int32 {
  get {
    return
  }
}
var KEV_DL_DELMULTI: Int32 {
  get {
    return
  }
}
var KEV_DL_IF_ATTACHED: Int32 {
  get {
    return
  }
}
var KEV_DL_IFDELEGATE_CHANGED: Int32 {
  get {
    return
  }
}
var KEV_DL_IF_DETACHING: Int32 {
  get {
    return
  }
}
var __DARWIN_C_LEVEL: Int {
  get {
    return
  }
}
var KEV_DL_IF_DETACHED: Int32 {
  get {
    return
  }
}
var __DARWIN_C_FULL: Int {
  get {
    return
  }
}
var KEV_DL_ISSUES: Int32 {
  get {
    return
  }
}
var KEV_DL_IF_IDLE_ROUTE_REFCNT: Int32 {
  get {
    return
  }
}
var KERN_VNODE: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_INITIALIZE: Int32 {
  get {
    return
  }
}
var __DARWIN_MAXNAMLEN: Int32 {
  get {
    return
  }
}
var KERN_VERSION: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_LOW_SPACE: Int32 {
  get {
    return
  }
}
var __DARWIN_LITTLE_ENDIAN: Int32 {
  get {
    return
  }
}
var KEV_CTL_REGISTERED: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_MAX: Int32 {
  get {
    return
  }
}
var KEV_CTL_DEREGISTERED: Int32 {
  get {
    return
  }
}
var __DARWIN_NBBY: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_MIN: Int32 {
  get {
    return
  }
}
var KEV_DL_ADDMULTI: Int32 {
  get {
    return
  }
}
var __DARWIN_MAXPATHLEN: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_NO_SPACE: Int32 {
  get {
    return
  }
}
var __DARWIN_FD_SETSIZE: Int32 {
  get {
    return
  }
}
var KEV_CTL_SUBCLASS: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_READ_FILE: Int32 {
  get {
    return
  }
}
var KEV_DL_AWDL_UNRESTRICTED: Int32 {
  get {
    return
  }
}
var __DARWIN_IPPORT_RESERVED: Int32 {
  get {
    return
  }
}
var AUDIT_TRIGGER_ROTATE_KERNEL: Int32 {
  get {
    return
  }
}
var KEV_DL_AWDL_RESTRICTED: Int32 {
  get {
    return
  }
}
var KEV_DL_SIFFLAGS: Int32 {
  get {
    return
  }
}
var __DARWIN_ONLY_64_BIT_INO_T: Int32 {
  get {
    return
  }
}
var KEV_DL_PROTO_DETACHED: Int32 {
  get {
    return
  }
}
var __DARWIN_NSIG: Int32 {
  get {
    return
  }
}
var __DARWIN_ONLY_VERS_1050: Int32 {
  get {
    return
  }
}
var KEV_DL_SIFMEDIA: Int32 {
  get {
    return
  }
}
var __DARWIN_ONLY_UNIX_CONFORMANCE: Int32 {
  get {
    return
  }
}
var KEV_DL_SIFGENERIC: Int32 {
  get {
    return
  }
}
var KEV_DL_SIFPHYS: Int32 {
  get {
    return
  }
}
var KEV_DL_SIFMTU: Int32 {
  get {
    return
  }
}
var KEV_DL_SIFMETRICS: Int32 {
  get {
    return
  }
}
var KEV_DL_WAKEFLAGS_CHANGED: Int32 {
  get {
    return
  }
}
var KEV_DL_SUBCLASS: Int32 {
  get {
    return
  }
}
var __DARWIN_NON_CANCELABLE: Int32 {
  get {
    return
  }
}
var KEV_DL_LINK_OFF: Int32 {
  get {
    return
  }
}
var KEV_DL_LINK_ADDRESS_CHANGED: Int32 {
  get {
    return
  }
}
var __DARWIN_PDP_ENDIAN: Int32 {
  get {
    return
  }
}
var KEV_DL_LINK_QUALITY_METRIC_CHANGED: Int32 {
  get {
    return
  }
}
var KEV_DL_LINK_ON: Int32 {
  get {
    return
  }
}
var KEV_DL_NODE_ABSENCE: Int32 {
  get {
    return
  }
}
var KEV_DL_MASTER_ELECTED: Int32 {
  get {
    return
  }
}
var KEV_DL_PROTO_ATTACHED: Int32 {
  get {
    return
  }
}
var KEV_DL_NODE_PRESENCE: Int32 {
  get {
    return
  }
}
var KERN_SECURELVL: Int32 {
  get {
    return
  }
}
var KERN_SEMAPHORE_DESTROYED: Int32 {
  get {
    return
  }
}
var KERN_SHREG_PRIVATIZABLE: Int32 {
  get {
    return
  }
}
var KERN_SPECULATIVE_READS: Int32 {
  get {
    return
  }
}
var KERN_SUCCESS: Int32 {
  get {
    return
  }
}
var KERN_SUGID_COREDUMP: Int32 {
  get {
    return
  }
}
var KERN_SYMFILE: Int32 {
  get {
    return
  }
}
var KERN_SYSV: Int32 {
  get {
    return
  }
}
var KERN_RESOURCE_SHORTAGE: Int32 {
  get {
    return
  }
}
var KERN_RETURN_MAX: Int32 {
  get {
    return
  }
}
var KERN_RIGHT_EXISTS: Int32 {
  get {
    return
  }
}
var KERN_RPC_CONTINUE_ORPHAN: Int32 {
  get {
    return
  }
}
var KERN_RPC_SERVER_TERMINATED: Int32 {
  get {
    return
  }
}
var KERN_RPC_TERMINATE_ORPHAN: Int32 {
  get {
    return
  }
}
var KERN_SAFEBOOT: Int32 {
  get {
    return
  }
}
var KERN_SAVED_IDS: Int32 {
  get {
    return
  }
}
var KERN_UNOPENEVT_PROC: Int32 {
  get {
    return
  }
}
var KERN_UNRAGE_PROC: Int32 {
  get {
    return
  }
}
var KERN_UNRAGE_THREAD: Int32 {
  get {
    return
  }
}
var KERN_UPDATEINTERVAL: Int32 {
  get {
    return
  }
}
var KERN_UREFS_OVERFLOW: Int32 {
  get {
    return
  }
}
var KERN_USRSTACK: Int32 {
  get {
    return
  }
}
var KERN_USRSTACK32: Int32 {
  get {
    return
  }
}
var KERN_USRSTACK64: Int32 {
  get {
    return
  }
}
var __DARWIN_CLK_TCK: Int32 {
  get {
    return
  }
}
var KERN_TERMINATED: Int32 {
  get {
    return
  }
}
var KERN_TFP_POLICY: Int32 {
  get {
    return
  }
}
var KERN_TFP: Int32 {
  get {
    return
  }
}
var KERN_TFP_POLICY_DEFAULT: Int32 {
  get {
    return
  }
}
var __DARWIN_C_ANSI: Int {
  get {
    return
  }
}
var KERN_TFP_POLICY_DENY: Int32 {
  get {
    return
  }
}
var KERN_THALTSTACK: Int32 {
  get {
    return
  }
}
var KERN_THREADNAME: Int32 {
  get {
    return
  }
}
var KERN_TRANSLATE: Int32 {
  get {
    return
  }
}
var __DARWIN_BIG_ENDIAN: Int32 {
  get {
    return
  }
}
var __DARWIN_BYTE_ORDER: Int32 {
  get {
    return
  }
}
var KERN_TTY: Int32 {
  get {
    return
  }
}
var __IPHONE_4_0: Int32 {
  get {
    return
  }
}
var __IPHONE_3_1: Int32 {
  get {
    return
  }
}
var __IPHONE_3_2: Int32 {
  get {
    return
  }
}
var __IPHONE_3_0: Int32 {
  get {
    return
  }
}
var __IPHONE_2_2: Int32 {
  get {
    return
  }
}
var __IPHONE_2_1: Int32 {
  get {
    return
  }
}
var __IPHONE_2_0: Int32 {
  get {
    return
  }
}
var __ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var __IPHONE_7_1: Int32 {
  get {
    return
  }
}
var __IPHONE_7_0: Int32 {
  get {
    return
  }
}
var __IPHONE_6_0: Int32 {
  get {
    return
  }
}
var __IPHONE_6_1: Int32 {
  get {
    return
  }
}
var __IPHONE_5_1: Int32 {
  get {
    return
  }
}
var __IPHONE_5_0: Int32 {
  get {
    return
  }
}
var __IPHONE_4_3: Int32 {
  get {
    return
  }
}
var __IPHONE_4_2: Int32 {
  get {
    return
  }
}
var __IPHONE_4_1: Int32 {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_ORGLOCAL: Int32 {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_NODELOCAL: Int32 {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_LINKLOCAL: Int32 {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_INTFACELOCAL: Int32 {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_GLOBAL: Int32 {
  get {
    return
  }
}
var __IPHONE_8_0: Int32 {
  get {
    return
  }
}
var __LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var __LP64_OFF64: Int32 {
  get {
    return
  }
}
var __KAME_VERSION: String {
  get {
    return
  }
}
var __IPV6_ADDR_SCOPE_SITELOCAL: Int32 {
  get {
    return
  }
}
var __DARWIN_SUF_64_BIT_INO_T: String {
  get {
    return
  }
}
var __DARWIN_SUF_EXTSN: String {
  get {
    return
  }
}
var __DARWIN_SUF_1050: String {
  get {
    return
  }
}
var __DARWIN_WCHAR_MAX: Int32 {
  get {
    return
  }
}
var __DARWIN_UNIX03: Int32 {
  get {
    return
  }
}
var __DARWIN_VERS_1050: Int32 {
  get {
    return
  }
}
var __DTF_READALL: Int32 {
  get {
    return
  }
}
var __ILP32_OFF32: Int32 {
  get {
    return
  }
}
var __GNUC_VA_LIST: Int32 {
  get {
    return
  }
}
var _WATTR_OK: Int32 {
  get {
    return
  }
}
var _UTX_USERSIZE: Int32 {
  get {
    return
  }
}
var INADDR_NONE: UInt32 {
  get {
    return
  }
}
var _V6_ILP32_OFF32: Int32 {
  get {
    return
  }
}
var _V6_ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var _V6_LP64_OFF64: Int32 {
  get {
    return
  }
}
var _V6_LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var _UTX_HOSTSIZE: Int32 {
  get {
    return
  }
}
var _UTX_IDSIZE: Int32 {
  get {
    return
  }
}
var _UTX_LINESIZE: Int32 {
  get {
    return
  }
}
var ABMON_1: Int32 {
  get {
    return
  }
}
var ABDAY_7: Int32 {
  get {
    return
  }
}
var INTMAX_MAX: Int64 {
  get {
    return
  }
}
var ABDAY_6: Int32 {
  get {
    return
  }
}
var ABDAY_5: Int32 {
  get {
    return
  }
}
var INTPTR_MAX: Int64 {
  get {
    return
  }
}
var ABDAY_4: Int32 {
  get {
    return
  }
}
var ABDAY_3: Int32 {
  get {
    return
  }
}
var ABDAY_2: Int32 {
  get {
    return
  }
}
var ABDAY_1: Int32 {
  get {
    return
  }
}
var INT8_MIN: Int32 {
  get {
    return
  }
}
var INT8_MAX: Int32 {
  get {
    return
  }
}
var ABMON_9: Int32 {
  get {
    return
  }
}
var INT_FAST8_MAX: Int32 {
  get {
    return
  }
}
var _XOPEN_REALTIME: Int32 {
  get {
    return
  }
}
var ABMON_8: Int32 {
  get {
    return
  }
}
var ABMON_7: Int32 {
  get {
    return
  }
}
var _XOPEN_PATH_MAX: Int32 {
  get {
    return
  }
}
var ABMON_6: Int32 {
  get {
    return
  }
}
var INT_LEAST16_MAX: Int32 {
  get {
    return
  }
}
var _XOPEN_SHM: Int32 {
  get {
    return
  }
}
var ABMON_5: Int32 {
  get {
    return
  }
}
var INT_FAST8_MIN: Int32 {
  get {
    return
  }
}
var _XOPEN_REALTIME_THREADS: Int32 {
  get {
    return
  }
}
var ABMON_4: Int32 {
  get {
    return
  }
}
var _XOPEN_VERSION: Int32 {
  get {
    return
  }
}
var ABMON_3: Int32 {
  get {
    return
  }
}
var INT_FAST16_MIN: Int32 {
  get {
    return
  }
}
var ABMON_2: Int32 {
  get {
    return
  }
}
var INT_FAST16_MAX: Int32 {
  get {
    return
  }
}
var ABMON_12: Int32 {
  get {
    return
  }
}
var INT_FAST64_MAX: Int64 {
  get {
    return
  }
}
var ABMON_11: Int32 {
  get {
    return
  }
}
var _XOPEN_XCU_VERSION: Int32 {
  get {
    return
  }
}
var _XOPEN_STREAMS: Int32 {
  get {
    return
  }
}
var ABMON_10: Int32 {
  get {
    return
  }
}
var _XBS5_ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var INT_FAST32_MAX: Int32 {
  get {
    return
  }
}
var INIT_PROCESS: Int32 {
  get {
    return
  }
}
var _XBS5_ILP32_OFF32: Int32 {
  get {
    return
  }
}
var _XBS5_LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var INI_IPV6: Int32 {
  get {
    return
  }
}
var _XOPEN_CRYPT: Int32 {
  get {
    return
  }
}
var _XBS5_LP64_OFF64: Int32 {
  get {
    return
  }
}
var INI_IPV4: Int32 {
  get {
    return
  }
}
var _XOPEN_UNIX: Int32 {
  get {
    return
  }
}
var INET6_ADDRSTRLEN: Int32 {
  get {
    return
  }
}
var _XOPEN_IOV_MAX: Int32 {
  get {
    return
  }
}
var _XOPEN_ENH_I18N: Int32 {
  get {
    return
  }
}
var _XOPEN_NAME_MAX: Int32 {
  get {
    return
  }
}
var INET_ADDRSTRLEN: Int32 {
  get {
    return
  }
}
var _XOPEN_LEGACY: Int32 {
  get {
    return
  }
}
var INT32_MAX: Int32 {
  get {
    return
  }
}
var _WEXT_OK: Int32 {
  get {
    return
  }
}
var INT64_MAX: Int64 {
  get {
    return
  }
}
var _WPERM_OK: Int32 {
  get {
    return
  }
}
var INPCK: Int32 {
  get {
    return
  }
}
var INLCR: Int32 {
  get {
    return
  }
}
var _WRITE_OK: Int32 {
  get {
    return
  }
}
var INT16_MIN: Int32 {
  get {
    return
  }
}
var _WSTOPPED: Int32 {
  get {
    return
  }
}
var INT16_MAX: Int32 {
  get {
    return
  }
}
var IN_CLASSD_HOST: Int32 {
  get {
    return
  }
}
var IN_CLASSC_NET: UInt32 {
  get {
    return
  }
}
var IN_CLASSC_NSHIFT: Int32 {
  get {
    return
  }
}
var IN_CLASSC_HOST: Int32 {
  get {
    return
  }
}
var IN_CLASSB_NET: UInt32 {
  get {
    return
  }
}
var IN_CLASSB_NSHIFT: Int32 {
  get {
    return
  }
}
var IN_LOOPBACKNET: Int32 {
  get {
    return
  }
}
var IN_CLASSD_NET: UInt32 {
  get {
    return
  }
}
var IN_CLASSD_NSHIFT: Int32 {
  get {
    return
  }
}
var INT_MAX: Int32 {
  get {
    return
  }
}
var INT_LEAST8_MAX: Int32 {
  get {
    return
  }
}
var INT_LEAST8_MIN: Int32 {
  get {
    return
  }
}
var INT_LEAST64_MAX: Int64 {
  get {
    return
  }
}
var INT_LEAST16_MIN: Int32 {
  get {
    return
  }
}
var INT_LEAST32_MAX: Int32 {
  get {
    return
  }
}
var IN_CLASSB_HOST: Int32 {
  get {
    return
  }
}
var IN_CLASSB_MAX: Int32 {
  get {
    return
  }
}
var IN_CLASSA_NET: UInt32 {
  get {
    return
  }
}
var __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: Int32 {
  get {
    return
  }
}
var IN_CLASSA_NSHIFT: Int32 {
  get {
    return
  }
}
var IN_CLASSA_HOST: Int32 {
  get {
    return
  }
}
var IN_CLASSA_MAX: Int32 {
  get {
    return
  }
}
var IPCTL_ACCEPTSOURCEROUTE: Int32 {
  get {
    return
  }
}
var IO_NUM_PRIORITIES: Int32 {
  get {
    return
  }
}
var IOV_MAX: Int32 {
  get {
    return
  }
}
var IOPOL_UTILITY: Int32 {
  get {
    return
  }
}
var IOPOL_TYPE_DISK: Int32 {
  get {
    return
  }
}
var IOPOL_THROTTLE: Int32 {
  get {
    return
  }
}
var IOPOL_STANDARD: Int32 {
  get {
    return
  }
}
var IOPOL_SCOPE_THREAD: Int32 {
  get {
    return
  }
}
var IOPOL_SCOPE_PROCESS: Int32 {
  get {
    return
  }
}
var IPCTL_MAXID: Int32 {
  get {
    return
  }
}
var IPCTL_KEEPFAITH: Int32 {
  get {
    return
  }
}
var IPCTL_INTRQMAXLEN: Int32 {
  get {
    return
  }
}
var IPCTL_INTRQDROPS: Int32 {
  get {
    return
  }
}
var IPCTL_GIF_TTL: Int32 {
  get {
    return
  }
}
var IPCTL_FORWARDING: Int32 {
  get {
    return
  }
}
var IPCTL_FASTFORWARDING: Int32 {
  get {
    return
  }
}
var IPCTL_DIRECTEDBROADCAST: Int32 {
  get {
    return
  }
}
var IPCTL_DEFTTL: Int32 {
  get {
    return
  }
}
var IOCPARM_MASK: Int32 {
  get {
    return
  }
}
var IOPOL_SCOPE_DARWIN_BG: Int32 {
  get {
    return
  }
}
var IOPOL_PASSIVE: Int32 {
  get {
    return
  }
}
var IOPOL_NORMAL: Int32 {
  get {
    return
  }
}
var IOPOL_IMPORTANT: Int32 {
  get {
    return
  }
}
var IOPOL_DEFAULT: Int32 {
  get {
    return
  }
}
var IOPOL_APPLICATION: Int32 {
  get {
    return
  }
}
var IFF_RUNNING: Int32 {
  get {
    return
  }
}
var IFF_SIMPLEX: Int32 {
  get {
    return
  }
}
var IFF_UP: Int32 {
  get {
    return
  }
}
var IFM_1000_CX: Int32 {
  get {
    return
  }
}
var IFM_1000_LX: Int32 {
  get {
    return
  }
}
var IFM_1000_T: Int32 {
  get {
    return
  }
}
var IFM_1000_SX: Int32 {
  get {
    return
  }
}
var IFM_100_FX: Int32 {
  get {
    return
  }
}
var IFM_100_T2: Int32 {
  get {
    return
  }
}
var IFM_100_T4: Int32 {
  get {
    return
  }
}
var IFM_100_TX: Int32 {
  get {
    return
  }
}
var IFM_100_VG: Int32 {
  get {
    return
  }
}
var IFM_10G_CX4: Int32 {
  get {
    return
  }
}
var IFM_10G_LR: Int32 {
  get {
    return
  }
}
var IFM_10G_SR: Int32 {
  get {
    return
  }
}
var IFM_10_2: Int32 {
  get {
    return
  }
}
var IFM_10G_T: Int32 {
  get {
    return
  }
}
var IFM_10_5: Int32 {
  get {
    return
  }
}
var IFCAP_TXCSUM: Int32 {
  get {
    return
  }
}
var IFCAP_TXSTATUS: Int32 {
  get {
    return
  }
}
var IFCAP_VLAN_HWTAGGING: Int32 {
  get {
    return
  }
}
var IFCAP_VLAN_MTU: Int32 {
  get {
    return
  }
}
var IFF_ALLMULTI: Int32 {
  get {
    return
  }
}
var IFF_ALTPHYS: Int32 {
  get {
    return
  }
}
var IFF_BROADCAST: Int32 {
  get {
    return
  }
}
var IFF_DEBUG: Int32 {
  get {
    return
  }
}
var IFF_LINK0: Int32 {
  get {
    return
  }
}
var IFF_LINK1: Int32 {
  get {
    return
  }
}
var IFF_LINK2: Int32 {
  get {
    return
  }
}
var IFF_LOOPBACK: Int32 {
  get {
    return
  }
}
var IFF_MULTICAST: Int32 {
  get {
    return
  }
}
var IFF_NOARP: Int32 {
  get {
    return
  }
}
var IFF_NOTRAILERS: Int32 {
  get {
    return
  }
}
var IFF_OACTIVE: Int32 {
  get {
    return
  }
}
var IFF_POINTOPOINT: Int32 {
  get {
    return
  }
}
var IFF_PROMISC: Int32 {
  get {
    return
  }
}
var IFM_HPNA_1: Int32 {
  get {
    return
  }
}
var IFM_HDX: Int32 {
  get {
    return
  }
}
var IFM_GMASK: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_ADHOC: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_DS11: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_DS1: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_DS22: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_DS2: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_FH1: Int32 {
  get {
    return
  }
}
var IFM_IEEE80211_DS5: Int32 {
  get {
    return
  }
}
var IFM_IMASK: UInt32 {
  get {
    return
  }
}
var IFM_IEEE80211_FH2: Int32 {
  get {
    return
  }
}
var IFM_LOOP: Int32 {
  get {
    return
  }
}
var IFM_ISHIFT: Int32 {
  get {
    return
  }
}
var IFM_10_STP: Int32 {
  get {
    return
  }
}
var IFM_10_FL: Int32 {
  get {
    return
  }
}
var IFM_ACTIVE: Int32 {
  get {
    return
  }
}
var IFM_10_T: Int32 {
  get {
    return
  }
}
var IFM_AVALID: Int32 {
  get {
    return
  }
}
var IFM_EEE: Int32 {
  get {
    return
  }
}
var IFM_AUTO: Int32 {
  get {
    return
  }
}
var IFM_FDDI: Int32 {
  get {
    return
  }
}
var IFM_ETHER: Int32 {
  get {
    return
  }
}
var IFM_FDDI_MMF: Int32 {
  get {
    return
  }
}
var IFM_FDDI_DA: Int32 {
  get {
    return
  }
}
var IFM_FDDI_UTP: Int32 {
  get {
    return
  }
}
var IFM_FDX: Int32 {
  get {
    return
  }
}
var IFM_FDDI_SMF: Int32 {
  get {
    return
  }
}
var IFM_FLAG1: Int32 {
  get {
    return
  }
}
var IFM_FLAG0: Int32 {
  get {
    return
  }
}
var IFM_FLOW: Int32 {
  get {
    return
  }
}
var IFM_FLAG2: Int32 {
  get {
    return
  }
}
var IFM_TOKEN: Int32 {
  get {
    return
  }
}
var IFM_TMASK: Int32 {
  get {
    return
  }
}
var IFM_TOK_CLASSIC: Int32 {
  get {
    return
  }
}
var IFM_TOK_DTR: Int32 {
  get {
    return
  }
}
var IFM_TOK_ALLR: Int32 {
  get {
    return
  }
}
var IFM_TOK_AUTO: Int32 {
  get {
    return
  }
}
var IFM_TOK_STP16: Int32 {
  get {
    return
  }
}
var IFM_TOK_STP100: Int32 {
  get {
    return
  }
}
var IFM_TOK_STP4: Int32 {
  get {
    return
  }
}
var IFM_TOK_ETR: Int32 {
  get {
    return
  }
}
var IFM_TOK_SRCRT: Int32 {
  get {
    return
  }
}
var IFM_NONE: Int32 {
  get {
    return
  }
}
var IFM_OMASK: Int32 {
  get {
    return
  }
}
var IFM_MANUAL: Int32 {
  get {
    return
  }
}
var IFM_NMASK: Int32 {
  get {
    return
  }
}
var IGNPAR: Int32 {
  get {
    return
  }
}
var IGNCR: Int32 {
  get {
    return
  }
}
var IGNBRK: Int32 {
  get {
    return
  }
}
var IF_WAKE_ON_MAGIC_PACKET: Int32 {
  get {
    return
  }
}
var ILL_ILLOPN: Int32 {
  get {
    return
  }
}
var ILL_ILLOPC: Int32 {
  get {
    return
  }
}
var ILL_ILLADR: Int32 {
  get {
    return
  }
}
var ILL_COPROC: Int32 {
  get {
    return
  }
}
var ILL_BADSTK: Int32 {
  get {
    return
  }
}
var IMAXBEL: Int32 {
  get {
    return
  }
}
var ILL_PRVREG: Int32 {
  get {
    return
  }
}
var ILL_PRVOPC: Int32 {
  get {
    return
  }
}
var ILL_NOOP: Int32 {
  get {
    return
  }
}
var ILL_ILLTRP: Int32 {
  get {
    return
  }
}
var IFM_TOK_UTP4: Int32 {
  get {
    return
  }
}
var IFM_TOK_UTP16: Int32 {
  get {
    return
  }
}
var IFM_TOK_UTP100: Int32 {
  get {
    return
  }
}
var IFNAMSIZ: Int32 {
  get {
    return
  }
}
var IFNET_SLOWHZ: Int32 {
  get {
    return
  }
}
var IFM_WAKESAMENET: Int32 {
  get {
    return
  }
}
var IFSTATMAX: Int32 {
  get {
    return
  }
}
var IFQ_MAXLEN: Int32 {
  get {
    return
  }
}
var IF_MINMTU: Int32 {
  get {
    return
  }
}
var IF_NAMESIZE: Int32 {
  get {
    return
  }
}
var IF_MAXMTU: Int32 {
  get {
    return
  }
}
var _SC_BARRIERS: Int32 {
  get {
    return
  }
}
var IPV6CTL_USE_DEFAULTZONE: Int32 {
  get {
    return
  }
}
var _SC_ATEXIT_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_USE_DEPRECATED: Int32 {
  get {
    return
  }
}
var _SC_BC_BASE_MAX: Int32 {
  get {
    return
  }
}
var _SC_BC_DIM_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_V6ONLY: Int32 {
  get {
    return
  }
}
var _SC_BC_SCALE_MAX: Int32 {
  get {
    return
  }
}
var IPV6PORT_ANONMAX: Int32 {
  get {
    return
  }
}
var _SC_BC_STRING_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_STATS: Int32 {
  get {
    return
  }
}
var _SC_CHILD_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_TEMPPLTIME: Int32 {
  get {
    return
  }
}
var IPV6CTL_TEMPVLTIME: Int32 {
  get {
    return
  }
}
var _SC_CLK_TCK: Int32 {
  get {
    return
  }
}
var IPV6CTL_USETEMPADDR: Int32 {
  get {
    return
  }
}
var _SC_CLOCK_SELECTION: Int32 {
  get {
    return
  }
}
var _SC_COLL_WEIGHTS_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_SENDREDIRECTS: Int32 {
  get {
    return
  }
}
var _SC_CPUTIME: Int32 {
  get {
    return
  }
}
var IPV6CTL_SOURCECHECK: Int32 {
  get {
    return
  }
}
var _SC_DELAYTIMER_MAX: Int32 {
  get {
    return
  }
}
var _SC_EXPR_NEST_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_SOURCECHECK_LOGINT: Int32 {
  get {
    return
  }
}
var _SC_FILE_LOCKING: Int32 {
  get {
    return
  }
}
var IPV6CTL_RR_PRUNE: Int32 {
  get {
    return
  }
}
var IPV6CTL_RTEXPIRE: Int32 {
  get {
    return
  }
}
var _SC_FSYNC: Int32 {
  get {
    return
  }
}
var IPV6CTL_RTMAXCACHE: Int32 {
  get {
    return
  }
}
var _SC_GETGR_R_SIZE_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_RTMINEXPIRE: Int32 {
  get {
    return
  }
}
var _SC_GETPW_R_SIZE_MAX: Int32 {
  get {
    return
  }
}
var _SC_2_FORT_RUN: Int32 {
  get {
    return
  }
}
var IPV6CTL_MRTSTATS: Int32 {
  get {
    return
  }
}
var _SC_2_LOCALEDEF: Int32 {
  get {
    return
  }
}
var IPV6CTL_NEIGHBORGCTHRESH: Int32 {
  get {
    return
  }
}
var _SC_2_PBS: Int32 {
  get {
    return
  }
}
var IPV6CTL_PREFER_TEMPADDR: Int32 {
  get {
    return
  }
}
var _SC_2_PBS_ACCOUNTING: Int32 {
  get {
    return
  }
}
var IPV6CTL_RIP6STATS: Int32 {
  get {
    return
  }
}
var _SC_2_PBS_CHECKPOINT: Int32 {
  get {
    return
  }
}
var IPV6CTL_MAXIFDEFROUTERS: Int32 {
  get {
    return
  }
}
var _SC_2_PBS_LOCATE: Int32 {
  get {
    return
  }
}
var IPV6CTL_MAXIFPREFIXES: Int32 {
  get {
    return
  }
}
var _SC_2_PBS_MESSAGE: Int32 {
  get {
    return
  }
}
var IPV6CTL_MCAST_PMTU: Int32 {
  get {
    return
  }
}
var _SC_2_PBS_TRACK: Int32 {
  get {
    return
  }
}
var IPV6CTL_MRTPROTO: Int32 {
  get {
    return
  }
}
var _SC_2_SW_DEV: Int32 {
  get {
    return
  }
}
var IPV6CTL_MAXDYNROUTES: Int32 {
  get {
    return
  }
}
var _SC_2_UPE: Int32 {
  get {
    return
  }
}
var _SC_2_VERSION: Int32 {
  get {
    return
  }
}
var IPV6CTL_MAXFRAGPACKETS: Int32 {
  get {
    return
  }
}
var _SC_ADVISORY_INFO: Int32 {
  get {
    return
  }
}
var IPV6CTL_MAXFRAGS: Int32 {
  get {
    return
  }
}
var _SC_AIO_LISTIO_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_MAXID: Int32 {
  get {
    return
  }
}
var _SC_AIO_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_HDRNESTLIMIT: Int32 {
  get {
    return
  }
}
var _SC_AIO_PRIO_DELTA_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_KAME_VERSION: Int32 {
  get {
    return
  }
}
var _SC_ARG_MAX: Int32 {
  get {
    return
  }
}
var IPV6CTL_KEEPFAITH: Int32 {
  get {
    return
  }
}
var _SC_ASYNCHRONOUS_IO: Int32 {
  get {
    return
  }
}
var IPV6CTL_LOG_INTERVAL: Int32 {
  get {
    return
  }
}
var IPV6_MULTICAST_HOPS: Int32 {
  get {
    return
  }
}
var _SC_OPEN_MAX: Int32 {
  get {
    return
  }
}
var _SC_PAGESIZE: Int32 {
  get {
    return
  }
}
var IPV6_MIN_MEMBERSHIPS: Int32 {
  get {
    return
  }
}
var _SC_PASS_MAX: Int32 {
  get {
    return
  }
}
var IPV6_MULTICAST_LOOP: Int32 {
  get {
    return
  }
}
var IPV6_MULTICAST_IF: Int32 {
  get {
    return
  }
}
var _SC_PAGE_SIZE: Int32 {
  get {
    return
  }
}
var _SC_PRIORITY_SCHEDULING: Int32 {
  get {
    return
  }
}
var IPV6_MAX_GROUP_SRC_FILTER: Int32 {
  get {
    return
  }
}
var _SC_PRIORITIZED_IO: Int32 {
  get {
    return
  }
}
var _SC_READER_WRITER_LOCKS: Int32 {
  get {
    return
  }
}
var IPV6_MAX_SOCK_SRC_FILTER: Int32 {
  get {
    return
  }
}
var _SC_RAW_SOCKETS: Int32 {
  get {
    return
  }
}
var IPV6_MAX_MEMBERSHIPS: Int32 {
  get {
    return
  }
}
var _SC_RE_DUP_MAX: Int32 {
  get {
    return
  }
}
var IPV6_FW_ZERO: Int32 {
  get {
    return
  }
}
var _SC_REGEXP: Int32 {
  get {
    return
  }
}
var IPV6_FW_GET: Int32 {
  get {
    return
  }
}
var _SC_REALTIME_SIGNALS: Int32 {
  get {
    return
  }
}
var IPV6_LEAVE_GROUP: Int32 {
  get {
    return
  }
}
var _SC_SAVED_IDS: Int32 {
  get {
    return
  }
}
var IPV6_JOIN_GROUP: Int32 {
  get {
    return
  }
}
var IPV6_IPSEC_POLICY: Int32 {
  get {
    return
  }
}
var IPV6_FW_ADD: Int32 {
  get {
    return
  }
}
var _SC_SEM_NSEMS_MAX: Int32 {
  get {
    return
  }
}
var _SC_RTSIG_MAX: Int32 {
  get {
    return
  }
}
var IPV6_FAITH: Int32 {
  get {
    return
  }
}
var _SC_SEMAPHORES: Int32 {
  get {
    return
  }
}
var _SC_SHARED_MEMORY_OBJECTS: Int32 {
  get {
    return
  }
}
var IPV6_FW_FLUSH: Int32 {
  get {
    return
  }
}
var _SC_SEM_VALUE_MAX: Int32 {
  get {
    return
  }
}
var IPV6_FW_DEL: Int32 {
  get {
    return
  }
}
var _SC_IOV_MAX: Int32 {
  get {
    return
  }
}
var IPV6_CHECKSUM: Int32 {
  get {
    return
  }
}
var _SC_HOST_NAME_MAX: Int32 {
  get {
    return
  }
}
var IPV6_BOUND_IF: Int32 {
  get {
    return
  }
}
var AXSIG: Int32 {
  get {
    return
  }
}
var IPV6_DEFAULT_MULTICAST_LOOP: Int32 {
  get {
    return
  }
}
var _SC_IPV6: Int32 {
  get {
    return
  }
}
var IPV6_DEFAULT_MULTICAST_HOPS: Int32 {
  get {
    return
  }
}
var _SC_LOGIN_NAME_MAX: Int32 {
  get {
    return
  }
}
var IPV6_2292PKTINFO: Int32 {
  get {
    return
  }
}
var _SC_JOB_CONTROL: Int32 {
  get {
    return
  }
}
var _SC_LINE_MAX: Int32 {
  get {
    return
  }
}
var IPV6_2292NEXTHOP: Int32 {
  get {
    return
  }
}
var _SC_MEMLOCK: Int32 {
  get {
    return
  }
}
var IPV6_BINDV6ONLY: Int32 {
  get {
    return
  }
}
var _SC_MAPPED_FILES: Int32 {
  get {
    return
  }
}
var IPV6_2292PKTOPTIONS: Int32 {
  get {
    return
  }
}
var IPV6_2292RTHDR: Int32 {
  get {
    return
  }
}
var IPV6_2292DSTOPTS: Int32 {
  get {
    return
  }
}
var _SC_MEMORY_PROTECTION: Int32 {
  get {
    return
  }
}
var _SC_MEMLOCK_RANGE: Int32 {
  get {
    return
  }
}
var IPV6_2292HOPOPTS: Int32 {
  get {
    return
  }
}
var _SC_MONOTONIC_CLOCK: Int32 {
  get {
    return
  }
}
var _SC_MQ_OPEN_MAX: Int32 {
  get {
    return
  }
}
var IPV6_2292HOPLIMIT: Int32 {
  get {
    return
  }
}
var _SC_MESSAGE_PASSING: Int32 {
  get {
    return
  }
}
var IPV6PORT_RESERVED: Int32 {
  get {
    return
  }
}
var _SC_NGROUPS_MAX: Int32 {
  get {
    return
  }
}
var IPV6PORT_ANONMIN: Int32 {
  get {
    return
  }
}
var _SC_MQ_PRIO_MAX: Int32 {
  get {
    return
  }
}
var IPV6PORT_RESERVEDMIN: Int32 {
  get {
    return
  }
}
var _SC_NPROCESSORS_ONLN: Int32 {
  get {
    return
  }
}
var _SC_NPROCESSORS_CONF: Int32 {
  get {
    return
  }
}
var IP_IPSEC_POLICY: Int32 {
  get {
    return
  }
}
var IP_MAX_GROUP_SRC_FILTER: Int32 {
  get {
    return
  }
}
var _SC_THREAD_PROCESS_SHARED: Int32 {
  get {
    return
  }
}
var _SC_THREAD_SAFE_FUNCTIONS: Int32 {
  get {
    return
  }
}
var IP_FW_ZERO: Int32 {
  get {
    return
  }
}
var _SC_THREAD_PRIO_INHERIT: Int32 {
  get {
    return
  }
}
var IP_HDRINCL: Int32 {
  get {
    return
  }
}
var _SC_THREAD_PRIO_PROTECT: Int32 {
  get {
    return
  }
}
var _SC_THREAD_THREADS_MAX: Int32 {
  get {
    return
  }
}
var IP_FW_FLUSH: Int32 {
  get {
    return
  }
}
var IP_FW_RESETLOG: Int32 {
  get {
    return
  }
}
var IP_FW_GET: Int32 {
  get {
    return
  }
}
var _SC_THREAD_SPORADIC_SERVER: Int32 {
  get {
    return
  }
}
var IP_FW_ADD: Int32 {
  get {
    return
  }
}
var _SC_THREAD_STACK_MIN: Int32 {
  get {
    return
  }
}
var IP_FW_DEL: Int32 {
  get {
    return
  }
}
var IP_DUMMYNET_GET: Int32 {
  get {
    return
  }
}
var _SC_TIMEOUTS: Int32 {
  get {
    return
  }
}
var IP_FAITH: Int32 {
  get {
    return
  }
}
var _SC_TRACE: Int32 {
  get {
    return
  }
}
var _SC_TRACE_EVENT_FILTER: Int32 {
  get {
    return
  }
}
var IP_DUMMYNET_DEL: Int32 {
  get {
    return
  }
}
var _SC_TIMERS: Int32 {
  get {
    return
  }
}
var IP_DUMMYNET_FLUSH: Int32 {
  get {
    return
  }
}
var _SC_TIMER_MAX: Int32 {
  get {
    return
  }
}
var IP_DROP_SOURCE_MEMBERSHIP: Int32 {
  get {
    return
  }
}
var _SC_TRACE_LOG: Int32 {
  get {
    return
  }
}
var IP_DUMMYNET_CONFIGURE: Int32 {
  get {
    return
  }
}
var _SC_TRACE_NAME_MAX: Int32 {
  get {
    return
  }
}
var IP_DEFAULT_MULTICAST_TTL: Int32 {
  get {
    return
  }
}
var _SC_TRACE_EVENT_NAME_MAX: Int32 {
  get {
    return
  }
}
var IP_DROP_MEMBERSHIP: Int32 {
  get {
    return
  }
}
var _SC_TRACE_INHERIT: Int32 {
  get {
    return
  }
}
var _SC_SPAWN: Int32 {
  get {
    return
  }
}
var IP_BOUND_IF: Int32 {
  get {
    return
  }
}
var _SC_SPIN_LOCKS: Int32 {
  get {
    return
  }
}
var IP_DEFAULT_MULTICAST_LOOP: Int32 {
  get {
    return
  }
}
var _SC_SHELL: Int32 {
  get {
    return
  }
}
var IP_ADD_SOURCE_MEMBERSHIP: Int32 {
  get {
    return
  }
}
var _SC_SIGQUEUE_MAX: Int32 {
  get {
    return
  }
}
var IP_BLOCK_SOURCE: Int32 {
  get {
    return
  }
}
var IPV6_V6ONLY: Int32 {
  get {
    return
  }
}
var IP_ADD_MEMBERSHIP: Int32 {
  get {
    return
  }
}
var _SC_SPORADIC_SERVER: Int32 {
  get {
    return
  }
}
var _SC_SYMLOOP_MAX: Int32 {
  get {
    return
  }
}
var IPV6_TCLASS: Int32 {
  get {
    return
  }
}
var _SC_SS_REPL_MAX: Int32 {
  get {
    return
  }
}
var _SC_SYNCHRONIZED_IO: Int32 {
  get {
    return
  }
}
var IPV6_UNICAST_HOPS: Int32 {
  get {
    return
  }
}
var _SC_STREAM_MAX: Int32 {
  get {
    return
  }
}
var IPV6_RTHDR_TYPE_0: Int32 {
  get {
    return
  }
}
var _SC_THREAD_ATTR_STACKSIZE: Int32 {
  get {
    return
  }
}
var _SC_THREAD_CPUTIME: Int32 {
  get {
    return
  }
}
var IPV6_SOCKOPT_RESERVED1: Int32 {
  get {
    return
  }
}
var IPV6_RTHDR_LOOSE: Int32 {
  get {
    return
  }
}
var _SC_THREADS: Int32 {
  get {
    return
  }
}
var IPV6_PORTRANGE_HIGH: Int32 {
  get {
    return
  }
}
var IPV6_RTHDR_STRICT: Int32 {
  get {
    return
  }
}
var IPV6_PORTRANGE_LOW: Int32 {
  get {
    return
  }
}
var IPV6_RECVTCLASS: Int32 {
  get {
    return
  }
}
var IPV6_PORTRANGE: Int32 {
  get {
    return
  }
}
var _SC_THREAD_PRIORITY_SCHEDULING: Int32 {
  get {
    return
  }
}
var _SC_THREAD_KEYS_MAX: Int32 {
  get {
    return
  }
}
var IPV6_PORTRANGE_DEFAULT: Int32 {
  get {
    return
  }
}
var _SC_THREAD_ATTR_STACKADDR: Int32 {
  get {
    return
  }
}
var _SC_THREAD_DESTRUCTOR_ITERATIONS: Int32 {
  get {
    return
  }
}
var IP_STRIPHDR: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_SHM: Int32 {
  get {
    return
  }
}
var IP_RSVP_VIF_ON: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_REALTIME_THREADS: Int32 {
  get {
    return
  }
}
var IP_RSVP_VIF_OFF: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_REALTIME: Int32 {
  get {
    return
  }
}
var IP_RSVP_ON: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_LEGACY: Int32 {
  get {
    return
  }
}
var IP_RSVP_OFF: Int32 {
  get {
    return
  }
}
var IP_RETOPTS: Int32 {
  get {
    return
  }
}
var IP_RECVTTL: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_XCU_VERSION: Int32 {
  get {
    return
  }
}
var IP_RECVRETOPTS: Int32 {
  get {
    return
  }
}
var IP_RECVPKTINFO: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_STREAMS: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_VERSION: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_UNIX: Int32 {
  get {
    return
  }
}
var IP_RECVOPTS: Int32 {
  get {
    return
  }
}
var IP_RECVIF: Int32 {
  get {
    return
  }
}
var IP_RECVDSTADDR: Int32 {
  get {
    return
  }
}
var IP_PORTRANGE_LOW: Int32 {
  get {
    return
  }
}
var IP_PORTRANGE_HIGH: Int32 {
  get {
    return
  }
}
var IP_PORTRANGE_DEFAULT: Int32 {
  get {
    return
  }
}
var IP_PORTRANGE: Int32 {
  get {
    return
  }
}
var _SMP_DB: String {
  get {
    return
  }
}
var IP_PKTINFO: Int32 {
  get {
    return
  }
}
var IP_OPTIONS: Int32 {
  get {
    return
  }
}
var _SC_TYPED_MEMORY_OBJECTS: Int32 {
  get {
    return
  }
}
var IP_OLD_FW_ZERO: Int32 {
  get {
    return
  }
}
var _SC_TTY_NAME_MAX: Int32 {
  get {
    return
  }
}
var _SC_TRACE_USER_EVENT_MAX: Int32 {
  get {
    return
  }
}
var IP_OLD_FW_RESETLOG: Int32 {
  get {
    return
  }
}
var IP_OLD_FW_GET: Int32 {
  get {
    return
  }
}
var _SC_TRACE_SYS_MAX: Int32 {
  get {
    return
  }
}
var IP_OLD_FW_FLUSH: Int32 {
  get {
    return
  }
}
var IP_OLD_FW_ADD: Int32 {
  get {
    return
  }
}
var IP_OLD_FW_DEL: Int32 {
  get {
    return
  }
}
var _SC_V6_LP64_OFF64: Int32 {
  get {
    return
  }
}
var IP_NAT__XXX: Int32 {
  get {
    return
  }
}
var _SC_V6_ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var IP_MULTICAST_VIF: Int32 {
  get {
    return
  }
}
var _SC_V6_ILP32_OFF32: Int32 {
  get {
    return
  }
}
var IP_MULTICAST_TTL: Int32 {
  get {
    return
  }
}
var _SC_TZNAME_MAX: Int32 {
  get {
    return
  }
}
var IP_MULTICAST_LOOP: Int32 {
  get {
    return
  }
}
var _SC_XBS5_ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var IP_MULTICAST_IFINDEX: Int32 {
  get {
    return
  }
}
var _SC_XBS5_ILP32_OFF32: Int32 {
  get {
    return
  }
}
var IP_MULTICAST_IF: Int32 {
  get {
    return
  }
}
var _SC_VERSION: Int32 {
  get {
    return
  }
}
var _SC_V6_LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var IP_MSFILTER: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_ENH_I18N: Int32 {
  get {
    return
  }
}
var IP_MIN_MEMBERSHIPS: Int32 {
  get {
    return
  }
}
var _SC_XOPEN_CRYPT: Int32 {
  get {
    return
  }
}
var IP_MAX_SOCK_SRC_FILTER: Int32 {
  get {
    return
  }
}
var _SC_XBS5_LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var IP_MAX_SOCK_MUTE_FILTER: Int32 {
  get {
    return
  }
}
var _SC_XBS5_LP64_OFF64: Int32 {
  get {
    return
  }
}
var IP_MAX_MEMBERSHIPS: Int32 {
  get {
    return
  }
}
var IPPROTO_ADFS: Int32 {
  get {
    return
  }
}
var AHZ: Int32 {
  get {
    return
  }
}
var AIO_ALLDONE: Int32 {
  get {
    return
  }
}
var IPPROTO_AH: Int32 {
  get {
    return
  }
}
var AIO_CANCELED: Int32 {
  get {
    return
  }
}
var IPPROTO_AHIP: Int32 {
  get {
    return
  }
}
var AIO_LISTIO_MAX: Int32 {
  get {
    return
  }
}
var IPPROTO_APES: Int32 {
  get {
    return
  }
}
var AIO_NOTCANCELED: Int32 {
  get {
    return
  }
}
var AI_ADDRCONFIG: Int32 {
  get {
    return
  }
}
var IPPROTO_ARGUS: Int32 {
  get {
    return
  }
}
var AI_ALL: Int32 {
  get {
    return
  }
}
var IPPROTO_AX25: Int32 {
  get {
    return
  }
}
var IPPROTO_BLT: Int32 {
  get {
    return
  }
}
var AI_CANONNAME: Int32 {
  get {
    return
  }
}
var IPPROTO_BHA: Int32 {
  get {
    return
  }
}
var IPPROTO_BRSATMON: Int32 {
  get {
    return
  }
}
var AI_NUMERICHOST: Int32 {
  get {
    return
  }
}
var IPC_W: Int32 {
  get {
    return
  }
}
var AI_NUMERICSERV: Int32 {
  get {
    return
  }
}
var IPPORT_HIFIRSTAUTO: Int32 {
  get {
    return
  }
}
var AI_PASSIVE: Int32 {
  get {
    return
  }
}
var AI_V4MAPPED: Int32 {
  get {
    return
  }
}
var IPPORT_HILASTAUTO: Int32 {
  get {
    return
  }
}
var AI_V4MAPPED_CFG: Int32 {
  get {
    return
  }
}
var IPPORT_RESERVED: Int32 {
  get {
    return
  }
}
var IPPORT_RESERVEDSTART: Int32 {
  get {
    return
  }
}
var IPPORT_USERRESERVED: Int32 {
  get {
    return
  }
}
var IPPROTO_3PC: Int32 {
  get {
    return
  }
}
var ALLOW_OBSOLETE_CARBON_MACMEMORY: Int32 {
  get {
    return
  }
}
var IPC_M: Int32 {
  get {
    return
  }
}
var IPC_NOWAIT: Int32 {
  get {
    return
  }
}
var ALLOW_OBSOLETE_CARBON_OSUTILS: Int32 {
  get {
    return
  }
}
var IPC_R: Int32 {
  get {
    return
  }
}
var IPC_RMID: Int32 {
  get {
    return
  }
}
var ALRMTYPE: Int32 {
  get {
    return
  }
}
var ALTWERASE: Int32 {
  get {
    return
  }
}
var IPC_SET: Int32 {
  get {
    return
  }
}
var ALT_DIGITS: Int32 {
  get {
    return
  }
}
var IPC_STAT: Int32 {
  get {
    return
  }
}
var _SS_MAXSIZE: Int32 {
  get {
    return
  }
}
var AM_STR: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_BOND: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_DISC: Int32 {
  get {
    return
  }
}
var IPCTL_RTEXPIRE: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_ETHERNET: Int32 {
  get {
    return
  }
}
var IPCTL_RTMAXCACHE: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_FAITH: Int32 {
  get {
    return
  }
}
var IPCTL_RTMINEXPIRE: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_FIREWIRE: Int32 {
  get {
    return
  }
}
var IPCTL_SENDREDIRECTS: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_GIF: Int32 {
  get {
    return
  }
}
var IPCTL_SOURCEROUTE: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_LOOPBACK: Int32 {
  get {
    return
  }
}
var IPCTL_STATS: Int32 {
  get {
    return
  }
}
var IPC_CREAT: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_MDECAP: Int32 {
  get {
    return
  }
}
var IPC_EXCL: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_PPP: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_SLIP: Int32 {
  get {
    return
  }
}
var IPPROTO_IGMP: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_PVC: Int32 {
  get {
    return
  }
}
var IPPROTO_IDRP: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_TUN: Int32 {
  get {
    return
  }
}
var IPPROTO_IGRP: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_STF: Int32 {
  get {
    return
  }
}
var IPPROTO_IGP: Int32 {
  get {
    return
  }
}
var IPPROTO_INP: Int32 {
  get {
    return
  }
}
var IPPROTO_INLSP: Int32 {
  get {
    return
  }
}
var APPLE_IF_FAM_VLAN: Int32 {
  get {
    return
  }
}
var IPPROTO_IL: Int32 {
  get {
    return
  }
}
var IPPROTO_IPCOMP: Int32 {
  get {
    return
  }
}
var AQ_MAXBUFSZ: Int32 {
  get {
    return
  }
}
var AQ_HIWATER: Int32 {
  get {
    return
  }
}
var IPPROTO_IP: Int32 {
  get {
    return
  }
}
var AQ_LOWATER: Int32 {
  get {
    return
  }
}
var IPPROTO_GRE: Int32 {
  get {
    return
  }
}
var ARCDENSITY: Int32 {
  get {
    return
  }
}
var IPPROTO_GMTP: Int32 {
  get {
    return
  }
}
var AQ_MAXHIGH: Int32 {
  get {
    return
  }
}
var ARG1_EXTENT: Int32 {
  get {
    return
  }
}
var IPPROTO_HMP: Int32 {
  get {
    return
  }
}
var IPPROTO_HELLO: Int32 {
  get {
    return
  }
}
var ARGS2_EXTENT: Int32 {
  get {
    return
  }
}
var ARGS3_EXTENT: Int32 {
  get {
    return
  }
}
var IPPROTO_ICMP: Int32 {
  get {
    return
  }
}
var IPPROTO_ICMPV6: Int32 {
  get {
    return
  }
}
var ARGS10_EXTENT: Int32 {
  get {
    return
  }
}
var IPPROTO_HOPOPTS: Int32 {
  get {
    return
  }
}
var IPPROTO_IDPR: Int32 {
  get {
    return
  }
}
var ARGS5_EXTENT: Int32 {
  get {
    return
  }
}
var IPPROTO_IDP: Int32 {
  get {
    return
  }
}
var ARGS4_EXTENT: Int32 {
  get {
    return
  }
}
var ARGS7_EXTENT: Int32 {
  get {
    return
  }
}
var ARGS6_EXTENT: Int32 {
  get {
    return
  }
}
var IPPROTO_EGP: Int32 {
  get {
    return
  }
}
var IPPROTO_DSTOPTS: Int32 {
  get {
    return
  }
}
var IPPROTO_ENCAP: Int32 {
  get {
    return
  }
}
var ARGS9_EXTENT: Int32 {
  get {
    return
  }
}
var IPPROTO_EMCON: Int32 {
  get {
    return
  }
}
var ARGS8_EXTENT: Int32 {
  get {
    return
  }
}
var ATTR_BIT_MAP_COUNT: Int32 {
  get {
    return
  }
}
var IPPROTO_ESP: Int32 {
  get {
    return
  }
}
var IPPROTO_ETHERIP: Int32 {
  get {
    return
  }
}
var ASU: Int32 {
  get {
    return
  }
}
var IPPROTO_EON: Int32 {
  get {
    return
  }
}
var ATTR_CMN_ACCESSMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_GGP: Int32 {
  get {
    return
  }
}
var IPPROTO_FRAGMENT: Int32 {
  get {
    return
  }
}
var ATTR_CMN_ADDEDTIME: Int32 {
  get {
    return
  }
}
var IPPROTO_CHAOS: Int32 {
  get {
    return
  }
}
var ATTR_CMN_ACCTIME: Int32 {
  get {
    return
  }
}
var IPPROTO_CFTP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_CHGTIME: Int32 {
  get {
    return
  }
}
var IPPROTO_CPHB: Int32 {
  get {
    return
  }
}
var ATTR_CMN_BKUPTIME: Int32 {
  get {
    return
  }
}
var IPPROTO_CMTP: Int32 {
  get {
    return
  }
}
var IPPROTO_DDP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_DATA_PROTECT_FLAGS: Int32 {
  get {
    return
  }
}
var ATTR_CMN_CRTIME: Int32 {
  get {
    return
  }
}
var IPPROTO_CPNX: Int32 {
  get {
    return
  }
}
var ATTR_CMN_DOCUMENT_ID: Int32 {
  get {
    return
  }
}
var IPPROTO_DONE: Int32 {
  get {
    return
  }
}
var IPPROTO_DGP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_DEVID: Int32 {
  get {
    return
  }
}
var IPPROTO_DIVERT: Int32 {
  get {
    return
  }
}
var IPPROTO_RAW: Int32 {
  get {
    return
  }
}
var ATTR_CMN_FILEID: Int32 {
  get {
    return
  }
}
var IPPROTO_RCCMON: Int32 {
  get {
    return
  }
}
var ATTR_CMN_FLAGS: Int32 {
  get {
    return
  }
}
var ATTR_CMN_ERROR: Int32 {
  get {
    return
  }
}
var IPPROTO_PRM: Int32 {
  get {
    return
  }
}
var IPPROTO_PVP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_EXTENDED_SECURITY: Int32 {
  get {
    return
  }
}
var IPPROTO_PUP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_FULLPATH: Int32 {
  get {
    return
  }
}
var IPPROTO_RSVP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_GEN_COUNT: Int32 {
  get {
    return
  }
}
var IPPROTO_RVD: Int32 {
  get {
    return
  }
}
var IPPROTO_RDP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_FNDRINFO: Int32 {
  get {
    return
  }
}
var ATTR_CMN_FSID: Int32 {
  get {
    return
  }
}
var IPPROTO_ROUTING: Int32 {
  get {
    return
  }
}
var ATTR_CMN_MODTIME: Int32 {
  get {
    return
  }
}
var IPPROTO_NSP: Int32 {
  get {
    return
  }
}
var IPPROTO_NONE: Int32 {
  get {
    return
  }
}
var ATTR_CMN_NAME: Int32 {
  get {
    return
  }
}
var IPPROTO_NVPII: Int32 {
  get {
    return
  }
}
var ATTR_CMN_GRPID: Int32 {
  get {
    return
  }
}
var IPPROTO_ND: Int32 {
  get {
    return
  }
}
var ATTR_CMN_GRPUUID: Int32 {
  get {
    return
  }
}
var IPPROTO_NHRP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_OBJID: Int32 {
  get {
    return
  }
}
var IPPROTO_PIGP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_OBJPERMANENTID: Int32 {
  get {
    return
  }
}
var IPPROTO_PIM: Int32 {
  get {
    return
  }
}
var ATTR_CMN_NAMEDATTRCOUNT: Int32 {
  get {
    return
  }
}
var IPPROTO_OSPFIGP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_NAMEDATTRLIST: Int32 {
  get {
    return
  }
}
var IPPROTO_PGM: Int32 {
  get {
    return
  }
}
var ACORE: Int32 {
  get {
    return
  }
}
var ATTR_CMN_OWNERID: Int32 {
  get {
    return
  }
}
var IPPROTO_MAX: Int32 {
  get {
    return
  }
}
var ATTR_CMN_PARENTID: Int32 {
  get {
    return
  }
}
var IPPROTO_MEAS: Int32 {
  get {
    return
  }
}
var IPPROTO_LEAF1: Int32 {
  get {
    return
  }
}
var _SYS_NAMELEN: Int32 {
  get {
    return
  }
}
var ATTR_CMN_OBJTAG: Int32 {
  get {
    return
  }
}
var IPPROTO_LEAF2: Int32 {
  get {
    return
  }
}
var ATTR_CMN_OBJTYPE: Int32 {
  get {
    return
  }
}
var ATTR_CMN_SETMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_MTP: Int32 {
  get {
    return
  }
}
var IPPROTO_MUX: Int32 {
  get {
    return
  }
}
var ATTR_CMN_USERACCESS: Int32 {
  get {
    return
  }
}
var ATTR_CMN_PAROBJID: Int32 {
  get {
    return
  }
}
var IPPROTO_MHRP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_SCRIPT: Int32 {
  get {
    return
  }
}
var ATTR_CMN_RETURNED_ATTRS: UInt32 {
  get {
    return
  }
}
var IPPROTO_MICP: Int32 {
  get {
    return
  }
}
var ATTR_CMN_VOLSETMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_IPIP: Int32 {
  get {
    return
  }
}
var ACCESSOR_CALLS_ARE_FUNCTIONS: Int32 {
  get {
    return
  }
}
var ATTR_DIR_ENTRYCOUNT: Int32 {
  get {
    return
  }
}
var ATTR_CMN_UUID: Int32 {
  get {
    return
  }
}
var IPPROTO_IPCV: Int32 {
  get {
    return
  }
}
var IPPROTO_IPV4: Int32 {
  get {
    return
  }
}
var ACCESSX_MAX_DESCRIPTORS: Int32 {
  get {
    return
  }
}
var ATTR_CMN_VALIDMASK: UInt32 {
  get {
    return
  }
}
var IPPROTO_IPEIP: Int32 {
  get {
    return
  }
}
var IPPROTO_IPPC: Int32 {
  get {
    return
  }
}
var ATTR_DIR_SETMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_KRYPTOLAN: Int32 {
  get {
    return
  }
}
var ACCOUNTING: Int32 {
  get {
    return
  }
}
var ATTR_DIR_VALIDMASK: Int32 {
  get {
    return
  }
}
var ACL_MAX_ENTRIES: Int32 {
  get {
    return
  }
}
var IPPROTO_LARP: Int32 {
  get {
    return
  }
}
var ATTR_DIR_LINKCOUNT: Int32 {
  get {
    return
  }
}
@availability(*, unavailable, message="use 'nil' instead of this imported macro") var ACL_UNDEFINED_ID: ()
var IPPROTO_IPV6: Int32 {
  get {
    return
  }
}
var ATTR_DIR_MOUNTSTATUS: Int32 {
  get {
    return
  }
}
var ACOMPAT: Int32 {
  get {
    return
  }
}
var IPPROTO_IRTP: Int32 {
  get {
    return
  }
}
var IPV6CTL_DEFHLIM: Int32 {
  get {
    return
  }
}
var ATTR_FILE_DATAEXTENTS: Int32 {
  get {
    return
  }
}
var IPV6CTL_DAD_COUNT: Int32 {
  get {
    return
  }
}
var ATTR_FILE_DATAALLOCSIZE: Int32 {
  get {
    return
  }
}
var IPV6CTL_AUTO_LINKLOCAL: Int32 {
  get {
    return
  }
}
var ATTR_FILE_CLUMPSIZE: Int32 {
  get {
    return
  }
}
var IPV6CTL_AUTO_FLOWLABEL: Int32 {
  get {
    return
  }
}
var ATTR_FILE_ALLOCSIZE: Int32 {
  get {
    return
  }
}
var IPV6CTL_GIF_HLIM: Int32 {
  get {
    return
  }
}
var IPV6CTL_ADDRCTLPOLICY: Int32 {
  get {
    return
  }
}
var ATTR_FILE_FORKCOUNT: Int32 {
  get {
    return
  }
}
var IPV6CTL_FORWSRCRT: Int32 {
  get {
    return
  }
}
var ATTR_FILE_FILETYPE: Int32 {
  get {
    return
  }
}
var IPV6CTL_FORWARDING: Int32 {
  get {
    return
  }
}
var ATTR_FILE_DEVTYPE: Int32 {
  get {
    return
  }
}
var IPV6CTL_DEFMCASTHLIM: Int32 {
  get {
    return
  }
}
var ATTR_FILE_DATALENGTH: Int32 {
  get {
    return
  }
}
var ATTR_FILE_RSRCALLOCSIZE: Int32 {
  get {
    return
  }
}
var IPPROTO_WBMON: Int32 {
  get {
    return
  }
}
var IPPROTO_WBEXPAK: Int32 {
  get {
    return
  }
}
var ATTR_FILE_LINKCOUNT: Int32 {
  get {
    return
  }
}
var IPPROTO_VMTP: Int32 {
  get {
    return
  }
}
var ATTR_FILE_IOBLOCKSIZE: Int32 {
  get {
    return
  }
}
var IPPROTO_VISA: Int32 {
  get {
    return
  }
}
var ATTR_FILE_FORKLIST: Int32 {
  get {
    return
  }
}
var ATTR_FILE_TOTALSIZE: Int32 {
  get {
    return
  }
}
var IPV6CTL_ACCEPT_RTADV: Int32 {
  get {
    return
  }
}
var ATTR_FILE_SETMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_XTP: Int32 {
  get {
    return
  }
}
var ATTR_FILE_RSRCLENGTH: Int32 {
  get {
    return
  }
}
var IPPROTO_XNET: Int32 {
  get {
    return
  }
}
var ATTR_FILE_RSRCEXTENTS: Int32 {
  get {
    return
  }
}
var IPPROTO_WSN: Int32 {
  get {
    return
  }
}
var ATTR_FORK_TOTALSIZE: Int32 {
  get {
    return
  }
}
var IPPROTO_TPXX: Int32 {
  get {
    return
  }
}
var ATTR_FORK_SETMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_TP: Int32 {
  get {
    return
  }
}
var ATTR_FORK_ALLOCSIZE: Int32 {
  get {
    return
  }
}
var IPPROTO_TCP: Int32 {
  get {
    return
  }
}
var ATTR_FILE_VALIDMASK: Int32 {
  get {
    return
  }
}
var IPPROTO_TCF: Int32 {
  get {
    return
  }
}
var IPPROTO_SWIPE: Int32 {
  get {
    return
  }
}
var ATTR_VOL_ATTRIBUTES: Int32 {
  get {
    return
  }
}
var IPPROTO_VINES: Int32 {
  get {
    return
  }
}
var IPPROTO_UDP: Int32 {
  get {
    return
  }
}
var ATTR_VOL_ALLOCATIONCLUMP: Int32 {
  get {
    return
  }
}
var IPPROTO_TTP: Int32 {
  get {
    return
  }
}
var ATTR_MAX_BUFFER: Int32 {
  get {
    return
  }
}
var IPPROTO_TRUNK2: Int32 {
  get {
    return
  }
}
var IPPROTO_TRUNK1: Int32 {
  get {
    return
  }
}
var ATTR_FORK_VALIDMASK: Int32 {
  get {
    return
  }
}
var ATTR_VOL_FILECOUNT: Int32 {
  get {
    return
  }
}
var IPPROTO_SDRP: Int32 {
  get {
    return
  }
}
var ATTR_VOL_ENCODINGSUSED: Int32 {
  get {
    return
  }
}
var IPPROTO_SCTP: Int32 {
  get {
    return
  }
}
var ATTR_VOL_DIRCOUNT: Int32 {
  get {
    return
  }
}
var IPPROTO_SATMON: Int32 {
  get {
    return
  }
}
var IPPROTO_SCCSP: Int32 {
  get {
    return
  }
}
var ATTR_VOL_CAPABILITIES: Int32 {
  get {
    return
  }
}
var IPPROTO_SATEXPAK: Int32 {
  get {
    return
  }
}
var IPPROTO_SVMTP: Int32 {
  get {
    return
  }
}
var ATTR_VOL_MAXOBJCOUNT: Int32 {
  get {
    return
  }
}
var ATTR_VOL_IOBLOCKSIZE: Int32 {
  get {
    return
  }
}
var IPPROTO_ST: Int32 {
  get {
    return
  }
}
var ATTR_VOL_INFO: UInt32 {
  get {
    return
  }
}
var IPPROTO_SRPC: Int32 {
  get {
    return
  }
}
var ATTR_VOL_FSTYPE: Int32 {
  get {
    return
  }
}
var IPPROTO_SEP: Int32 {
  get {
    return
  }
}
var AF_COIP: Int32 {
  get {
    return
  }
}
var AF_CNT: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_JCXZ: Int32 {
  get {
    return
  }
}
var AF_DATAKIT: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_JMP: Int32 {
  get {
    return
  }
}
var AF_DECnet: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_LOOP: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_NOP: Int32 {
  get {
    return
  }
}
var AF_DLI: Int32 {
  get {
    return
  }
}
var AFORK: Int32 {
  get {
    return
  }
}
var FASTTRAP_SUNWDTRACE_SIZE: Int32 {
  get {
    return
  }
}
var AF_APPLETALK: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_CALL: Int32 {
  get {
    return
  }
}
var AF_CCITT: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_COMMON: Int32 {
  get {
    return
  }
}
var _MASTERPASSWD: String {
  get {
    return
  }
}
var FASTTRAP_T_JCC: Int32 {
  get {
    return
  }
}
var AF_CHAOS: Int32 {
  get {
    return
  }
}
var AF_INET: Int32 {
  get {
    return
  }
}
var FD_CLOEXEC: Int32 {
  get {
    return
  }
}
var AF_IPX: Int32 {
  get {
    return
  }
}
var AF_INET6: Int32 {
  get {
    return
  }
}
var AF_ISDN: Int32 {
  get {
    return
  }
}
var AF_ISO: Int32 {
  get {
    return
  }
}
var AF_ECMA: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_PUSHL_EBP: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_RET: Int32 {
  get {
    return
  }
}
var AF_E164: Int32 {
  get {
    return
  }
}
var AF_HYLINK: Int32 {
  get {
    return
  }
}
var FASTTRAP_T_RET16: Int32 {
  get {
    return
  }
}
var AF_IEEE80211: Int32 {
  get {
    return
  }
}
var FASYNC: Int32 {
  get {
    return
  }
}
var AF_IMPLINK: Int32 {
  get {
    return
  }
}
var FCNTL_FS_SPECIFIC_BASE: Int32 {
  get {
    return
  }
}
var FE_DOWNWARD: Int32 {
  get {
    return
  }
}
var FE_DIVBYZERO: Int32 {
  get {
    return
  }
}
var FE_ALL_EXCEPT: Int32 {
  get {
    return
  }
}
var FE_DENORMALOPERAND: Int32 {
  get {
    return
  }
}
var FE_UNDERFLOW: Int32 {
  get {
    return
  }
}
var FE_UPWARD: Int32 {
  get {
    return
  }
}
var FF0: Int32 {
  get {
    return
  }
}
var FFDLY: Int32 {
  get {
    return
  }
}
var FF1: Int32 {
  get {
    return
  }
}
var _MP_DB: String {
  get {
    return
  }
}
var FE_INEXACT: Int32 {
  get {
    return
  }
}
var FE_INVALID: Int32 {
  get {
    return
  }
}
var FE_TONEAREST: Int32 {
  get {
    return
  }
}
var FE_OVERFLOW: Int32 {
  get {
    return
  }
}
var FE_TOWARDZERO: Int32 {
  get {
    return
  }
}
var _PASSWORD_CHGNOW: Int32 {
  get {
    return
  }
}
var _PASSWD: String {
  get {
    return
  }
}
var FILESZ_CONTROL_ENTRY: String {
  get {
    return
  }
}
var _PASSWORD_LEN: Int32 {
  get {
    return
  }
}
var _PASSWORD_NOEXP: Int32 {
  get {
    return
  }
}
var _PASSWORD_NOCHG: Int32 {
  get {
    return
  }
}
var FILENAME_MAX: Int32 {
  get {
    return
  }
}
var _PASSWORD_NOUID: Int32 {
  get {
    return
  }
}
var _PASSWORD_NOGID: Int32 {
  get {
    return
  }
}
var FIRST_LINK_XATTR_NAME: String {
  get {
    return
  }
}
var FIRST_EXCEPTION: Int32 {
  get {
    return
  }
}
var FLT_MAX_10_EXP: Int32 {
  get {
    return
  }
}
var AF_NS: Int32 {
  get {
    return
  }
}
var _PATH_NETWORKS: String {
  get {
    return
  }
}
var AF_NDRV: Int32 {
  get {
    return
  }
}
var FLT_MAX: Float {
  get {
    return
  }
}
var _PATH_MP_DB: String {
  get {
    return
  }
}
var AF_NETBIOS: Int32 {
  get {
    return
  }
}
var AF_PPP: Int32 {
  get {
    return
  }
}
var _PATH_PWD: String {
  get {
    return
  }
}
var FLT_MIN: Float {
  get {
    return
  }
}
var AF_PUP: Int32 {
  get {
    return
  }
}
var _PATH_PROTOCOLS: String {
  get {
    return
  }
}
var AF_OSI: Int32 {
  get {
    return
  }
}
var FLT_MAX_EXP: Int32 {
  get {
    return
  }
}
var _PATH_PASSWD: String {
  get {
    return
  }
}
var _PATH_RSRCFORKSPEC: String {
  get {
    return
  }
}
var AF_LOCAL: Int32 {
  get {
    return
  }
}
var AF_LAT: Int32 {
  get {
    return
  }
}
var FLAGS_CONTROL_ENTRY: String {
  get {
    return
  }
}
var FLT_DIG: Int32 {
  get {
    return
  }
}
var AF_LINK: Int32 {
  get {
    return
  }
}
var AF_NATM: Int32 {
  get {
    return
  }
}
var FLT_EVAL_METHOD: Int32 {
  get {
    return
  }
}
var FLT_MANT_DIG: Int32 {
  get {
    return
  }
}
var _PATH_RSRCNAME: String {
  get {
    return
  }
}
var AF_MAX: Int32 {
  get {
    return
  }
}
var FLT_EPSILON: Float {
  get {
    return
  }
}
var FNM_CASEFOLD: Int32 {
  get {
    return
  }
}
var _PATH_DATANAME: String {
  get {
    return
  }
}
var AF_UNIX: Int32 {
  get {
    return
  }
}
var FNDELAY: Int32 {
  get {
    return
  }
}
var AF_SYSTEM: Int32 {
  get {
    return
  }
}
var AF_SYS_CONTROL: Int32 {
  get {
    return
  }
}
var FLUSHO: Int32 {
  get {
    return
  }
}
var AF_UTUN: Int32 {
  get {
    return
  }
}
var FNM_IGNORECASE: Int32 {
  get {
    return
  }
}
var _PATH_HEQUIV: String {
  get {
    return
  }
}
var FNM_FILE_NAME: Int32 {
  get {
    return
  }
}
var _PATH_GROUP: String {
  get {
    return
  }
}
var _PATH_FORKSPECIFIER: String {
  get {
    return
  }
}
var AF_UNSPEC: Int32 {
  get {
    return
  }
}
var FLT_RADIX: Int32 {
  get {
    return
  }
}
var _PATH_LOG: String {
  get {
    return
  }
}
var AF_ROUTE: Int32 {
  get {
    return
  }
}
var FLT_MIN_EXP: Int32 {
  get {
    return
  }
}
var _PASSWORD_WARNDAYS: Int32 {
  get {
    return
  }
}
var AF_RESERVED_36: Int32 {
  get {
    return
  }
}
var FLT_MIN_10_EXP: Int32 {
  get {
    return
  }
}
var _PATH_MASTERPASSWD_LOCK: String {
  get {
    return
  }
}
var AF_SNA: Int32 {
  get {
    return
  }
}
var FLT_TRUE_MIN: Float {
  get {
    return
  }
}
var AF_SIP: Int32 {
  get {
    return
  }
}
var _PATH_HOSTS: String {
  get {
    return
  }
}
var _PATH_MASTERPASSWD: String {
  get {
    return
  }
}
var _PATH_PWD_MKDB: String {
  get {
    return
  }
}
var FOPEN_MAX: Int32 {
  get {
    return
  }
}
var _PC_FILESIZEBITS: Int32 {
  get {
    return
  }
}
var _PC_LINK_MAX: Int32 {
  get {
    return
  }
}
var _PC_MAX_CANON: Int32 {
  get {
    return
  }
}
var FNM_PATHNAME: Int32 {
  get {
    return
  }
}
var _PC_CHOWN_RESTRICTED: Int32 {
  get {
    return
  }
}
var FNM_PERIOD: Int32 {
  get {
    return
  }
}
var _PC_EXTENDED_SECURITY_NP: Int32 {
  get {
    return
  }
}
var FNONBLOCK: Int32 {
  get {
    return
  }
}
var _PATH_SERVICES: String {
  get {
    return
  }
}
var FNM_NOMATCH: Int32 {
  get {
    return
  }
}
var _PC_NAME_MAX: Int32 {
  get {
    return
  }
}
var FNM_NOSYS: Int32 {
  get {
    return
  }
}
var _PC_NO_TRUNC: Int32 {
  get {
    return
  }
}
var FNM_LEADING_DIR: Int32 {
  get {
    return
  }
}
var _PC_MAX_INPUT: Int32 {
  get {
    return
  }
}
var FNM_NOESCAPE: Int32 {
  get {
    return
  }
}
var _PC_NAME_CHARS_MAX: Int32 {
  get {
    return
  }
}
var _PC_2_SYMLINKS: Int32 {
  get {
    return
  }
}
var FPC_OE: Int32 {
  get {
    return
  }
}
var FPC_OM: Int32 {
  get {
    return
  }
}
var _PC_ALLOC_SIZE_MIN: Int32 {
  get {
    return
  }
}
var FPC_IC_PROJ: Int32 {
  get {
    return
  }
}
var _PATH_SMP_DB: String {
  get {
    return
  }
}
var FPC_IE: Int32 {
  get {
    return
  }
}
var FPC_IM: Int32 {
  get {
    return
  }
}
var _PATH_UTMPX: String {
  get {
    return
  }
}
var _PC_CASE_PRESERVING: Int32 {
  get {
    return
  }
}
var FPC_IC: Int32 {
  get {
    return
  }
}
var _PC_CASE_SENSITIVE: Int32 {
  get {
    return
  }
}
var FPC_IC_AFF: Int32 {
  get {
    return
  }
}
var _PC_ASYNC_IO: Int32 {
  get {
    return
  }
}
var _PC_AUTH_OPAQUE_NP: Int32 {
  get {
    return
  }
}
var FPC_DE: Int32 {
  get {
    return
  }
}
var FPC_DM: Int32 {
  get {
    return
  }
}
var FPC_RC_RN: Int32 {
  get {
    return
  }
}
var FPC_RC_RD: Int32 {
  get {
    return
  }
}
var FPC_RC_RU: Int32 {
  get {
    return
  }
}
var _POSIX2_BC_BASE_MAX: Int32 {
  get {
    return
  }
}
var _PC_VDISABLE: Int32 {
  get {
    return
  }
}
var FPC_RC: Int32 {
  get {
    return
  }
}
var _PC_XATTR_SIZE_BITS: Int32 {
  get {
    return
  }
}
var FPC_RC_CHOP: Int32 {
  get {
    return
  }
}
var FPC_PC_64: Int32 {
  get {
    return
  }
}
var _POSIX2_BC_STRING_MAX: Int32 {
  get {
    return
  }
}
var FPC_PE: Int32 {
  get {
    return
  }
}
var _POSIX2_CHARCLASS_NAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX2_BC_DIM_MAX: Int32 {
  get {
    return
  }
}
var FPC_PC: Int32 {
  get {
    return
  }
}
var FPC_PC_53: Int32 {
  get {
    return
  }
}
var FPC_PC_24: Int32 {
  get {
    return
  }
}
var _POSIX2_BC_SCALE_MAX: Int32 {
  get {
    return
  }
}
var FPE_FLTSUB: Int32 {
  get {
    return
  }
}
var _PC_PRIO_IO: Int32 {
  get {
    return
  }
}
var FPE_FLTUND: Int32 {
  get {
    return
  }
}
var _PC_REC_INCR_XFER_SIZE: Int32 {
  get {
    return
  }
}
var FPE_FLTOVF: Int32 {
  get {
    return
  }
}
var _PC_PATH_MAX: Int32 {
  get {
    return
  }
}
var FPE_FLTRES: Int32 {
  get {
    return
  }
}
var _PC_PIPE_BUF: Int32 {
  get {
    return
  }
}
var FPE_FLTDIV: Int32 {
  get {
    return
  }
}
var _PC_REC_XFER_ALIGN: Int32 {
  get {
    return
  }
}
var FPC_ZM: Int32 {
  get {
    return
  }
}
var FPE_FLTINV: Int32 {
  get {
    return
  }
}
var _PC_SYNC_IO: Int32 {
  get {
    return
  }
}
var _PC_SYMLINK_MAX: Int32 {
  get {
    return
  }
}
var FPC_UE: Int32 {
  get {
    return
  }
}
var _PC_REC_MAX_XFER_SIZE: Int32 {
  get {
    return
  }
}
var FPC_ZE: Int32 {
  get {
    return
  }
}
var _PC_REC_MIN_XFER_SIZE: Int32 {
  get {
    return
  }
}
var _POSIX2_PBS_ACCOUNTING: Int32 {
  get {
    return
  }
}
var FPS_ES: Int32 {
  get {
    return
  }
}
var _POSIX2_PBS: Int32 {
  get {
    return
  }
}
var FPS_DE: Int32 {
  get {
    return
  }
}
var FPS_C2: Int32 {
  get {
    return
  }
}
var FPS_C3: Int32 {
  get {
    return
  }
}
var _POSIX2_LOCALEDEF: Int {
  get {
    return
  }
}
var FPS_C1: Int32 {
  get {
    return
  }
}
var _POSIX2_LINE_MAX: Int32 {
  get {
    return
  }
}
var _POSIX2_PBS_TRACK: Int32 {
  get {
    return
  }
}
var FPS_C0: Int32 {
  get {
    return
  }
}
var _POSIX2_PBS_MESSAGE: Int32 {
  get {
    return
  }
}
var FPS_BUSY: Int32 {
  get {
    return
  }
}
var FPE_INTOVF: Int32 {
  get {
    return
  }
}
var _POSIX2_PBS_LOCATE: Int32 {
  get {
    return
  }
}
var FPE_NOOP: Int32 {
  get {
    return
  }
}
var FPE_INTDIV: Int32 {
  get {
    return
  }
}
var _POSIX2_PBS_CHECKPOINT: Int32 {
  get {
    return
  }
}
var _POSIX2_C_DEV: Int {
  get {
    return
  }
}
var FP_CHOP: Int32 {
  get {
    return
  }
}
var FP_287: Int32 {
  get {
    return
  }
}
var FP_387: Int32 {
  get {
    return
  }
}
var _POSIX2_C_BIND: Int {
  get {
    return
  }
}
var FPS_ZE: Int32 {
  get {
    return
  }
}
var _POSIX2_COLL_WEIGHTS_MAX: Int32 {
  get {
    return
  }
}
var _POSIX2_CHAR_TERM: Int {
  get {
    return
  }
}
var FPS_UE: Int32 {
  get {
    return
  }
}
var FPS_TOS: Int32 {
  get {
    return
  }
}
var FPS_TOS_SHIFT: Int32 {
  get {
    return
  }
}
var _POSIX2_FORT_RUN: Int {
  get {
    return
  }
}
var FPS_SF: Int32 {
  get {
    return
  }
}
var _POSIX2_FORT_DEV: Int32 {
  get {
    return
  }
}
var _POSIX2_EXPR_NEST_MAX: Int32 {
  get {
    return
  }
}
var FPS_PE: Int32 {
  get {
    return
  }
}
var FPS_IE: Int32 {
  get {
    return
  }
}
var FPS_OE: Int32 {
  get {
    return
  }
}
var _POSIX2_EQUIV_CLASS_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_CLOCK_SELECTION: Int32 {
  get {
    return
  }
}
var FP_PREC_53B: Int32 {
  get {
    return
  }
}
var _POSIX_CHOWN_RESTRICTED: Int {
  get {
    return
  }
}
var FP_PREC_24B: Int32 {
  get {
    return
  }
}
var _POSIX_CHILD_MAX: Int32 {
  get {
    return
  }
}
var FP_NORMAL: Int32 {
  get {
    return
  }
}
var FP_NO: Int32 {
  get {
    return
  }
}
var _POSIX_BARRIERS: Int32 {
  get {
    return
  }
}
var FP_NAN: Int32 {
  get {
    return
  }
}
var FP_INFINITE: Int32 {
  get {
    return
  }
}
var _POSIX_HOST_NAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_FSYNC: Int {
  get {
    return
  }
}
var _POSIX_DELAYTIMER_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_CPUTIME: Int32 {
  get {
    return
  }
}
var FP_FXSR: Int32 {
  get {
    return
  }
}
var FP_SUPERNORMAL: Int32 {
  get {
    return
  }
}
var _POSIX2_VERSION: Int {
  get {
    return
  }
}
var FP_SUBNORMAL: Int32 {
  get {
    return
  }
}
var _POSIX2_UPE: Int {
  get {
    return
  }
}
var FP_STATE_BYTES: Int32 {
  get {
    return
  }
}
var _POSIX2_SW_DEV: Int {
  get {
    return
  }
}
var FP_SOFT: Int32 {
  get {
    return
  }
}
var FP_SNAN: Int32 {
  get {
    return
  }
}
var _POSIX2_RE_DUP_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_ASYNCHRONOUS_IO: Int32 {
  get {
    return
  }
}
var FP_RND_UP: Int32 {
  get {
    return
  }
}
var FP_RND_NEAR: Int32 {
  get {
    return
  }
}
var _POSIX_ARG_MAX: Int32 {
  get {
    return
  }
}
var FP_RND_DOWN: Int32 {
  get {
    return
  }
}
var _POSIX_AIO_LISTIO_MAX: Int32 {
  get {
    return
  }
}
var FP_QNAN: Int32 {
  get {
    return
  }
}
var _POSIX_ADVISORY_INFO: Int32 {
  get {
    return
  }
}
var FP_PREC_64B: Int32 {
  get {
    return
  }
}
var _POSIX_MQ_OPEN_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_AIO_MAX: Int32 {
  get {
    return
  }
}
var DECIMAL_DIG: Int32 {
  get {
    return
  }
}
var _POSIX_MQ_PRIO_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_NAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_NGROUPS_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_NO_TRUNC: Int {
  get {
    return
  }
}
var _POSIX_MEMLOCK_RANGE: Int32 {
  get {
    return
  }
}
var _POSIX_MEMORY_PROTECTION: Int {
  get {
    return
  }
}
var _POSIX_MESSAGE_PASSING: Int32 {
  get {
    return
  }
}
var _POSIX_MONOTONIC_CLOCK: Int32 {
  get {
    return
  }
}
var _POSIX_MAPPED_FILES: Int {
  get {
    return
  }
}
var _POSIX_MAX_CANON: Int32 {
  get {
    return
  }
}
var _POSIX_MAX_INPUT: Int32 {
  get {
    return
  }
}
var _POSIX_MEMLOCK: Int32 {
  get {
    return
  }
}
var _POSIX_IPV6: Int {
  get {
    return
  }
}
var _POSIX_JOB_CONTROL: Int {
  get {
    return
  }
}
var _POSIX_LINK_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_LOGIN_NAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_SAVED_IDS: Int {
  get {
    return
  }
}
var _POSIX_SEMAPHORES: Int32 {
  get {
    return
  }
}
var _POSIX_SEM_NSEMS_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_SEM_VALUE_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_REALTIME_SIGNALS: Int32 {
  get {
    return
  }
}
var _POSIX_REGEXP: Int {
  get {
    return
  }
}
var _POSIX_RE_DUP_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_RTSIG_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_PRIORITY_SCHEDULING: Int32 {
  get {
    return
  }
}
var EV_WR: Int32 {
  get {
    return
  }
}
var _POSIX_RAW_SOCKETS: Int32 {
  get {
    return
  }
}
var EWOULDBLOCK: Int32 {
  get {
    return
  }
}
var EXCEPTION_CODE_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_READER_WRITER_LOCKS: Int {
  get {
    return
  }
}
var EXCEPTION_DEFAULT: Int32 {
  get {
    return
  }
}
var _POSIX_OPEN_MAX: Int32 {
  get {
    return
  }
}
var EXCEPTION_STATE: Int32 {
  get {
    return
  }
}
var _POSIX_PATH_MAX: Int32 {
  get {
    return
  }
}
var EXCEPTION_STATE_IDENTITY: Int32 {
  get {
    return
  }
}
var _POSIX_PIPE_BUF: Int32 {
  get {
    return
  }
}
var EXC_ARITHMETIC: Int32 {
  get {
    return
  }
}
var _POSIX_PRIORITIZED_IO: Int32 {
  get {
    return
  }
}
var EXC_BAD_ACCESS: Int32 {
  get {
    return
  }
}
var EXC_BREAKPOINT: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_ATTR_STACKADDR: Int {
  get {
    return
  }
}
var EXC_BAD_INSTRUCTION: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_CPUTIME: Int32 {
  get {
    return
  }
}
var EXC_GUARD: Int32 {
  get {
    return
  }
}
var EXC_CRASH: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_ATTR_STACKSIZE: Int {
  get {
    return
  }
}
var EXC_EMULATION: Int32 {
  get {
    return
  }
}
var _POSIX_SYMLINK_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_BOUND: Int32 {
  get {
    return
  }
}
var _POSIX_STREAM_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_ALIGNFLT: Int32 {
  get {
    return
  }
}
var _POSIX_SYNCHRONIZED_IO: Int32 {
  get {
    return
  }
}
var EXC_I386_BPT: Int32 {
  get {
    return
  }
}
var _POSIX_THREADS: Int {
  get {
    return
  }
}
var _POSIX_SYMLOOP_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_BOUNDFLT: Int32 {
  get {
    return
  }
}
var EXC_I386_DBLFLT: Int32 {
  get {
    return
  }
}
var _POSIX_SPORADIC_SERVER: Int32 {
  get {
    return
  }
}
var EXC_I386_BPTFLT: Int32 {
  get {
    return
  }
}
var _POSIX_SPIN_LOCKS: Int32 {
  get {
    return
  }
}
var _POSIX_SS_REPL_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_DIVERR: Int32 {
  get {
    return
  }
}
var EXC_I386_EMERR: Int32 {
  get {
    return
  }
}
var _POSIX_SSIZE_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_DIV: Int32 {
  get {
    return
  }
}
var _POSIX_SHELL: Int {
  get {
    return
  }
}
var EXC_I386_ENOEXTFLT: Int32 {
  get {
    return
  }
}
var _POSIX_SHARED_MEMORY_OBJECTS: Int32 {
  get {
    return
  }
}
var EXC_I386_ENDPERR: Int32 {
  get {
    return
  }
}
var _POSIX_SPAWN: Int32 {
  get {
    return
  }
}
var EXC_I386_EXTERRFLT: Int32 {
  get {
    return
  }
}
var _POSIX_SIGQUEUE_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_EXTERR: Int32 {
  get {
    return
  }
}
var EXC_I386_EXTOVRFLT: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE: Int32 {
  get {
    return
  }
}
var EXC_I386_EXTOVR: Int32 {
  get {
    return
  }
}
var _POSIX_TIMER_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_EVENT_NAME_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_INTO: Int32 {
  get {
    return
  }
}
var EXC_I386_GPFLT: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_EVENT_FILTER: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_THREADS_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_INVOP: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_SPORADIC_SERVER: Int32 {
  get {
    return
  }
}
var EXC_I386_INTOFLT: Int32 {
  get {
    return
  }
}
var EXC_I386_INVTSSFLT: Int32 {
  get {
    return
  }
}
var _POSIX_TIMERS: Int32 {
  get {
    return
  }
}
var _POSIX_TIMEOUTS: Int32 {
  get {
    return
  }
}
var EXC_I386_INVOPFLT: Int32 {
  get {
    return
  }
}
var EXC_I386_NOEXT: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_PRIO_PROTECT: Int32 {
  get {
    return
  }
}
var EXC_I386_NMIFLT: Int32 {
  get {
    return
  }
}
var EXC_I386_SEGNPFLT: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_SAFE_FUNCTIONS: Int {
  get {
    return
  }
}
var EXC_I386_PGFLT: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_PROCESS_SHARED: Int {
  get {
    return
  }
}
var EXC_I386_NOEXTFLT: Int32 {
  get {
    return
  }
}
var EXC_I386_SGLSTP: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_KEYS_MAX: Int32 {
  get {
    return
  }
}
var EXC_I386_SGL: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_DESTRUCTOR_ITERATIONS: Int32 {
  get {
    return
  }
}
var EXC_I386_STKFLT: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_PRIO_INHERIT: Int32 {
  get {
    return
  }
}
var _POSIX_THREAD_PRIORITY_SCHEDULING: Int32 {
  get {
    return
  }
}
var EXC_I386_SSEEXTERR: Int32 {
  get {
    return
  }
}
var EXC_MACH_SYSCALL: Int32 {
  get {
    return
  }
}
var _POSIX_V7_LP64_OFF64: Int32 {
  get {
    return
  }
}
var _POSIX_V7_LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var EXC_MACF_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_V7_ILP32_OFF32: Int32 {
  get {
    return
  }
}
var EXC_MACF_MIN: Int32 {
  get {
    return
  }
}
var _POSIX_V7_ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var _POSIX_V6_LP64_OFF64: Int32 {
  get {
    return
  }
}
var _POSIX_V6_LPBIG_OFFBIG: Int32 {
  get {
    return
  }
}
var _POSIX_V6_ILP32_OFF32: Int32 {
  get {
    return
  }
}
var _POSIX_V6_ILP32_OFFBIG: Int32 {
  get {
    return
  }
}
var _POSIX_TYPED_MEMORY_OBJECTS: Int32 {
  get {
    return
  }
}
var EXC_MASK_MACHINE: Int32 {
  get {
    return
  }
}
var _POSIX_TZNAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_USER_EVENT_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_TTY_NAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_NAME_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_SYS_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_INHERIT: Int32 {
  get {
    return
  }
}
var _POSIX_TRACE_LOG: Int32 {
  get {
    return
  }
}
var EXC_SOFTWARE: Int32 {
  get {
    return
  }
}
var _PTHREAD_MUTEX_POLICY_NONE: Int32 {
  get {
    return
  }
}
var EXC_SOFT_SIGNAL: Int32 {
  get {
    return
  }
}
var _PTHREAD_MUTEX_SIG_init: Int32 {
  get {
    return
  }
}
var EXC_RESOURCE: Int32 {
  get {
    return
  }
}
var _PTHREAD_MUTEX_POLICY_FAIRSHARE: Int32 {
  get {
    return
  }
}
var EXC_RPC_ALERT: Int32 {
  get {
    return
  }
}
var _PTHREAD_MUTEX_POLICY_FIRSTFIT: Int32 {
  get {
    return
  }
}
var EXIT_FAILURE: Int32 {
  get {
    return
  }
}
var EXDEV: Int32 {
  get {
    return
  }
}
var EXIT_SUCCESS: Int32 {
  get {
    return
  }
}
var EXC_SYSCALL: Int32 {
  get {
    return
  }
}
var EXC_TYPES_COUNT: Int32 {
  get {
    return
  }
}
var EXTA: Int32 {
  get {
    return
  }
}
var _PTHREAD_ERRORCHECK_MUTEX_SIG_init: Int32 {
  get {
    return
  }
}
var _PTHREAD_FIRSTFIT_MUTEX_SIG_init: Int32 {
  get {
    return
  }
}
var EXTB: Int32 {
  get {
    return
  }
}
var EXPIRE_AFTER_CONTROL_ENTRY: String {
  get {
    return
  }
}
var _PTHREAD_COND_SIG_init: Int32 {
  get {
    return
  }
}
var EXPR_NEST_MAX: Int32 {
  get {
    return
  }
}
var _POSIX_VERSION: Int {
  get {
    return
  }
}
var EX_DATAERR: Int32 {
  get {
    return
  }
}
var _QUAD_LOWWORD: Int32 {
  get {
    return
  }
}
var EX_CONFIG: Int32 {
  get {
    return
  }
}
var _QUAD_HIGHWORD: Int32 {
  get {
    return
  }
}
var EX_CANTCREAT: Int32 {
  get {
    return
  }
}
var EXTJNL_CONTENT_TYPE_UUID: String {
  get {
    return
  }
}
var EXTPROC: Int32 {
  get {
    return
  }
}
var EX_NOPERM: Int32 {
  get {
    return
  }
}
var EX_NOUSER: Int32 {
  get {
    return
  }
}
var EX_NOINPUT: Int32 {
  get {
    return
  }
}
var EX_NOHOST: Int32 {
  get {
    return
  }
}
var EX_IOERR: Int32 {
  get {
    return
  }
}
var EX_PROTOCOL: Int32 {
  get {
    return
  }
}
var EX_OSFILE: Int32 {
  get {
    return
  }
}
var _PTHREAD_RWLOCK_SIG_init: Int32 {
  get {
    return
  }
}
var EX_OSERR: Int32 {
  get {
    return
  }
}
var _PTHREAD_RECURSIVE_MUTEX_SIG_init: Int32 {
  get {
    return
  }
}
var EX_OK: Int32 {
  get {
    return
  }
}
var EX__BASE: Int32 {
  get {
    return
  }
}
var EX_USAGE: Int32 {
  get {
    return
  }
}
var EX_TEMPFAIL: Int32 {
  get {
    return
  }
}
var EX_UNAVAILABLE: Int32 {
  get {
    return
  }
}
var _PTHREAD_ONCE_SIG_init: Int32 {
  get {
    return
  }
}
var EX_SOFTWARE: Int32 {
  get {
    return
  }
}
var FASTTRAP_INSTR: Int32 {
  get {
    return
  }
}
var _SC_2_FORT_DEV: Int32 {
  get {
    return
  }
}
var FASTTRAP_ENTRY_AFRAMES: Int32 {
  get {
    return
  }
}
var _SC_2_C_DEV: Int32 {
  get {
    return
  }
}
var FAPPEND: Int32 {
  get {
    return
  }
}
var _SC_2_C_BIND: Int32 {
  get {
    return
  }
}
var _SC_2_CHAR_TERM: Int32 {
  get {
    return
  }
}
var EX__MAX: Int32 {
  get {
    return
  }
}
var FASTTRAP_RIP_1: Int32 {
  get {
    return
  }
}
var FASTTRAP_RETURN_AFRAMES: Int32 {
  get {
    return
  }
}
var FASTTRAP_OFFSET_AFRAMES: Int32 {
  get {
    return
  }
}
var FASTTRAP_MAX_INSTR_SIZE: Int32 {
  get {
    return
  }
}
var _RUNE_MAGIC_A: String {
  get {
    return
  }
}
var FASTTRAP_SEG_DS: Int32 {
  get {
    return
  }
}
var FASTTRAP_SEG_CS: Int32 {
  get {
    return
  }
}
var _RPERM_OK: Int32 {
  get {
    return
  }
}
var FASTTRAP_RIP_X: Int32 {
  get {
    return
  }
}
var FASTTRAP_RIP_2: Int32 {
  get {
    return
  }
}
var _RLIMIT_POSIX_FLAG: Int32 {
  get {
    return
  }
}
var _RMFILE_OK: Int32 {
  get {
    return
  }
}
var FASTTRAP_SEG_SS: Int32 {
  get {
    return
  }
}
var _REXT_OK: Int32 {
  get {
    return
  }
}
var FASTTRAP_SEG_NONE: Int32 {
  get {
    return
  }
}
var FASTTRAP_SEG_GS: Int32 {
  get {
    return
  }
}
var _READ_OK: Int32 {
  get {
    return
  }
}
var FASTTRAP_SEG_FS: Int32 {
  get {
    return
  }
}
var FASTTRAP_SEG_ES: Int32 {
  get {
    return
  }
}
var WRDE_REUSE: Int32 {
  get {
    return
  }
}
var WRDE_SHOWERR: Int32 {
  get {
    return
  }
}
var _RATTR_OK: Int32 {
  get {
    return
  }
}
var WRDE_SYNTAX: Int32 {
  get {
    return
  }
}
var HOST_BASIC_INFO: Int32 {
  get {
    return
  }
}
var WRDE_UNDEF: Int32 {
  get {
    return
  }
}
var WSTOPPED: Int32 {
  get {
    return
  }
}
var HFS_UUID_NAMESPACE_ID: String {
  get {
    return
  }
}
var HISTFRACTION: Int32 {
  get {
    return
  }
}
var WUNTRACED: Int32 {
  get {
    return
  }
}
var W_OK: Int32 {
  get {
    return
  }
}
var HFS_GET_JOURNAL_INFO: Int32 {
  get {
    return
  }
}
var HFS_INODE_PREFIX: String {
  get {
    return
  }
}
var HFS_REPLAY_JOURNAL: Int32 {
  get {
    return
  }
}
var HFS_SET_PKG_EXTENSIONS: Int32 {
  get {
    return
  }
}
var HFS_ENABLE_RESIZE_DEBUG: Int32 {
  get {
    return
  }
}
var XUCRED_VERSION: Int32 {
  get {
    return
  }
}
var HFS_ENCODINGBIAS: Int32 {
  get {
    return
  }
}
var X_OK: Int32 {
  get {
    return
  }
}
var X_TLOSS: Double {
  get {
    return
  }
}
var HFS_ENCODINGHINT: Int32 {
  get {
    return
  }
}
var HFS_EXTEND_FS: Int32 {
  get {
    return
  }
}
var YESEXPR: Int32 {
  get {
    return
  }
}
var YESSTR: Int32 {
  get {
    return
  }
}
var ZONE_NAME_MAX_LEN: Int32 {
  get {
    return
  }
}
var HOST_INFO_MAX: Int32 {
  get {
    return
  }
}
var HOST_IO_MASTER_PORT: Int32 {
  get {
    return
  }
}
var HOST_LOAD_INFO: Int32 {
  get {
    return
  }
}
var HOST_EXTMOD_INFO64: Int32 {
  get {
    return
  }
}
var _APPEND_OK: Int32 {
  get {
    return
  }
}
var HOST_EXPIRED_TASK_INFO: Int32 {
  get {
    return
  }
}
var HOST_CALENDAR_CHANGED_REPLYID: Int32 {
  get {
    return
  }
}
var HOST_CPU_LOAD_INFO: Int32 {
  get {
    return
  }
}
var HOST_PRIV_PORT: Int32 {
  get {
    return
  }
}
var HOST_REBOOT_HALT: Int32 {
  get {
    return
  }
}
var HOST_REBOOT_DEBUGGER: Int32 {
  get {
    return
  }
}
var HOST_PORT: Int32 {
  get {
    return
  }
}
var HOST_PRIORITY_INFO: Int32 {
  get {
    return
  }
}
var HOST_NOTIFY_TYPE_MAX: Int32 {
  get {
    return
  }
}
var _CACHED_RUNES: Int32 {
  get {
    return
  }
}
var HOST_NOT_FOUND: Int32 {
  get {
    return
  }
}
var HOST_NOTIFY_CALENDAR_CHANGE: Int32 {
  get {
    return
  }
}
var _CHOWN_OK: Int32 {
  get {
    return
  }
}
var HOST_LOCAL_NODE: Int32 {
  get {
    return
  }
}
var HOST_MAX_SPECIAL_KERNEL_PORT: Int32 {
  get {
    return
  }
}
var HOST_MACH_MSG_TRAP: Int32 {
  get {
    return
  }
}
var HOST_VM_INFO64: Int32 {
  get {
    return
  }
}
var _CS_DARWIN_USER_DIR: Int32 {
  get {
    return
  }
}
var HOST_VM_INFO: Int32 {
  get {
    return
  }
}
var _CS_DARWIN_USER_CACHE_DIR: Int32 {
  get {
    return
  }
}
var _CS_PATH: Int32 {
  get {
    return
  }
}
var _CS_DARWIN_USER_TEMP_DIR: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFF32_CFLAGS: Int32 {
  get {
    return
  }
}
var HOST_SEMAPHORE_TRAPS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFF32_LIBS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: Int32 {
  get {
    return
  }
}
var HOST_SECURITY_PORT: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_LP64_OFF64_CFLAGS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_ILP32_OFFBIG_LIBS: Int32 {
  get {
    return
  }
}
var HOST_RESOURCE_SIZES: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_LP64_OFF64_LIBS: Int32 {
  get {
    return
  }
}
var HOST_REBOOT_UPSDELAY: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_LP64_OFF64_LDFLAGS: Int32 {
  get {
    return
  }
}
var HOST_SCHED_INFO: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: Int32 {
  get {
    return
  }
}
var HUPCL: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_CFLAGS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: Int32 {
  get {
    return
  }
}
var _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_LIBS: Int32 {
  get {
    return
  }
}
var HUGE: Float {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_LINTFLAGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFF32_LDFLAGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_LIBS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: Int32 {
  get {
    return
  }
}
var HOST_VM_PURGABLE: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_CFLAGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_ILP32_OFFBIG_LDFLAGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_LDFLAGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_LIBS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_CFLAGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: Int32 {
  get {
    return
  }
}
var HW_MACHINE_ARCH: Int32 {
  get {
    return
  }
}
var HW_MEMSIZE: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_LIBS: Int32 {
  get {
    return
  }
}
var HW_MAXID: Int32 {
  get {
    return
  }
}
var HW_L3SETTINGS: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LP64_OFF64_LINTFLAGS: Int32 {
  get {
    return
  }
}
var HW_MACHINE: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_CFLAGS: Int32 {
  get {
    return
  }
}
var _CTYPE_B: Int {
  get {
    return
  }
}
var HW_L2SETTINGS: Int32 {
  get {
    return
  }
}
var HW_L3CACHESIZE: Int32 {
  get {
    return
  }
}
var _CTYPE_C: Int {
  get {
    return
  }
}
var HW_L1ICACHESIZE: Int32 {
  get {
    return
  }
}
var _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: Int32 {
  get {
    return
  }
}
var HW_L1DCACHESIZE: Int32 {
  get {
    return
  }
}
var HW_L2CACHESIZE: Int32 {
  get {
    return
  }
}
var _CTYPE_A: Int {
  get {
    return
  }
}
var _CTYPE_I: Int {
  get {
    return
  }
}
var HW_EPOCH: Int32 {
  get {
    return
  }
}
var _CTYPE_L: Int {
  get {
    return
  }
}
var HW_FLOATINGPT: Int32 {
  get {
    return
  }
}
var HW_DISKNAMES: Int32 {
  get {
    return
  }
}
var _CTYPE_D: Int {
  get {
    return
  }
}
var HW_DISKSTATS: Int32 {
  get {
    return
  }
}
var _CTYPE_G: Int {
  get {
    return
  }
}
var HW_CACHELINE: Int32 {
  get {
    return
  }
}
var _CTYPE_R: Int {
  get {
    return
  }
}
var HW_CPU_FREQ: Int32 {
  get {
    return
  }
}
var _CTYPE_S: Int {
  get {
    return
  }
}
var _CTYPE_P: Int {
  get {
    return
  }
}
var HW_AVAILCPU: Int32 {
  get {
    return
  }
}
var HW_BYTEORDER: Int32 {
  get {
    return
  }
}
var HW_BUS_FREQ: Int32 {
  get {
    return
  }
}
var _CTYPE_Q: Int {
  get {
    return
  }
}
var ICMPV6CTL_ND6_ONLINKNSRFC4861: Int32 {
  get {
    return
  }
}
var _CTYPE_SWM: Int {
  get {
    return
  }
}
var ICMP6_FILTER: Int32 {
  get {
    return
  }
}
var _CTYPE_SW3: Int {
  get {
    return
  }
}
var _CTYPE_SW1: Int {
  get {
    return
  }
}
var I386_THREAD_STATE_MAX: Int32 {
  get {
    return
  }
}
var ICANON: Int32 {
  get {
    return
  }
}
var _CTYPE_SW2: Int {
  get {
    return
  }
}
var _CTYPE_SW0: Int {
  get {
    return
  }
}
var I386_PGSHIFT: Int32 {
  get {
    return
  }
}
var I386_PGBYTES: Int32 {
  get {
    return
  }
}
var _CTYPE_X: Int {
  get {
    return
  }
}
var I386_LPGSHIFT: Int32 {
  get {
    return
  }
}
var _CTYPE_U: Int {
  get {
    return
  }
}
var _CTYPE_T: Int {
  get {
    return
  }
}
var _CTYPE_SWS: Int32 {
  get {
    return
  }
}
var _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: Int32 {
  get {
    return
  }
}
var _DARWIN_FEATURE_64_BIT_INODE: Int32 {
  get {
    return
  }
}
var HW_USERMEM: Int32 {
  get {
    return
  }
}
var HW_VECTORUNIT: Int32 {
  get {
    return
  }
}
var HW_TB_FREQ: Int32 {
  get {
    return
  }
}
var HW_PHYSMEM: Int32 {
  get {
    return
  }
}
var HW_PAGESIZE: Int32 {
  get {
    return
  }
}
var _DELETE_OK: Int32 {
  get {
    return
  }
}
var HW_NCPU: Int32 {
  get {
    return
  }
}
var HW_MODEL: Int32 {
  get {
    return
  }
}
var _DARWIN_FEATURE_UNIX_CONFORMANCE: Int32 {
  get {
    return
  }
}
var IFCAP_TSO6: Int32 {
  get {
    return
  }
}
var IFCAP_TSO4: Int32 {
  get {
    return
  }
}
var IFCAP_RXCSUM: Int32 {
  get {
    return
  }
}
var IFCAP_LRO: Int32 {
  get {
    return
  }
}
var IFCAP_JUMBO_MTU: Int32 {
  get {
    return
  }
}
var IFCAP_AV: Int32 {
  get {
    return
  }
}
var _EXECUTE_OK: Int32 {
  get {
    return
  }
}
var IEXTEN: Int32 {
  get {
    return
  }
}
var ICRNL: Int32 {
  get {
    return
  }
}
var ICONV_TRIVIALP: Int32 {
  get {
    return
  }
}
@availability(*, unavailable, message="use 'nil' instead of this imported macro") var _FILESEC_UNSET_PROPERTY: ()
var ICONV_SET_TRANSLITERATE: Int32 {
  get {
    return
  }
}
var ICONV_SET_HOOKS: Int32 {
  get {
    return
  }
}
var ICONV_SET_FALLBACKS: Int32 {
  get {
    return
  }
}
var ICONV_SET_DISCARD_ILSEQ: Int32 {
  get {
    return
  }
}
var ICONV_GET_TRANSLITERATE: Int32 {
  get {
    return
  }
}
var ICONV_GET_DISCARD_ILSEQ: Int32 {
  get {
    return
  }
}
var _FORTIFY_SOURCE: Int32 {
  get {
    return
  }
}
var FSOPT_REPORT_FULLSIZE: Int32 {
  get {
    return
  }
}
var FST_EOF: Int32 {
  get {
    return
  }
}
var _GLOB_ERR_BLOCK: UInt32 {
  get {
    return
  }
}
var FTW_CHDIR: Int32 {
  get {
    return
  }
}
var FTW_D: Int32 {
  get {
    return
  }
}
var FTW_DEPTH: Int32 {
  get {
    return
  }
}
var FTW_DNR: Int32 {
  get {
    return
  }
}
var FTW_DP: Int32 {
  get {
    return
  }
}
var FTW_F: Int32 {
  get {
    return
  }
}
var FTW_MOUNT: Int32 {
  get {
    return
  }
}
var FTW_NS: Int32 {
  get {
    return
  }
}
var FP_ZERO: Int32 {
  get {
    return
  }
}
var FREAD: Int32 {
  get {
    return
  }
}
var FSHIFT: Int32 {
  get {
    return
  }
}
var FSOPT_ATTR_CMN_EXTENDED: Int32 {
  get {
    return
  }
}
var FSOPT_NOFOLLOW: Int32 {
  get {
    return
  }
}
var FSOPT_NOINMEMUPDATE: Int32 {
  get {
    return
  }
}
var FSOPT_PACK_INVAL_ATTRS: Int32 {
  get {
    return
  }
}
var F_ALLOCATEALL: Int32 {
  get {
    return
  }
}
var F_ALLOCATECONTIG: Int32 {
  get {
    return
  }
}
var F_DUPFD: Int32 {
  get {
    return
  }
}
var F_CHKCLEAN: Int32 {
  get {
    return
  }
}
var F_DUPFD_CLOEXEC: Int32 {
  get {
    return
  }
}
var F_FINDSIGS: Int32 {
  get {
    return
  }
}
var F_FLUSH_DATA: Int32 {
  get {
    return
  }
}
var F_FREEZE_FS: Int32 {
  get {
    return
  }
}
var F_FULLFSYNC: Int32 {
  get {
    return
  }
}
var FTW_SL: Int32 {
  get {
    return
  }
}
var FTW_PHYS: Int32 {
  get {
    return
  }
}
var FTW_SLN: Int32 {
  get {
    return
  }
}
var FUNCTION_DECLSPEC: Int32 {
  get {
    return
  }
}
var FUNCTION_PASCAL: Int32 {
  get {
    return
  }
}
var FUNCTION_WIN32CC: Int32 {
  get {
    return
  }
}
var FWRITE: Int32 {
  get {
    return
  }
}
var F_ADDFILESIGS: Int32 {
  get {
    return
  }
}
var F_ADDSIGS: Int32 {
  get {
    return
  }
}
var F_GLOBAL_NOCACHE: Int32 {
  get {
    return
  }
}
var F_GETPROTECTIONLEVEL: Int32 {
  get {
    return
  }
}
var F_LOG2PHYS: Int32 {
  get {
    return
  }
}
var F_LOCK: Int32 {
  get {
    return
  }
}
var F_NOCACHE: Int32 {
  get {
    return
  }
}
var _IOLBF: Int32 {
  get {
    return
  }
}
var F_LOG2PHYS_EXT: Int32 {
  get {
    return
  }
}
var _IOFBF: Int32 {
  get {
    return
  }
}
var F_PATHPKG_CHECK: Int32 {
  get {
    return
  }
}
var _IONBF: Int32 {
  get {
    return
  }
}
var F_NODIRECT: Int32 {
  get {
    return
  }
}
var F_OK: Int32 {
  get {
    return
  }
}
var F_GETFL: Int32 {
  get {
    return
  }
}
var _LC_LAST: Int32 {
  get {
    return
  }
}
var F_GETCODEDIR: Int32 {
  get {
    return
  }
}
var F_GETFD: Int32 {
  get {
    return
  }
}
var F_GETLKPID: Int32 {
  get {
    return
  }
}
var F_GETLK: Int32 {
  get {
    return
  }
}
var F_GETOWN: Int32 {
  get {
    return
  }
}
var F_GETPATH: Int32 {
  get {
    return
  }
}
var F_GETNOSIGPIPE: Int32 {
  get {
    return
  }
}
var F_GETPROTECTIONCLASS: Int32 {
  get {
    return
  }
}
var F_GETPATH_MTMINFO: Int32 {
  get {
    return
  }
}
var F_SETNOSIGPIPE: Int32 {
  get {
    return
  }
}
var F_SETLKWTIMEOUT: Int32 {
  get {
    return
  }
}
var F_SETLKW: Int32 {
  get {
    return
  }
}
var F_SETPROTECTIONCLASS: Int32 {
  get {
    return
  }
}
var F_SETOWN: Int32 {
  get {
    return
  }
}
var F_SINGLE_WRITER: Int32 {
  get {
    return
  }
}
var F_SETSIZE: Int32 {
  get {
    return
  }
}
var F_TLOCK: Int32 {
  get {
    return
  }
}
var F_THAW_FS: Int32 {
  get {
    return
  }
}
var F_TEST: Int32 {
  get {
    return
  }
}
var _LIBICONV_VERSION: Int32 {
  get {
    return
  }
}
var F_PREALLOCATE: Int32 {
  get {
    return
  }
}
var F_PEOFPOSMODE: Int32 {
  get {
    return
  }
}
var F_RDAHEAD: Int32 {
  get {
    return
  }
}
var F_RDADVISE: Int32 {
  get {
    return
  }
}
var F_SETFD: Int32 {
  get {
    return
  }
}
var F_SETBACKINGSTORE: Int32 {
  get {
    return
  }
}
var F_RDLCK: Int32 {
  get {
    return
  }
}
var F_SETLK: Int32 {
  get {
    return
  }
}
var F_SETFL: Int32 {
  get {
    return
  }
}
var GETALL: Int32 {
  get {
    return
  }
}
var GETVAL: Int32 {
  get {
    return
  }
}
var GETZCNT: Int32 {
  get {
    return
  }
}
var GETNCNT: Int32 {
  get {
    return
  }
}
var GETPID: Int32 {
  get {
    return
  }
}
var F_UNLCK: Int32 {
  get {
    return
  }
}
var F_VOLPOSMODE: Int32 {
  get {
    return
  }
}
var F_WRLCK: Int32 {
  get {
    return
  }
}
var F_TRANSCODEKEY: Int32 {
  get {
    return
  }
}
var F_ULOCK: Int32 {
  get {
    return
  }
}
var GLOB_MAGCHAR: Int32 {
  get {
    return
  }
}
var GLOB_MARK: Int32 {
  get {
    return
  }
}
var GLOB_ERR: Int32 {
  get {
    return
  }
}
var GLOB_LIMIT: Int32 {
  get {
    return
  }
}
var GLOB_NOMAGIC: Int32 {
  get {
    return
  }
}
var GLOB_NOMATCH: Int32 {
  get {
    return
  }
}
var GLOB_NOCHECK: Int32 {
  get {
    return
  }
}
var GLOB_MAXPATH: Int32 {
  get {
    return
  }
}
var GLOB_NOESCAPE: Int32 {
  get {
    return
  }
}
var GID_MAX: UInt32 {
  get {
    return
  }
}
var GLOB_ABEND: Int32 {
  get {
    return
  }
}
var GLOB_BRACE: Int32 {
  get {
    return
  }
}
var GLOB_DOOFFS: Int32 {
  get {
    return
  }
}
var GLOB_ABORTED: Int32 {
  get {
    return
  }
}
var GLOB_APPEND: Int32 {
  get {
    return
  }
}
var GLOB_ALTDIRFUNC: Int32 {
  get {
    return
  }
}
var GMON_MAGIC_64: UInt32 {
  get {
    return
  }
}
var GMON_MAGIC: UInt32 {
  get {
    return
  }
}
var GMONVERSION: Int32 {
  get {
    return
  }
}
var GMONTYPE_SAMPLES: Int32 {
  get {
    return
  }
}
var GMON_PROF_ON: Int32 {
  get {
    return
  }
}
var GPROF_COUNT: Int32 {
  get {
    return
  }
}
var GMON_PROF_OFF: Int32 {
  get {
    return
  }
}
var GMON_PROF_ERROR: Int32 {
  get {
    return
  }
}
var GMON_PROF_BUSY: Int32 {
  get {
    return
  }
}
var GLOB_QUOTE: Int32 {
  get {
    return
  }
}
var GLOB_TILDE: Int32 {
  get {
    return
  }
}
var GLOB_NOSYS: Int32 {
  get {
    return
  }
}
var GLOB_NOSPACE: Int32 {
  get {
    return
  }
}
var GLOB_NOSORT: Int32 {
  get {
    return
  }
}
var GMONTYPE_RAWARCS: Int32 {
  get {
    return
  }
}
var GMONTYPE_DYLD_STATE: Int32 {
  get {
    return
  }
}
var GMONTYPE_DYLD2_STATE: Int32 {
  get {
    return
  }
}
var GMONTYPE_ARCS_ORDERS: Int32 {
  get {
    return
  }
}
var HFSPLUS_DIR_METADATA_FOLDER: String {
  get {
    return
  }
}
var HFSPLUSMETADATAFOLDER: String {
  get {
    return
  }
}
var HFSFSMNT_WRAPPER: Int32 {
  get {
    return
  }
}
var HFSFSMNT_NOXONFILES: Int32 {
  get {
    return
  }
}
var HFS_ENABLE_JOURNALING: Int32 {
  get {
    return
  }
}
var HFS_DISABLE_JOURNALING: Int32 {
  get {
    return
  }
}
var HFS_DIRINODE_PREFIX: String {
  get {
    return
  }
}
var HFS_DELETE_PREFIX: String {
  get {
    return
  }
}
var GPROF_TOS: Int32 {
  get {
    return
  }
}
var GPROF_STATE: Int32 {
  get {
    return
  }
}
var GPROF_GMONPARAM: Int32 {
  get {
    return
  }
}
var GPROF_FROMS: Int32 {
  get {
    return
  }
}
var HFSFSMNT_EXTENDED_ARGS: Int32 {
  get {
    return
  }
}
var HASHFRACTION: Int32 {
  get {
    return
  }
}
var GUARD_TYPE_MACH_PORT: Int32 {
  get {
    return
  }
}
var GRPQUOTA: Int32 {
  get {
    return
  }
}
@exported import Darwin
func fdim(lhs: Float, rhs: Float) -> Float
@asmname("_swift_Darwin_open") func _swift_Darwin_open(path: UnsafePointer<CChar>, oflag: CInt, mode: mode_t) -> CInt
func fmod(lhs: Float, rhs: Float) -> Float
let S_IWRITE: UInt16
func yn(n: Int, x: Double) -> Double
func expm1(x: Float) -> Float
func atanh(x: Float) -> Float
func copysign(lhs: Float, rhs: Float) -> Float
let S_IXUSR: UInt16
func nextafter(lhs: Float, rhs: Float) -> Float
let S_IRGRP: UInt16
func jn(n: Int, x: Double) -> Double
func remquo(x: Float, y: Float) -> (Float, Int)
func remquo(x: Double, y: Double) -> (Double, Int)
func ceil(x: Float) -> Float
func ceil(x: Double) -> Double
func log(x: Float) -> Float
func log(x: Double) -> Double
func log10(x: Float) -> Float
func log10(x: Double) -> Double
func atan(x: Float) -> Float
func frexp(value: Float) -> (Float, Int)
func frexp(value: Double) -> (Double, Int)
let noErr: OSStatus
func sin(x: Float) -> Float
func sin(x: Double) -> Double
func tanh(x: Float) -> Float
func signbit(value: Float) -> Int
func signbit(value: Double) -> Int
let S_IFSOCK: UInt16
@asmname("_swift_Darwin_openat") func _swift_Darwin_openat(fd: CInt, path: UnsafePointer<CChar>, oflag: CInt, mode: mode_t) -> CInt
func pow(lhs: Float, rhs: Float) -> Float
let S_IWOTH: UInt16
let S_IFCHR: UInt16
var stdin: UnsafeMutablePointer<FILE> {
  get {}
  set {}
}
let S_ISGID: UInt16
func floor(x: Float) -> Float
func floor(x: Double) -> Double
let S_IFLNK: UInt16
func fmin(lhs: Float, rhs: Float) -> Float
func fmax(lhs: Float, rhs: Float) -> Float
func fma(x: Float, y: Float, z: Float) -> Float
let S_IFWHT: UInt16
@asmname("lgammaf_r") func _swift_Darwin_lgammaf_r(_: CFloat, _: UnsafeMutablePointer<CInt>) -> CFloat
let S_IREAD: UInt16
let S_IROTH: UInt16
func isnan(value: Float) -> Bool
func isnan(value: Double) -> Bool
let S_IXGRP: UInt16
func fabs(x: Float) -> Float
func fabs(x: Double) -> Double
func exp2(x: Float) -> Float
func exp2(x: Double) -> Double
func log1p(x: Float) -> Float
func tan(x: Float) -> Float
var stdout: UnsafeMutablePointer<FILE> {
  get {}
  set {}
}
func openat(fd: CInt, path: UnsafePointer<CChar>, oflag: CInt) -> CInt
func openat(fd: CInt, path: UnsafePointer<CChar>, oflag: CInt, mode: mode_t) -> CInt
@availability(*, unavailable, message="Please use threads or posix_spawn*()") func vfork() -> Int32
func sqrt(x: Float) -> Float
func sqrt(x: Double) -> Double
func scalbn(x: Float, n: Int) -> Float
func scalbn(x: Double, n: Int) -> Double
var stderr: UnsafeMutablePointer<FILE> {
  get {}
  set {}
}
func hypot(lhs: Float, rhs: Float) -> Float
let S_IFBLK: UInt16
func rint(x: Float) -> Float
func rint(x: Double) -> Double
let S_IFIFO: UInt16
func cbrt(x: Float) -> Float
func nearbyint(x: Float) -> Float
func nearbyint(x: Double) -> Double
func exp(x: Float) -> Float
func exp(x: Double) -> Double
let S_ISTXT: UInt16
let S_ISVTX: UInt16
func log2(x: Float) -> Float
func log2(x: Double) -> Double
@asmname("ilogb") func _swift_Darwin_ilogb(value: CDouble) -> CInt
let S_IXOTH: UInt16
let S_IFREG: UInt16
let S_IFDIR: UInt16
func acos(x: Float) -> Float
var errno: Int32 {
  get {}
  set {}
}
let S_IWUSR: UInt16
func ilogb(x: Float) -> Int
func ilogb(x: Double) -> Int
@asmname("lgamma_r") func _swift_Darwin_lgamma_r(_: CDouble, _: UnsafeMutablePointer<CInt>) -> CDouble
func lgamma(x: Float) -> (Float, Int)
func lgamma(x: Double) -> (Double, Int)
func asinh(x: Float) -> Float
func tgamma(x: Float) -> Float
func isinf(value: Float) -> Bool
func isinf(value: Double) -> Bool
func isfinite(value: Float) -> Bool
func isfinite(value: Double) -> Bool
func erf(x: Float) -> Float
func erfc(x: Float) -> Float
let S_IEXEC: UInt16
let S_IFMT: UInt16
func logb(x: Float) -> Float
func modf(value: Float) -> (Float, Float)
func modf(value: Double) -> (Double, Double)
let S_IRUSR: UInt16
func round(x: Float) -> Float
func round(x: Double) -> Double
func acosh(x: Float) -> Float
let S_ISUID: UInt16
func sinh(x: Float) -> Float
func fpclassify(x: Float) -> Int
func fpclassify(x: Double) -> Int
func atan2(lhs: Float, rhs: Float) -> Float
func remainder(lhs: Float, rhs: Float) -> Float
func nan(tag: String) -> Float
func ldexp(x: Float, n: Int) -> Float
func ldexp(x: Double, n: Int) -> Double
let S_IRWXG: UInt16
func cos(x: Float) -> Float
func cos(x: Double) -> Double
func isnormal(value: Float) -> Bool
func isnormal(value: Double) -> Bool
let S_IRWXO: UInt16
func asin(x: Float) -> Float
func trunc(x: Float) -> Float
func trunc(x: Double) -> Double
func cosh(x: Float) -> Float
let S_IRWXU: UInt16
func open(path: UnsafePointer<CChar>, oflag: CInt) -> CInt
func open(path: UnsafePointer<CChar>, oflag: CInt, mode: mode_t) -> CInt
@availability(*, unavailable, message="Please use threads or posix_spawn*()") func fork() -> Int32
let S_IWGRP: UInt16
extension stat {
  init()
}
